// Code generated by MockGen. DO NOT EDIT.
// Source: ./git/git_service.go
//
// Generated by this command:
//
//	mockgen -source ./git/git_service.go -destination ./git_mock/gen_git_service_mock.go -package git_mock
//

// Package git_mock is a generated GoMock package.
package git_mock

import (
	context "context"
	reflect "reflect"

	git "github.com/kyoh86/gogh/v4/core/git"
	gomock "go.uber.org/mock/gomock"
)

// MockGitService is a mock of GitService interface.
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
	isgomock struct{}
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService.
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance.
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// AuthenticateWithUsernamePassword mocks base method.
func (m *MockGitService) AuthenticateWithUsernamePassword(ctx context.Context, username, password string) (git.GitService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateWithUsernamePassword", ctx, username, password)
	ret0, _ := ret[0].(git.GitService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithUsernamePassword indicates an expected call of AuthenticateWithUsernamePassword.
func (mr *MockGitServiceMockRecorder) AuthenticateWithUsernamePassword(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithUsernamePassword", reflect.TypeOf((*MockGitService)(nil).AuthenticateWithUsernamePassword), ctx, username, password)
}

// Clone mocks base method.
func (m *MockGitService) Clone(ctx context.Context, remoteURL, localPath string, opts git.CloneOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, remoteURL, localPath, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitServiceMockRecorder) Clone(ctx, remoteURL, localPath, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitService)(nil).Clone), ctx, remoteURL, localPath, opts)
}

// GetDefaultRemotes mocks base method.
func (m *MockGitService) GetDefaultRemotes(ctx context.Context, localPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRemotes", ctx, localPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultRemotes indicates an expected call of GetDefaultRemotes.
func (mr *MockGitServiceMockRecorder) GetDefaultRemotes(ctx, localPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRemotes", reflect.TypeOf((*MockGitService)(nil).GetDefaultRemotes), ctx, localPath)
}

// GetRemotes mocks base method.
func (m *MockGitService) GetRemotes(ctx context.Context, localPath, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemotes", ctx, localPath, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemotes indicates an expected call of GetRemotes.
func (mr *MockGitServiceMockRecorder) GetRemotes(ctx, localPath, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemotes", reflect.TypeOf((*MockGitService)(nil).GetRemotes), ctx, localPath, name)
}

// Init mocks base method.
func (m *MockGitService) Init(ctx context.Context, remoteURL, localPath string, isBare bool, opts git.InitOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, remoteURL, localPath, isBare, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGitServiceMockRecorder) Init(ctx, remoteURL, localPath, isBare, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGitService)(nil).Init), ctx, remoteURL, localPath, isBare, opts)
}

// ListExcludedFiles mocks base method.
func (m *MockGitService) ListExcludedFiles(ctx context.Context, repoPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExcludedFiles", ctx, repoPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExcludedFiles indicates an expected call of ListExcludedFiles.
func (mr *MockGitServiceMockRecorder) ListExcludedFiles(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExcludedFiles", reflect.TypeOf((*MockGitService)(nil).ListExcludedFiles), ctx, repoPath)
}

// SetDefaultRemotes mocks base method.
func (m *MockGitService) SetDefaultRemotes(ctx context.Context, localPath string, remotes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultRemotes", ctx, localPath, remotes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultRemotes indicates an expected call of SetDefaultRemotes.
func (mr *MockGitServiceMockRecorder) SetDefaultRemotes(ctx, localPath, remotes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultRemotes", reflect.TypeOf((*MockGitService)(nil).SetDefaultRemotes), ctx, localPath, remotes)
}

// SetRemotes mocks base method.
func (m *MockGitService) SetRemotes(ctx context.Context, localPath, name string, remotes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemotes", ctx, localPath, name, remotes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemotes indicates an expected call of SetRemotes.
func (mr *MockGitServiceMockRecorder) SetRemotes(ctx, localPath, name, remotes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemotes", reflect.TypeOf((*MockGitService)(nil).SetRemotes), ctx, localPath, name, remotes)
}
