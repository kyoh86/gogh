// Code generated by MockGen. DO NOT EDIT.
// Source: script/script.go
//
// Generated by this command:
//
//	mockgen -source script/script.go -destination script_mock/gen_script_mock.go -package script_mock
//

// Package script_mock is a generated GoMock package.
package script_mock

import (
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockScript is a mock of Script interface.
type MockScript struct {
	ctrl     *gomock.Controller
	recorder *MockScriptMockRecorder
	isgomock struct{}
}

// MockScriptMockRecorder is the mock recorder for MockScript.
type MockScriptMockRecorder struct {
	mock *MockScript
}

// NewMockScript creates a new mock instance.
func NewMockScript(ctrl *gomock.Controller) *MockScript {
	mock := &MockScript{ctrl: ctrl}
	mock.recorder = &MockScriptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScript) EXPECT() *MockScriptMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method.
func (m *MockScript) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockScriptMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockScript)(nil).CreatedAt))
}

// ID mocks base method.
func (m *MockScript) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockScriptMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockScript)(nil).ID))
}

// Name mocks base method.
func (m *MockScript) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockScriptMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScript)(nil).Name))
}

// UUID mocks base method.
func (m *MockScript) UUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockScriptMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockScript)(nil).UUID))
}

// UpdatedAt mocks base method.
func (m *MockScript) UpdatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// UpdatedAt indicates an expected call of UpdatedAt.
func (mr *MockScriptMockRecorder) UpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedAt", reflect.TypeOf((*MockScript)(nil).UpdatedAt))
}
