// Code generated by MockGen. DO NOT EDIT.
// Source: script/service.go
//
// Generated by this command:
//
//	mockgen -source script/service.go -destination script_mock/gen_service_mock.go -package script_mock
//

// Package script_mock is a generated GoMock package.
package script_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	script "github.com/kyoh86/gogh/v4/core/script"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptService is a mock of ScriptService interface.
type MockScriptService struct {
	ctrl     *gomock.Controller
	recorder *MockScriptServiceMockRecorder
	isgomock struct{}
}

// MockScriptServiceMockRecorder is the mock recorder for MockScriptService.
type MockScriptServiceMockRecorder struct {
	mock *MockScriptService
}

// NewMockScriptService creates a new mock instance.
func NewMockScriptService(ctrl *gomock.Controller) *MockScriptService {
	mock := &MockScriptService{ctrl: ctrl}
	mock.recorder = &MockScriptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptService) EXPECT() *MockScriptServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockScriptService) Add(ctx context.Context, name string, content io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, name, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockScriptServiceMockRecorder) Add(ctx, name, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockScriptService)(nil).Add), ctx, name, content)
}

// Get mocks base method.
func (m *MockScriptService) Get(ctx context.Context, id string) (*script.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*script.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScriptServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScriptService)(nil).Get), ctx, id)
}

// HasChanges mocks base method.
func (m *MockScriptService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockScriptServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockScriptService)(nil).HasChanges))
}

// List mocks base method.
func (m *MockScriptService) List() iter.Seq2[*script.Script, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(iter.Seq2[*script.Script, error])
	return ret0
}

// List indicates an expected call of List.
func (mr *MockScriptServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScriptService)(nil).List))
}

// Load mocks base method.
func (m *MockScriptService) Load(arg0 iter.Seq2[*script.Script, error]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockScriptServiceMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockScriptService)(nil).Load), arg0)
}

// MarkSaved mocks base method.
func (m *MockScriptService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockScriptServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockScriptService)(nil).MarkSaved))
}

// Open mocks base method.
func (m *MockScriptService) Open(ctx context.Context, id string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, id)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockScriptServiceMockRecorder) Open(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockScriptService)(nil).Open), ctx, id)
}

// Remove mocks base method.
func (m *MockScriptService) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockScriptServiceMockRecorder) Remove(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockScriptService)(nil).Remove), ctx, id)
}

// Update mocks base method.
func (m *MockScriptService) Update(ctx context.Context, id, name string, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptServiceMockRecorder) Update(ctx, id, name, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptService)(nil).Update), ctx, id, name, content)
}
