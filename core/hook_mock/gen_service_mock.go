// Code generated by MockGen. DO NOT EDIT.
// Source: hook/service.go
//
// Generated by this command:
//
//	mockgen -source hook/service.go -destination hook_mock/gen_service_mock.go -package hook_mock
//

// Package hook_mock is a generated GoMock package.
package hook_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	hook "github.com/kyoh86/gogh/v4/core/hook"
	gomock "go.uber.org/mock/gomock"
)

// MockHookService is a mock of HookService interface.
type MockHookService struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceMockRecorder
	isgomock struct{}
}

// MockHookServiceMockRecorder is the mock recorder for MockHookService.
type MockHookServiceMockRecorder struct {
	mock *MockHookService
}

// NewMockHookService creates a new mock instance.
func NewMockHookService(ctrl *gomock.Controller) *MockHookService {
	mock := &MockHookService{ctrl: ctrl}
	mock.recorder = &MockHookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookService) EXPECT() *MockHookServiceMockRecorder {
	return m.recorder
}

// AddHook mocks base method.
func (m *MockHookService) AddHook(ctx context.Context, h hook.Hook, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHook", ctx, h, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHook indicates an expected call of AddHook.
func (mr *MockHookServiceMockRecorder) AddHook(ctx, h, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHook", reflect.TypeOf((*MockHookService)(nil).AddHook), ctx, h, content)
}

// GetHookByID mocks base method.
func (m *MockHookService) GetHookByID(ctx context.Context, id string) (*hook.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookByID", ctx, id)
	ret0, _ := ret[0].(*hook.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHookByID indicates an expected call of GetHookByID.
func (mr *MockHookServiceMockRecorder) GetHookByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookByID", reflect.TypeOf((*MockHookService)(nil).GetHookByID), ctx, id)
}

// HasChanges mocks base method.
func (m *MockHookService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockHookServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockHookService)(nil).HasChanges))
}

// ListHooks mocks base method.
func (m *MockHookService) ListHooks() iter.Seq2[*hook.Hook, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks")
	ret0, _ := ret[0].(iter.Seq2[*hook.Hook, error])
	return ret0
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockHookServiceMockRecorder) ListHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockHookService)(nil).ListHooks))
}

// MarkSaved mocks base method.
func (m *MockHookService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockHookServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockHookService)(nil).MarkSaved))
}

// OpenHookScript mocks base method.
func (m *MockHookService) OpenHookScript(ctx context.Context, h hook.Hook) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenHookScript", ctx, h)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenHookScript indicates an expected call of OpenHookScript.
func (mr *MockHookServiceMockRecorder) OpenHookScript(ctx, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenHookScript", reflect.TypeOf((*MockHookService)(nil).OpenHookScript), ctx, h)
}

// RemoveHook mocks base method.
func (m *MockHookService) RemoveHook(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHook indicates an expected call of RemoveHook.
func (mr *MockHookServiceMockRecorder) RemoveHook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHook", reflect.TypeOf((*MockHookService)(nil).RemoveHook), ctx, id)
}

// SetHooks mocks base method.
func (m *MockHookService) SetHooks(arg0 iter.Seq2[*hook.Hook, error]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHooks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHooks indicates an expected call of SetHooks.
func (mr *MockHookServiceMockRecorder) SetHooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHooks", reflect.TypeOf((*MockHookService)(nil).SetHooks), arg0)
}

// UpdateHook mocks base method.
func (m *MockHookService) UpdateHook(ctx context.Context, h hook.Hook, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHook", ctx, h, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHook indicates an expected call of UpdateHook.
func (mr *MockHookServiceMockRecorder) UpdateHook(ctx, h, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockHookService)(nil).UpdateHook), ctx, h, content)
}
