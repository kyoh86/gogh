// Code generated by MockGen. DO NOT EDIT.
// Source: hook/service.go
//
// Generated by this command:
//
//	mockgen -source hook/service.go -destination hook_mock/gen_service_mock.go -package hook_mock
//

// Package hook_mock is a generated GoMock package.
package hook_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	hook "github.com/kyoh86/gogh/v4/core/hook"
	gomock "go.uber.org/mock/gomock"
)

// MockHookService is a mock of HookService interface.
type MockHookService struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceMockRecorder
	isgomock struct{}
}

// MockHookServiceMockRecorder is the mock recorder for MockHookService.
type MockHookServiceMockRecorder struct {
	mock *MockHookService
}

// NewMockHookService creates a new mock instance.
func NewMockHookService(ctrl *gomock.Controller) *MockHookService {
	mock := &MockHookService{ctrl: ctrl}
	mock.recorder = &MockHookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookService) EXPECT() *MockHookServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHookService) Add(ctx context.Context, h hook.Hook, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, h, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockHookServiceMockRecorder) Add(ctx, h, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHookService)(nil).Add), ctx, h, content)
}

// Get mocks base method.
func (m *MockHookService) Get(ctx context.Context, id string) (*hook.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*hook.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHookServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHookService)(nil).Get), ctx, id)
}

// HasChanges mocks base method.
func (m *MockHookService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockHookServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockHookService)(nil).HasChanges))
}

// List mocks base method.
func (m *MockHookService) List() iter.Seq2[*hook.Hook, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(iter.Seq2[*hook.Hook, error])
	return ret0
}

// List indicates an expected call of List.
func (mr *MockHookServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHookService)(nil).List))
}

// MarkSaved mocks base method.
func (m *MockHookService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockHookServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockHookService)(nil).MarkSaved))
}

// Open mocks base method.
func (m *MockHookService) Open(ctx context.Context, id string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, id)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockHookServiceMockRecorder) Open(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockHookService)(nil).Open), ctx, id)
}

// Remove mocks base method.
func (m *MockHookService) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockHookServiceMockRecorder) Remove(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockHookService)(nil).Remove), ctx, id)
}

// Set mocks base method.
func (m *MockHookService) Set(arg0 iter.Seq2[*hook.Hook, error]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockHookServiceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHookService)(nil).Set), arg0)
}

// Update mocks base method.
func (m *MockHookService) Update(ctx context.Context, h hook.Hook, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, h, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHookServiceMockRecorder) Update(ctx, h, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHookService)(nil).Update), ctx, h, content)
}
