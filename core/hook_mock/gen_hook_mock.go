// Code generated by MockGen. DO NOT EDIT.
// Source: hook/hook.go
//
// Generated by this command:
//
//	mockgen -source hook/hook.go -destination hook_mock/gen_hook_mock.go -package hook_mock
//

// Package hook_mock is a generated GoMock package.
package hook_mock

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	hook "github.com/kyoh86/gogh/v4/core/hook"
	repository "github.com/kyoh86/gogh/v4/core/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockHook is a mock of Hook interface.
type MockHook struct {
	ctrl     *gomock.Controller
	recorder *MockHookMockRecorder
	isgomock struct{}
}

// MockHookMockRecorder is the mock recorder for MockHook.
type MockHookMockRecorder struct {
	mock *MockHook
}

// NewMockHook creates a new mock instance.
func NewMockHook(ctrl *gomock.Controller) *MockHook {
	mock := &MockHook{ctrl: ctrl}
	mock.recorder = &MockHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHook) EXPECT() *MockHookMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockHook) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockHookMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockHook)(nil).ID))
}

// Match mocks base method.
func (m *MockHook) Match(ref repository.Reference, event hook.Event) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ref, event)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockHookMockRecorder) Match(ref, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockHook)(nil).Match), ref, event)
}

// Name mocks base method.
func (m *MockHook) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockHookMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHook)(nil).Name))
}

// OperationID mocks base method.
func (m *MockHook) OperationID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OperationID indicates an expected call of OperationID.
func (mr *MockHookMockRecorder) OperationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationID", reflect.TypeOf((*MockHook)(nil).OperationID))
}

// OperationType mocks base method.
func (m *MockHook) OperationType() hook.OperationType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationType")
	ret0, _ := ret[0].(hook.OperationType)
	return ret0
}

// OperationType indicates an expected call of OperationType.
func (mr *MockHookMockRecorder) OperationType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationType", reflect.TypeOf((*MockHook)(nil).OperationType))
}

// OperationUUID mocks base method.
func (m *MockHook) OperationUUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationUUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// OperationUUID indicates an expected call of OperationUUID.
func (mr *MockHookMockRecorder) OperationUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationUUID", reflect.TypeOf((*MockHook)(nil).OperationUUID))
}

// RepoPattern mocks base method.
func (m *MockHook) RepoPattern() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoPattern")
	ret0, _ := ret[0].(string)
	return ret0
}

// RepoPattern indicates an expected call of RepoPattern.
func (mr *MockHookMockRecorder) RepoPattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoPattern", reflect.TypeOf((*MockHook)(nil).RepoPattern))
}

// TriggerEvent mocks base method.
func (m *MockHook) TriggerEvent() hook.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerEvent")
	ret0, _ := ret[0].(hook.Event)
	return ret0
}

// TriggerEvent indicates an expected call of TriggerEvent.
func (mr *MockHookMockRecorder) TriggerEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerEvent", reflect.TypeOf((*MockHook)(nil).TriggerEvent))
}

// UUID mocks base method.
func (m *MockHook) UUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockHookMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockHook)(nil).UUID))
}
