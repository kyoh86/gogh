// Code generated by MockGen. DO NOT EDIT.
// Source: extra/extra_service.go
//
// Generated by this command:
//
//	mockgen -source extra/extra_service.go -destination extra_mock/gen_service_mock.go -package extra_mock
//

// Package extra_mock is a generated GoMock package.
package extra_mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	extra "github.com/kyoh86/gogh/v4/core/extra"
	repository "github.com/kyoh86/gogh/v4/core/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockExtraService is a mock of ExtraService interface.
type MockExtraService struct {
	ctrl     *gomock.Controller
	recorder *MockExtraServiceMockRecorder
	isgomock struct{}
}

// MockExtraServiceMockRecorder is the mock recorder for MockExtraService.
type MockExtraServiceMockRecorder struct {
	mock *MockExtraService
}

// NewMockExtraService creates a new mock instance.
func NewMockExtraService(ctrl *gomock.Controller) *MockExtraService {
	mock := &MockExtraService{ctrl: ctrl}
	mock.recorder = &MockExtraServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtraService) EXPECT() *MockExtraServiceMockRecorder {
	return m.recorder
}

// AddAutoExtra mocks base method.
func (m *MockExtraService) AddAutoExtra(ctx context.Context, repo, source repository.Reference, items []extra.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAutoExtra", ctx, repo, source, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAutoExtra indicates an expected call of AddAutoExtra.
func (mr *MockExtraServiceMockRecorder) AddAutoExtra(ctx, repo, source, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAutoExtra", reflect.TypeOf((*MockExtraService)(nil).AddAutoExtra), ctx, repo, source, items)
}

// AddNamedExtra mocks base method.
func (m *MockExtraService) AddNamedExtra(ctx context.Context, name string, source repository.Reference, items []extra.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamedExtra", ctx, name, source, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamedExtra indicates an expected call of AddNamedExtra.
func (mr *MockExtraServiceMockRecorder) AddNamedExtra(ctx, name, source, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamedExtra", reflect.TypeOf((*MockExtraService)(nil).AddNamedExtra), ctx, name, source, items)
}

// Get mocks base method.
func (m *MockExtraService) Get(ctx context.Context, idlike string) (*extra.Extra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idlike)
	ret0, _ := ret[0].(*extra.Extra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExtraServiceMockRecorder) Get(ctx, idlike any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExtraService)(nil).Get), ctx, idlike)
}

// GetAutoExtra mocks base method.
func (m *MockExtraService) GetAutoExtra(ctx context.Context, repo repository.Reference) (*extra.Extra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoExtra", ctx, repo)
	ret0, _ := ret[0].(*extra.Extra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoExtra indicates an expected call of GetAutoExtra.
func (mr *MockExtraServiceMockRecorder) GetAutoExtra(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoExtra", reflect.TypeOf((*MockExtraService)(nil).GetAutoExtra), ctx, repo)
}

// GetNamedExtra mocks base method.
func (m *MockExtraService) GetNamedExtra(ctx context.Context, name string) (*extra.Extra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedExtra", ctx, name)
	ret0, _ := ret[0].(*extra.Extra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamedExtra indicates an expected call of GetNamedExtra.
func (mr *MockExtraServiceMockRecorder) GetNamedExtra(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedExtra", reflect.TypeOf((*MockExtraService)(nil).GetNamedExtra), ctx, name)
}

// HasChanges mocks base method.
func (m *MockExtraService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockExtraServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockExtraService)(nil).HasChanges))
}

// List mocks base method.
func (m *MockExtraService) List(ctx context.Context) iter.Seq2[*extra.Extra, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(iter.Seq2[*extra.Extra, error])
	return ret0
}

// List indicates an expected call of List.
func (mr *MockExtraServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExtraService)(nil).List), ctx)
}

// ListByType mocks base method.
func (m *MockExtraService) ListByType(ctx context.Context, extraType extra.Type) iter.Seq2[*extra.Extra, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByType", ctx, extraType)
	ret0, _ := ret[0].(iter.Seq2[*extra.Extra, error])
	return ret0
}

// ListByType indicates an expected call of ListByType.
func (mr *MockExtraServiceMockRecorder) ListByType(ctx, extraType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByType", reflect.TypeOf((*MockExtraService)(nil).ListByType), ctx, extraType)
}

// Load mocks base method.
func (m *MockExtraService) Load(arg0 iter.Seq2[*extra.Extra, error]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockExtraServiceMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockExtraService)(nil).Load), arg0)
}

// MarkSaved mocks base method.
func (m *MockExtraService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockExtraServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockExtraService)(nil).MarkSaved))
}

// Remove mocks base method.
func (m *MockExtraService) Remove(ctx context.Context, idlike string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, idlike)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockExtraServiceMockRecorder) Remove(ctx, idlike any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockExtraService)(nil).Remove), ctx, idlike)
}

// RemoveAutoExtra mocks base method.
func (m *MockExtraService) RemoveAutoExtra(ctx context.Context, repo repository.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAutoExtra", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAutoExtra indicates an expected call of RemoveAutoExtra.
func (mr *MockExtraServiceMockRecorder) RemoveAutoExtra(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAutoExtra", reflect.TypeOf((*MockExtraService)(nil).RemoveAutoExtra), ctx, repo)
}

// RemoveNamedExtra mocks base method.
func (m *MockExtraService) RemoveNamedExtra(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamedExtra", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNamedExtra indicates an expected call of RemoveNamedExtra.
func (mr *MockExtraServiceMockRecorder) RemoveNamedExtra(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamedExtra", reflect.TypeOf((*MockExtraService)(nil).RemoveNamedExtra), ctx, name)
}
