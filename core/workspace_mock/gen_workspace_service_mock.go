// Code generated by MockGen. DO NOT EDIT.
// Source: ./workspace/workspace_service.go
//
// Generated by this command:
//
//	mockgen -source ./workspace/workspace_service.go -destination ./workspace_mock/gen_workspace_service_mock.go -package workspace_mock
//

// Package workspace_mock is a generated GoMock package.
package workspace_mock

import (
	reflect "reflect"

	workspace "github.com/kyoh86/gogh/v4/core/workspace"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspaceService is a mock of WorkspaceService interface.
type MockWorkspaceService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceServiceMockRecorder
	isgomock struct{}
}

// MockWorkspaceServiceMockRecorder is the mock recorder for MockWorkspaceService.
type MockWorkspaceServiceMockRecorder struct {
	mock *MockWorkspaceService
}

// NewMockWorkspaceService creates a new mock instance.
func NewMockWorkspaceService(ctrl *gomock.Controller) *MockWorkspaceService {
	mock := &MockWorkspaceService{ctrl: ctrl}
	mock.recorder = &MockWorkspaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceService) EXPECT() *MockWorkspaceServiceMockRecorder {
	return m.recorder
}

// AddRoot mocks base method.
func (m *MockWorkspaceService) AddRoot(root workspace.Root, asPrimary bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoot", root, asPrimary)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoot indicates an expected call of AddRoot.
func (mr *MockWorkspaceServiceMockRecorder) AddRoot(root, asPrimary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoot", reflect.TypeOf((*MockWorkspaceService)(nil).AddRoot), root, asPrimary)
}

// GetLayoutFor mocks base method.
func (m *MockWorkspaceService) GetLayoutFor(root workspace.Root) workspace.LayoutService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayoutFor", root)
	ret0, _ := ret[0].(workspace.LayoutService)
	return ret0
}

// GetLayoutFor indicates an expected call of GetLayoutFor.
func (mr *MockWorkspaceServiceMockRecorder) GetLayoutFor(root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayoutFor", reflect.TypeOf((*MockWorkspaceService)(nil).GetLayoutFor), root)
}

// GetPrimaryLayout mocks base method.
func (m *MockWorkspaceService) GetPrimaryLayout() workspace.LayoutService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryLayout")
	ret0, _ := ret[0].(workspace.LayoutService)
	return ret0
}

// GetPrimaryLayout indicates an expected call of GetPrimaryLayout.
func (mr *MockWorkspaceServiceMockRecorder) GetPrimaryLayout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryLayout", reflect.TypeOf((*MockWorkspaceService)(nil).GetPrimaryLayout))
}

// GetPrimaryRoot mocks base method.
func (m *MockWorkspaceService) GetPrimaryRoot() workspace.Root {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryRoot")
	ret0, _ := ret[0].(workspace.Root)
	return ret0
}

// GetPrimaryRoot indicates an expected call of GetPrimaryRoot.
func (mr *MockWorkspaceServiceMockRecorder) GetPrimaryRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryRoot", reflect.TypeOf((*MockWorkspaceService)(nil).GetPrimaryRoot))
}

// GetRoots mocks base method.
func (m *MockWorkspaceService) GetRoots() []workspace.Root {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoots")
	ret0, _ := ret[0].([]workspace.Root)
	return ret0
}

// GetRoots indicates an expected call of GetRoots.
func (mr *MockWorkspaceServiceMockRecorder) GetRoots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoots", reflect.TypeOf((*MockWorkspaceService)(nil).GetRoots))
}

// HasChanges mocks base method.
func (m *MockWorkspaceService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockWorkspaceServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockWorkspaceService)(nil).HasChanges))
}

// MarkSaved mocks base method.
func (m *MockWorkspaceService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockWorkspaceServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockWorkspaceService)(nil).MarkSaved))
}

// RemoveRoot mocks base method.
func (m *MockWorkspaceService) RemoveRoot(root workspace.Root) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoot", root)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoot indicates an expected call of RemoveRoot.
func (mr *MockWorkspaceServiceMockRecorder) RemoveRoot(root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoot", reflect.TypeOf((*MockWorkspaceService)(nil).RemoveRoot), root)
}

// SetPrimaryRoot mocks base method.
func (m *MockWorkspaceService) SetPrimaryRoot(arg0 workspace.Root) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrimaryRoot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrimaryRoot indicates an expected call of SetPrimaryRoot.
func (mr *MockWorkspaceServiceMockRecorder) SetPrimaryRoot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrimaryRoot", reflect.TypeOf((*MockWorkspaceService)(nil).SetPrimaryRoot), arg0)
}
