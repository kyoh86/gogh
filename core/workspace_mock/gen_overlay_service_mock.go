// Code generated by MockGen. DO NOT EDIT.
// Source: ./workspace/overlay_service.go
//
// Generated by this command:
//
//	mockgen -source ./workspace/overlay_service.go -destination ./workspace_mock/gen_overlay_service_mock.go -package workspace_mock
//

// Package workspace_mock is a generated GoMock package.
package workspace_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	repository "github.com/kyoh86/gogh/v4/core/repository"
	workspace "github.com/kyoh86/gogh/v4/core/workspace"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlayService is a mock of OverlayService interface.
type MockOverlayService struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayServiceMockRecorder
	isgomock struct{}
}

// MockOverlayServiceMockRecorder is the mock recorder for MockOverlayService.
type MockOverlayServiceMockRecorder struct {
	mock *MockOverlayService
}

// NewMockOverlayService creates a new mock instance.
func NewMockOverlayService(ctrl *gomock.Controller) *MockOverlayService {
	mock := &MockOverlayService{ctrl: ctrl}
	mock.recorder = &MockOverlayServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayService) EXPECT() *MockOverlayServiceMockRecorder {
	return m.recorder
}

// AddOverlay mocks base method.
func (m *MockOverlayService) AddOverlay(ctx context.Context, entry workspace.OverlayEntry, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOverlay", ctx, entry, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOverlay indicates an expected call of AddOverlay.
func (mr *MockOverlayServiceMockRecorder) AddOverlay(ctx, entry, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOverlay", reflect.TypeOf((*MockOverlayService)(nil).AddOverlay), ctx, entry, content)
}

// FindOverlays mocks base method.
func (m *MockOverlayService) FindOverlays(ctx context.Context, ref repository.Reference) iter.Seq2[*workspace.Overlay, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOverlays", ctx, ref)
	ret0, _ := ret[0].(iter.Seq2[*workspace.Overlay, error])
	return ret0
}

// FindOverlays indicates an expected call of FindOverlays.
func (mr *MockOverlayServiceMockRecorder) FindOverlays(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOverlays", reflect.TypeOf((*MockOverlayService)(nil).FindOverlays), ctx, ref)
}

// ListOverlays mocks base method.
func (m *MockOverlayService) ListOverlays(ctx context.Context) ([]workspace.OverlayEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOverlays", ctx)
	ret0, _ := ret[0].([]workspace.OverlayEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOverlays indicates an expected call of ListOverlays.
func (mr *MockOverlayServiceMockRecorder) ListOverlays(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOverlays", reflect.TypeOf((*MockOverlayService)(nil).ListOverlays), ctx)
}

// RemoveOverlay mocks base method.
func (m *MockOverlayService) RemoveOverlay(ctx context.Context, entry workspace.OverlayEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOverlay", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOverlay indicates an expected call of RemoveOverlay.
func (mr *MockOverlayServiceMockRecorder) RemoveOverlay(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOverlay", reflect.TypeOf((*MockOverlayService)(nil).RemoveOverlay), ctx, entry)
}
