// Code generated by MockGen. DO NOT EDIT.
// Source: ./workspace/overlay_service.go
//
// Generated by this command:
//
//	mockgen -source ./workspace/overlay_service.go -destination ./workspace_mock/gen_overlay_service_mock.go -package workspace_mock
//

// Package workspace_mock is a generated GoMock package.
package workspace_mock

import (
	context "context"
	reflect "reflect"

	workspace "github.com/kyoh86/gogh/v4/core/workspace"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlayService is a mock of OverlayService interface.
type MockOverlayService struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayServiceMockRecorder
	isgomock struct{}
}

// MockOverlayServiceMockRecorder is the mock recorder for MockOverlayService.
type MockOverlayServiceMockRecorder struct {
	mock *MockOverlayService
}

// NewMockOverlayService creates a new mock instance.
func NewMockOverlayService(ctrl *gomock.Controller) *MockOverlayService {
	mock := &MockOverlayService{ctrl: ctrl}
	mock.recorder = &MockOverlayServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayService) EXPECT() *MockOverlayServiceMockRecorder {
	return m.recorder
}

// AddPattern mocks base method.
func (m *MockOverlayService) AddPattern(pattern string, files []workspace.OverlayFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPattern", pattern, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPattern indicates an expected call of AddPattern.
func (mr *MockOverlayServiceMockRecorder) AddPattern(pattern, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPattern", reflect.TypeOf((*MockOverlayService)(nil).AddPattern), pattern, files)
}

// ApplyToRepository mocks base method.
func (m *MockOverlayService) ApplyToRepository(ctx context.Context, repoPath, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToRepository", ctx, repoPath, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToRepository indicates an expected call of ApplyToRepository.
func (mr *MockOverlayServiceMockRecorder) ApplyToRepository(ctx, repoPath, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToRepository", reflect.TypeOf((*MockOverlayService)(nil).ApplyToRepository), ctx, repoPath, repo)
}

// GetPatterns mocks base method.
func (m *MockOverlayService) GetPatterns() []workspace.OverlayPattern {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatterns")
	ret0, _ := ret[0].([]workspace.OverlayPattern)
	return ret0
}

// GetPatterns indicates an expected call of GetPatterns.
func (mr *MockOverlayServiceMockRecorder) GetPatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatterns", reflect.TypeOf((*MockOverlayService)(nil).GetPatterns))
}

// HasChanges mocks base method.
func (m *MockOverlayService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockOverlayServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockOverlayService)(nil).HasChanges))
}

// MarkSaved mocks base method.
func (m *MockOverlayService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockOverlayServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockOverlayService)(nil).MarkSaved))
}

// MatchRepository mocks base method.
func (m *MockOverlayService) MatchRepository(repo string) []workspace.OverlayFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRepository", repo)
	ret0, _ := ret[0].([]workspace.OverlayFile)
	return ret0
}

// MatchRepository indicates an expected call of MatchRepository.
func (mr *MockOverlayServiceMockRecorder) MatchRepository(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRepository", reflect.TypeOf((*MockOverlayService)(nil).MatchRepository), repo)
}

// RemovePattern mocks base method.
func (m *MockOverlayService) RemovePattern(pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePattern", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePattern indicates an expected call of RemovePattern.
func (mr *MockOverlayServiceMockRecorder) RemovePattern(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePattern", reflect.TypeOf((*MockOverlayService)(nil).RemovePattern), pattern)
}
