// Code generated by MockGen. DO NOT EDIT.
// Source: workspace/layout_service.go
//
// Generated by this command:
//
//	mockgen -source workspace/layout_service.go -destination workspace_mock/gen_layout_service_mock.go -package workspace_mock
//

// Package workspace_mock is a generated GoMock package.
package workspace_mock

import (
	reflect "reflect"

	repository "github.com/kyoh86/gogh/v4/core/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockLayoutService is a mock of LayoutService interface.
type MockLayoutService struct {
	ctrl     *gomock.Controller
	recorder *MockLayoutServiceMockRecorder
	isgomock struct{}
}

// MockLayoutServiceMockRecorder is the mock recorder for MockLayoutService.
type MockLayoutServiceMockRecorder struct {
	mock *MockLayoutService
}

// NewMockLayoutService creates a new mock instance.
func NewMockLayoutService(ctrl *gomock.Controller) *MockLayoutService {
	mock := &MockLayoutService{ctrl: ctrl}
	mock.recorder = &MockLayoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayoutService) EXPECT() *MockLayoutServiceMockRecorder {
	return m.recorder
}

// CreateRepositoryFolder mocks base method.
func (m *MockLayoutService) CreateRepositoryFolder(reference repository.Reference) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryFolder", reference)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryFolder indicates an expected call of CreateRepositoryFolder.
func (mr *MockLayoutServiceMockRecorder) CreateRepositoryFolder(reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryFolder", reflect.TypeOf((*MockLayoutService)(nil).CreateRepositoryFolder), reference)
}

// DeleteRepository mocks base method.
func (m *MockLayoutService) DeleteRepository(reference repository.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockLayoutServiceMockRecorder) DeleteRepository(reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockLayoutService)(nil).DeleteRepository), reference)
}

// ExactMatch mocks base method.
func (m *MockLayoutService) ExactMatch(path string) (*repository.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExactMatch", path)
	ret0, _ := ret[0].(*repository.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExactMatch indicates an expected call of ExactMatch.
func (mr *MockLayoutServiceMockRecorder) ExactMatch(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExactMatch", reflect.TypeOf((*MockLayoutService)(nil).ExactMatch), path)
}

// GetRoot mocks base method.
func (m *MockLayoutService) GetRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockLayoutServiceMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockLayoutService)(nil).GetRoot))
}

// Match mocks base method.
func (m *MockLayoutService) Match(path string) (*repository.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", path)
	ret0, _ := ret[0].(*repository.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockLayoutServiceMockRecorder) Match(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockLayoutService)(nil).Match), path)
}

// PathFor mocks base method.
func (m *MockLayoutService) PathFor(ref repository.Reference) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathFor", ref)
	ret0, _ := ret[0].(string)
	return ret0
}

// PathFor indicates an expected call of PathFor.
func (mr *MockLayoutServiceMockRecorder) PathFor(ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathFor", reflect.TypeOf((*MockLayoutService)(nil).PathFor), ref)
}
