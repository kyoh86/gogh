// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/default_name_service.go
//
// Generated by this command:
//
//	mockgen -source ./repository/default_name_service.go -destination ./repository_mock/gen_default_name_service_mock.go -package repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDefaultNameService is a mock of DefaultNameService interface.
type MockDefaultNameService struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultNameServiceMockRecorder
	isgomock struct{}
}

// MockDefaultNameServiceMockRecorder is the mock recorder for MockDefaultNameService.
type MockDefaultNameServiceMockRecorder struct {
	mock *MockDefaultNameService
}

// NewMockDefaultNameService creates a new mock instance.
func NewMockDefaultNameService(ctrl *gomock.Controller) *MockDefaultNameService {
	mock := &MockDefaultNameService{ctrl: ctrl}
	mock.recorder = &MockDefaultNameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultNameService) EXPECT() *MockDefaultNameServiceMockRecorder {
	return m.recorder
}

// GetDefaultHost mocks base method.
func (m *MockDefaultNameService) GetDefaultHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultHost indicates an expected call of GetDefaultHost.
func (mr *MockDefaultNameServiceMockRecorder) GetDefaultHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultHost", reflect.TypeOf((*MockDefaultNameService)(nil).GetDefaultHost))
}

// GetDefaultHostAndOwner mocks base method.
func (m *MockDefaultNameService) GetDefaultHostAndOwner() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultHostAndOwner")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetDefaultHostAndOwner indicates an expected call of GetDefaultHostAndOwner.
func (mr *MockDefaultNameServiceMockRecorder) GetDefaultHostAndOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultHostAndOwner", reflect.TypeOf((*MockDefaultNameService)(nil).GetDefaultHostAndOwner))
}

// GetDefaultOwnerFor mocks base method.
func (m *MockDefaultNameService) GetDefaultOwnerFor(host string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOwnerFor", host)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOwnerFor indicates an expected call of GetDefaultOwnerFor.
func (mr *MockDefaultNameServiceMockRecorder) GetDefaultOwnerFor(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOwnerFor", reflect.TypeOf((*MockDefaultNameService)(nil).GetDefaultOwnerFor), host)
}

// GetMap mocks base method.
func (m *MockDefaultNameService) GetMap() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMap indicates an expected call of GetMap.
func (mr *MockDefaultNameServiceMockRecorder) GetMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockDefaultNameService)(nil).GetMap))
}

// HasChanges mocks base method.
func (m *MockDefaultNameService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockDefaultNameServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockDefaultNameService)(nil).HasChanges))
}

// MarkSaved mocks base method.
func (m *MockDefaultNameService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockDefaultNameServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockDefaultNameService)(nil).MarkSaved))
}

// SetDefaultHost mocks base method.
func (m *MockDefaultNameService) SetDefaultHost(host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultHost", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultHost indicates an expected call of SetDefaultHost.
func (mr *MockDefaultNameServiceMockRecorder) SetDefaultHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultHost", reflect.TypeOf((*MockDefaultNameService)(nil).SetDefaultHost), host)
}

// SetDefaultOwnerFor mocks base method.
func (m *MockDefaultNameService) SetDefaultOwnerFor(host, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultOwnerFor", host, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultOwnerFor indicates an expected call of SetDefaultOwnerFor.
func (mr *MockDefaultNameServiceMockRecorder) SetDefaultOwnerFor(host, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultOwnerFor", reflect.TypeOf((*MockDefaultNameService)(nil).SetDefaultOwnerFor), host, owner)
}
