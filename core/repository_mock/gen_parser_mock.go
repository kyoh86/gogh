// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/parser.go
//
// Generated by this command:
//
//	mockgen -source ./repository/parser.go -destination ./repository_mock/gen_parser_mock.go -package repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	repository "github.com/kyoh86/gogh/v4/core/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockReferenceParser is a mock of ReferenceParser interface.
type MockReferenceParser struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceParserMockRecorder
	isgomock struct{}
}

// MockReferenceParserMockRecorder is the mock recorder for MockReferenceParser.
type MockReferenceParserMockRecorder struct {
	mock *MockReferenceParser
}

// NewMockReferenceParser creates a new mock instance.
func NewMockReferenceParser(ctrl *gomock.Controller) *MockReferenceParser {
	mock := &MockReferenceParser{ctrl: ctrl}
	mock.recorder = &MockReferenceParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceParser) EXPECT() *MockReferenceParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockReferenceParser) Parse(s string) (*repository.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", s)
	ret0, _ := ret[0].(*repository.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockReferenceParserMockRecorder) Parse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockReferenceParser)(nil).Parse), s)
}

// ParseWithAlias mocks base method.
func (m *MockReferenceParser) ParseWithAlias(s string) (*repository.ReferenceWithAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithAlias", s)
	ret0, _ := ret[0].(*repository.ReferenceWithAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithAlias indicates an expected call of ParseWithAlias.
func (mr *MockReferenceParserMockRecorder) ParseWithAlias(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithAlias", reflect.TypeOf((*MockReferenceParser)(nil).ParseWithAlias), s)
}
