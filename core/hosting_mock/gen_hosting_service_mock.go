// Code generated by MockGen. DO NOT EDIT.
// Source: hosting/hosting_service.go
//
// Generated by this command:
//
//	mockgen -source hosting/hosting_service.go -destination hosting_mock/gen_hosting_service_mock.go -package hosting_mock
//

// Package hosting_mock is a generated GoMock package.
package hosting_mock

import (
	context "context"
	iter "iter"
	url "net/url"
	reflect "reflect"

	auth "github.com/kyoh86/gogh/v4/core/auth"
	hosting "github.com/kyoh86/gogh/v4/core/hosting"
	repository "github.com/kyoh86/gogh/v4/core/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockHostingService is a mock of HostingService interface.
type MockHostingService struct {
	ctrl     *gomock.Controller
	recorder *MockHostingServiceMockRecorder
	isgomock struct{}
}

// MockHostingServiceMockRecorder is the mock recorder for MockHostingService.
type MockHostingServiceMockRecorder struct {
	mock *MockHostingService
}

// NewMockHostingService creates a new mock instance.
func NewMockHostingService(ctrl *gomock.Controller) *MockHostingService {
	mock := &MockHostingService{ctrl: ctrl}
	mock.recorder = &MockHostingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostingService) EXPECT() *MockHostingServiceMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockHostingService) CreateRepository(ctx context.Context, ref repository.Reference, opts hosting.CreateRepositoryOptions) (*hosting.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, ref, opts)
	ret0, _ := ret[0].(*hosting.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockHostingServiceMockRecorder) CreateRepository(ctx, ref, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockHostingService)(nil).CreateRepository), ctx, ref, opts)
}

// CreateRepositoryFromTemplate mocks base method.
func (m *MockHostingService) CreateRepositoryFromTemplate(ctx context.Context, ref, template repository.Reference, opts hosting.CreateRepositoryFromTemplateOptions) (*hosting.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryFromTemplate", ctx, ref, template, opts)
	ret0, _ := ret[0].(*hosting.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryFromTemplate indicates an expected call of CreateRepositoryFromTemplate.
func (mr *MockHostingServiceMockRecorder) CreateRepositoryFromTemplate(ctx, ref, template, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryFromTemplate", reflect.TypeOf((*MockHostingService)(nil).CreateRepositoryFromTemplate), ctx, ref, template, opts)
}

// DeleteRepository mocks base method.
func (m *MockHostingService) DeleteRepository(arg0 context.Context, arg1 repository.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockHostingServiceMockRecorder) DeleteRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockHostingService)(nil).DeleteRepository), arg0, arg1)
}

// ForkRepository mocks base method.
func (m *MockHostingService) ForkRepository(ctx context.Context, ref, target repository.Reference, opts hosting.ForkRepositoryOptions) (*hosting.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkRepository", ctx, ref, target, opts)
	ret0, _ := ret[0].(*hosting.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkRepository indicates an expected call of ForkRepository.
func (mr *MockHostingServiceMockRecorder) ForkRepository(ctx, ref, target, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkRepository", reflect.TypeOf((*MockHostingService)(nil).ForkRepository), ctx, ref, target, opts)
}

// GetRepository mocks base method.
func (m *MockHostingService) GetRepository(arg0 context.Context, arg1 repository.Reference) (*hosting.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*hosting.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockHostingServiceMockRecorder) GetRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockHostingService)(nil).GetRepository), arg0, arg1)
}

// GetTokenFor mocks base method.
func (m *MockHostingService) GetTokenFor(ctx context.Context, host, owner string) (string, auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFor", ctx, host, owner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(auth.Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenFor indicates an expected call of GetTokenFor.
func (mr *MockHostingServiceMockRecorder) GetTokenFor(ctx, host, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFor", reflect.TypeOf((*MockHostingService)(nil).GetTokenFor), ctx, host, owner)
}

// GetURLOf mocks base method.
func (m *MockHostingService) GetURLOf(ref repository.Reference) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLOf", ref)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLOf indicates an expected call of GetURLOf.
func (mr *MockHostingServiceMockRecorder) GetURLOf(ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLOf", reflect.TypeOf((*MockHostingService)(nil).GetURLOf), ref)
}

// ListRepository mocks base method.
func (m *MockHostingService) ListRepository(arg0 context.Context, arg1 hosting.ListRepositoryOptions) iter.Seq2[*hosting.Repository, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepository", arg0, arg1)
	ret0, _ := ret[0].(iter.Seq2[*hosting.Repository, error])
	return ret0
}

// ListRepository indicates an expected call of ListRepository.
func (mr *MockHostingServiceMockRecorder) ListRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepository", reflect.TypeOf((*MockHostingService)(nil).ListRepository), arg0, arg1)
}

// ParseURL mocks base method.
func (m *MockHostingService) ParseURL(u *url.URL) (*repository.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURL", u)
	ret0, _ := ret[0].(*repository.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURL indicates an expected call of ParseURL.
func (mr *MockHostingServiceMockRecorder) ParseURL(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURL", reflect.TypeOf((*MockHostingService)(nil).ParseURL), u)
}
