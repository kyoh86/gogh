// Code generated by MockGen. DO NOT EDIT.
// Source: ./hosting/repository_format.go
//
// Generated by this command:
//
//	mockgen -source ./hosting/repository_format.go -destination ./hosting_mock/gen_repository_format_mock.go -package hosting_mock
//

// Package hosting_mock is a generated GoMock package.
package hosting_mock

import (
	reflect "reflect"

	hosting "github.com/kyoh86/gogh/v4/core/hosting"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryFormat is a mock of RepositoryFormat interface.
type MockRepositoryFormat struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryFormatMockRecorder
	isgomock struct{}
}

// MockRepositoryFormatMockRecorder is the mock recorder for MockRepositoryFormat.
type MockRepositoryFormatMockRecorder struct {
	mock *MockRepositoryFormat
}

// NewMockRepositoryFormat creates a new mock instance.
func NewMockRepositoryFormat(ctrl *gomock.Controller) *MockRepositoryFormat {
	mock := &MockRepositoryFormat{ctrl: ctrl}
	mock.recorder = &MockRepositoryFormatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryFormat) EXPECT() *MockRepositoryFormatMockRecorder {
	return m.recorder
}

// Format mocks base method.
func (m *MockRepositoryFormat) Format(r hosting.Repository) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Format indicates an expected call of Format.
func (mr *MockRepositoryFormatMockRecorder) Format(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockRepositoryFormat)(nil).Format), r)
}
