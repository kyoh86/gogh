// Code generated by MockGen. DO NOT EDIT.
// Source: auth/token_service.go
//
// Generated by this command:
//
//	mockgen -source auth/token_service.go -destination auth_mock/gen_token_service_mock.go -package auth_mock
//

// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	reflect "reflect"

	auth "github.com/kyoh86/gogh/v4/core/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
	isgomock struct{}
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenService) Delete(host, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", host, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenServiceMockRecorder) Delete(host, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenService)(nil).Delete), host, owner)
}

// Entries mocks base method.
func (m *MockTokenService) Entries() []auth.TokenEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].([]auth.TokenEntry)
	return ret0
}

// Entries indicates an expected call of Entries.
func (mr *MockTokenServiceMockRecorder) Entries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockTokenService)(nil).Entries))
}

// Get mocks base method.
func (m *MockTokenService) Get(host, owner string) (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", host, owner)
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenServiceMockRecorder) Get(host, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenService)(nil).Get), host, owner)
}

// Has mocks base method.
func (m *MockTokenService) Has(host, owner string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", host, owner)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockTokenServiceMockRecorder) Has(host, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTokenService)(nil).Has), host, owner)
}

// HasChanges mocks base method.
func (m *MockTokenService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockTokenServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockTokenService)(nil).HasChanges))
}

// MarkSaved mocks base method.
func (m *MockTokenService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockTokenServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockTokenService)(nil).MarkSaved))
}

// Set mocks base method.
func (m *MockTokenService) Set(host, owner string, token auth.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", host, owner, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTokenServiceMockRecorder) Set(host, owner, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTokenService)(nil).Set), host, owner, token)
}
