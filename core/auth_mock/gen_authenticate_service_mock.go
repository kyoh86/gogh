// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth/authenticate_service.go
//
// Generated by this command:
//
//	mockgen -source ./auth/authenticate_service.go -destination ./auth_mock/gen_authenticate_service_mock.go -package auth_mock
//

// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/kyoh86/gogh/v4/core/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticateService is a mock of AuthenticateService interface.
type MockAuthenticateService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticateServiceMockRecorder
	isgomock struct{}
}

// MockAuthenticateServiceMockRecorder is the mock recorder for MockAuthenticateService.
type MockAuthenticateServiceMockRecorder struct {
	mock *MockAuthenticateService
}

// NewMockAuthenticateService creates a new mock instance.
func NewMockAuthenticateService(ctrl *gomock.Controller) *MockAuthenticateService {
	mock := &MockAuthenticateService{ctrl: ctrl}
	mock.recorder = &MockAuthenticateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticateService) EXPECT() *MockAuthenticateServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticateService) Authenticate(ctx context.Context, host string, verify auth.Verify) (string, *auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, host, verify)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*auth.Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticateServiceMockRecorder) Authenticate(ctx, host, verify any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticateService)(nil).Authenticate), ctx, host, verify)
}
