// Code generated by MockGen. DO NOT EDIT.
// Source: ./overlay/service.go
//
// Generated by this command:
//
//	mockgen -source ./overlay/service.go -destination ./overlay_mock/gen_service_mock.go -package overlay_mock
//

// Package overlay_mock is a generated GoMock package.
package overlay_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	overlay "github.com/kyoh86/gogh/v4/core/overlay"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlayService is a mock of OverlayService interface.
type MockOverlayService struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayServiceMockRecorder
	isgomock struct{}
}

// MockOverlayServiceMockRecorder is the mock recorder for MockOverlayService.
type MockOverlayServiceMockRecorder struct {
	mock *MockOverlayService
}

// NewMockOverlayService creates a new mock instance.
func NewMockOverlayService(ctrl *gomock.Controller) *MockOverlayService {
	mock := &MockOverlayService{ctrl: ctrl}
	mock.recorder = &MockOverlayServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayService) EXPECT() *MockOverlayServiceMockRecorder {
	return m.recorder
}

// AddOverlay mocks base method.
func (m *MockOverlayService) AddOverlay(ctx context.Context, ov overlay.Overlay, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOverlay", ctx, ov, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOverlay indicates an expected call of AddOverlay.
func (mr *MockOverlayServiceMockRecorder) AddOverlay(ctx, ov, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOverlay", reflect.TypeOf((*MockOverlayService)(nil).AddOverlay), ctx, ov, content)
}

// HasChanges mocks base method.
func (m *MockOverlayService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockOverlayServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockOverlayService)(nil).HasChanges))
}

// ListOverlays mocks base method.
func (m *MockOverlayService) ListOverlays() iter.Seq2[*overlay.Overlay, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOverlays")
	ret0, _ := ret[0].(iter.Seq2[*overlay.Overlay, error])
	return ret0
}

// ListOverlays indicates an expected call of ListOverlays.
func (mr *MockOverlayServiceMockRecorder) ListOverlays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOverlays", reflect.TypeOf((*MockOverlayService)(nil).ListOverlays))
}

// MarkSaved mocks base method.
func (m *MockOverlayService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockOverlayServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockOverlayService)(nil).MarkSaved))
}

// OpenOverlayContent mocks base method.
func (m *MockOverlayService) OpenOverlayContent(ctx context.Context, ov overlay.Overlay) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenOverlayContent", ctx, ov)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenOverlayContent indicates an expected call of OpenOverlayContent.
func (mr *MockOverlayServiceMockRecorder) OpenOverlayContent(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenOverlayContent", reflect.TypeOf((*MockOverlayService)(nil).OpenOverlayContent), ctx, ov)
}

// RemoveOverlay mocks base method.
func (m *MockOverlayService) RemoveOverlay(ctx context.Context, ov overlay.Overlay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOverlay", ctx, ov)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOverlay indicates an expected call of RemoveOverlay.
func (mr *MockOverlayServiceMockRecorder) RemoveOverlay(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOverlay", reflect.TypeOf((*MockOverlayService)(nil).RemoveOverlay), ctx, ov)
}

// SetOverlays mocks base method.
func (m *MockOverlayService) SetOverlays(arg0 iter.Seq2[*overlay.Overlay, error]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOverlays", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOverlays indicates an expected call of SetOverlays.
func (mr *MockOverlayServiceMockRecorder) SetOverlays(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOverlays", reflect.TypeOf((*MockOverlayService)(nil).SetOverlays), arg0)
}
