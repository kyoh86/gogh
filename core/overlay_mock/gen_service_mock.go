// Code generated by MockGen. DO NOT EDIT.
// Source: overlay/service.go
//
// Generated by this command:
//
//	mockgen -source overlay/service.go -destination overlay_mock/gen_service_mock.go -package overlay_mock
//

// Package overlay_mock is a generated GoMock package.
package overlay_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	overlay "github.com/kyoh86/gogh/v4/core/overlay"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlayService is a mock of OverlayService interface.
type MockOverlayService struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayServiceMockRecorder
	isgomock struct{}
}

// MockOverlayServiceMockRecorder is the mock recorder for MockOverlayService.
type MockOverlayServiceMockRecorder struct {
	mock *MockOverlayService
}

// NewMockOverlayService creates a new mock instance.
func NewMockOverlayService(ctrl *gomock.Controller) *MockOverlayService {
	mock := &MockOverlayService{ctrl: ctrl}
	mock.recorder = &MockOverlayServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayService) EXPECT() *MockOverlayServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOverlayService) Add(ctx context.Context, ov overlay.Overlay, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, ov, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOverlayServiceMockRecorder) Add(ctx, ov, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOverlayService)(nil).Add), ctx, ov, content)
}

// HasChanges mocks base method.
func (m *MockOverlayService) HasChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChanges indicates an expected call of HasChanges.
func (mr *MockOverlayServiceMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockOverlayService)(nil).HasChanges))
}

// List mocks base method.
func (m *MockOverlayService) List() iter.Seq2[*overlay.Overlay, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(iter.Seq2[*overlay.Overlay, error])
	return ret0
}

// List indicates an expected call of List.
func (mr *MockOverlayServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOverlayService)(nil).List))
}

// MarkSaved mocks base method.
func (m *MockOverlayService) MarkSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSaved")
}

// MarkSaved indicates an expected call of MarkSaved.
func (mr *MockOverlayServiceMockRecorder) MarkSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSaved", reflect.TypeOf((*MockOverlayService)(nil).MarkSaved))
}

// Open mocks base method.
func (m *MockOverlayService) Open(ctx context.Context, ov overlay.Overlay) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, ov)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOverlayServiceMockRecorder) Open(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOverlayService)(nil).Open), ctx, ov)
}

// Remove mocks base method.
func (m *MockOverlayService) Remove(ctx context.Context, ov overlay.Overlay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, ov)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockOverlayServiceMockRecorder) Remove(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOverlayService)(nil).Remove), ctx, ov)
}

// Set mocks base method.
func (m *MockOverlayService) Set(arg0 []overlay.Overlay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOverlayServiceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOverlayService)(nil).Set), arg0)
}
