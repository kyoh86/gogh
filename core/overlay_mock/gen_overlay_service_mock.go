// Code generated by MockGen. DO NOT EDIT.
// Source: ./overlay/overlay_service.go
//
// Generated by this command:
//
//	mockgen -source ./overlay/overlay_service.go -destination ./overlay_mock/gen_overlay_service_mock.go -package overlay_mock
//

// Package overlay_mock is a generated GoMock package.
package overlay_mock

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	overlay "github.com/kyoh86/gogh/v4/core/overlay"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlayStore is a mock of OverlayStore interface.
type MockOverlayStore struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayStoreMockRecorder
	isgomock struct{}
}

// MockOverlayStoreMockRecorder is the mock recorder for MockOverlayStore.
type MockOverlayStoreMockRecorder struct {
	mock *MockOverlayStore
}

// NewMockOverlayStore creates a new mock instance.
func NewMockOverlayStore(ctrl *gomock.Controller) *MockOverlayStore {
	mock := &MockOverlayStore{ctrl: ctrl}
	mock.recorder = &MockOverlayStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayStore) EXPECT() *MockOverlayStoreMockRecorder {
	return m.recorder
}

// AddOverlay mocks base method.
func (m *MockOverlayStore) AddOverlay(ctx context.Context, ov overlay.Overlay, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOverlay", ctx, ov, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOverlay indicates an expected call of AddOverlay.
func (mr *MockOverlayStoreMockRecorder) AddOverlay(ctx, ov, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOverlay", reflect.TypeOf((*MockOverlayStore)(nil).AddOverlay), ctx, ov, content)
}

// ListOverlays mocks base method.
func (m *MockOverlayStore) ListOverlays(ctx context.Context) iter.Seq2[*overlay.Overlay, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOverlays", ctx)
	ret0, _ := ret[0].(iter.Seq2[*overlay.Overlay, error])
	return ret0
}

// ListOverlays indicates an expected call of ListOverlays.
func (mr *MockOverlayStoreMockRecorder) ListOverlays(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOverlays", reflect.TypeOf((*MockOverlayStore)(nil).ListOverlays), ctx)
}

// OpenOverlay mocks base method.
func (m *MockOverlayStore) OpenOverlay(ctx context.Context, ov overlay.Overlay) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenOverlay", ctx, ov)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenOverlay indicates an expected call of OpenOverlay.
func (mr *MockOverlayStoreMockRecorder) OpenOverlay(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenOverlay", reflect.TypeOf((*MockOverlayStore)(nil).OpenOverlay), ctx, ov)
}

// RemoveOverlay mocks base method.
func (m *MockOverlayStore) RemoveOverlay(ctx context.Context, ov overlay.Overlay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOverlay", ctx, ov)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOverlay indicates an expected call of RemoveOverlay.
func (mr *MockOverlayStoreMockRecorder) RemoveOverlay(ctx, ov any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOverlay", reflect.TypeOf((*MockOverlayStore)(nil).RemoveOverlay), ctx, ov)
}
