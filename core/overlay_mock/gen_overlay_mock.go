// Code generated by MockGen. DO NOT EDIT.
// Source: overlay/overlay.go
//
// Generated by this command:
//
//	mockgen -source overlay/overlay.go -destination overlay_mock/gen_overlay_mock.go -package overlay_mock
//

// Package overlay_mock is a generated GoMock package.
package overlay_mock

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOverlay is a mock of Overlay interface.
type MockOverlay struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayMockRecorder
	isgomock struct{}
}

// MockOverlayMockRecorder is the mock recorder for MockOverlay.
type MockOverlayMockRecorder struct {
	mock *MockOverlay
}

// NewMockOverlay creates a new mock instance.
func NewMockOverlay(ctrl *gomock.Controller) *MockOverlay {
	mock := &MockOverlay{ctrl: ctrl}
	mock.recorder = &MockOverlayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlay) EXPECT() *MockOverlayMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockOverlay) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockOverlayMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockOverlay)(nil).ID))
}

// Name mocks base method.
func (m *MockOverlay) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOverlayMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOverlay)(nil).Name))
}

// RelativePath mocks base method.
func (m *MockOverlay) RelativePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelativePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// RelativePath indicates an expected call of RelativePath.
func (mr *MockOverlayMockRecorder) RelativePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelativePath", reflect.TypeOf((*MockOverlay)(nil).RelativePath))
}

// UUID mocks base method.
func (m *MockOverlay) UUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockOverlayMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockOverlay)(nil).UUID))
}
