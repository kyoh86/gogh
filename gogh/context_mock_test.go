// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package gogh_test is a generated GoMock package.
package gogh_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Root mocks base method
func (m *MockContext) Root() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Root indicates an expected call of Root
func (mr *MockContextMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockContext)(nil).Root))
}

// PrimaryRoot mocks base method
func (m *MockContext) PrimaryRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// PrimaryRoot indicates an expected call of PrimaryRoot
func (mr *MockContextMockRecorder) PrimaryRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryRoot", reflect.TypeOf((*MockContext)(nil).PrimaryRoot))
}

// GitHubUser mocks base method
func (m *MockContext) GitHubUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitHubUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GitHubUser indicates an expected call of GitHubUser
func (mr *MockContextMockRecorder) GitHubUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitHubUser", reflect.TypeOf((*MockContext)(nil).GitHubUser))
}

// GitHubToken mocks base method
func (m *MockContext) GitHubToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitHubToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GitHubToken indicates an expected call of GitHubToken
func (mr *MockContextMockRecorder) GitHubToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitHubToken", reflect.TypeOf((*MockContext)(nil).GitHubToken))
}

// GitHubHost mocks base method
func (m *MockContext) GitHubHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitHubHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GitHubHost indicates an expected call of GitHubHost
func (mr *MockContextMockRecorder) GitHubHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitHubHost", reflect.TypeOf((*MockContext)(nil).GitHubHost))
}

// Deadline mocks base method
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
}

// Done mocks base method
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
}

// Err mocks base method
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
}

// Value mocks base method
func (m *MockContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), key)
}
