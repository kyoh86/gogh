// Code generated by MockGen. DO NOT EDIT.
// Source: env.go

// Package gogh_test is a generated GoMock package.
package gogh_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEnv is a mock of Env interface
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// GithubHost mocks base method
func (m *MockEnv) GithubHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GithubHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GithubHost indicates an expected call of GithubHost
func (mr *MockEnvMockRecorder) GithubHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GithubHost", reflect.TypeOf((*MockEnv)(nil).GithubHost))
}

// GithubToken mocks base method
func (m *MockEnv) GithubToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GithubToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GithubToken indicates an expected call of GithubToken
func (mr *MockEnvMockRecorder) GithubToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GithubToken", reflect.TypeOf((*MockEnv)(nil).GithubToken))
}

// Roots mocks base method
func (m *MockEnv) Roots() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roots")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Roots indicates an expected call of Roots
func (mr *MockEnvMockRecorder) Roots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roots", reflect.TypeOf((*MockEnv)(nil).Roots))
}
