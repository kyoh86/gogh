// Code generated by main.go DO NOT EDIT.

package config

import (
	envdecode "github.com/joeshaw/envdecode"
	keyring "github.com/zalando/go-keyring"
	yaml "gopkg.in/yaml.v3"
	"io"
	"log"
)

type ConfigFile struct {
	GithubHost GithubHost `yaml:"githubHost"`
	Roots      Roots      `yaml:"roots"`
}

func SaveConfigFile(w io.Writer, config *ConfigFile) error {
	return yaml.NewEncoder(w).Encode(config)
}

func LoadConfigFile(r io.Reader) (config ConfigFile, err error) {
	err = yaml.NewDecoder(r).Decode(&config)
	return
}

type CacheFile struct {
	GithubUser GithubUser `yaml:"githubUser"`
}

func SaveCacheFile(w io.Writer, cache *CacheFile) error {
	return yaml.NewEncoder(w).Encode(cache)
}

func LoadCacheFile(r io.Reader) (cache CacheFile, err error) {
	err = yaml.NewDecoder(r).Decode(&cache)
	return
}

type Envar struct {
	GithubToken GithubToken `env:"GOGH_GITHUB_TOKEN"`
	GithubHost  GithubHost  `env:"GOGH_GITHUB_HOST"`
	Roots       Roots       `env:"GOGH_ROOTS"`
}

func LoadEnvar() (envar Envar, err error) {
	err = envdecode.Decode(&envar)
	if err == envdecode.ErrNoTargetFieldsAreSet {
		err = nil
	}
	return
}

type Keyring struct {
	GithubToken GithubToken
}

func LoadKeyring() (key Keyring, err error) {
	{
		v, err := keyring.Get("github.com/kyoh86/gogh/config2", "github-token")
		if err == nil {
			var value GithubToken
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return key, err
			}
			key.GithubToken = value
		} else {
			log.Printf("info: there's no secret in github-token@github.com/kyoh86/gogh/config2 (%v)", err)
		}
	}
	return
}

func SaveKeyring(key Keyring) (err error) {
	{
		buf, err := key.GithubToken.MarshalText()
		if err != nil {
			return err
		}
		if err := keyring.Set("github.com/kyoh86/gogh/config2", "github-token", string(buf)); err != nil {
			return err
		}
	}
	return nil
}
