// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package githubv4

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// LanguageFragment includes the GraphQL fields of Language requested by the fragment LanguageFragment.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type LanguageFragment struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns LanguageFragment.Name, and is useful for accessing the field via an interface.
func (v *LanguageFragment) GetName() string { return v.Name }

// ListReposResponse is returned by ListRepos on success.
type ListReposResponse struct {
	// The currently authenticated user.
	Viewer ListReposViewerUser `json:"viewer"`
}

// GetViewer returns ListReposResponse.Viewer, and is useful for accessing the field via an interface.
func (v *ListReposResponse) GetViewer() ListReposViewerUser { return v.Viewer }

// ListReposViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type ListReposViewerUser struct {
	// A list of repositories that the user owns.
	Repositories ListReposViewerUserRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns ListReposViewerUser.Repositories, and is useful for accessing the field via an interface.
func (v *ListReposViewerUser) GetRepositories() ListReposViewerUserRepositoriesRepositoryConnection {
	return v.Repositories
}

// ListReposViewerUserRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type ListReposViewerUserRepositoriesRepositoryConnection struct {
	// A list of edges.
	Edges []ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// Information to aid in pagination.
	PageInfo ListReposViewerUserRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
}

// GetEdges returns ListReposViewerUserRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnection) GetEdges() []ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// GetTotalCount returns ListReposViewerUserRepositoriesRepositoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns ListReposViewerUserRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnection) GetPageInfo() ListReposViewerUserRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// The item at the end of the edge.
	Node ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	RepositoryFragment `json:"-"`
}

// GetUrl returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Url, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetUrl() string {
	return v.RepositoryFragment.Url
}

// GetHomepageUrl returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.HomepageUrl, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetHomepageUrl() string {
	return v.RepositoryFragment.HomepageUrl
}

// GetSshUrl returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.SshUrl, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetSshUrl() string {
	return v.RepositoryFragment.SshUrl
}

// GetPrimaryLanguage returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetPrimaryLanguage() RepositoryFragmentPrimaryLanguage {
	return v.RepositoryFragment.PrimaryLanguage
}

// GetName returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.RepositoryFragment.Name
}

// GetOwner returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Owner, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetOwner() RepositoryFragmentOwnerRepositoryOwner {
	return v.RepositoryFragment.Owner
}

// GetDescription returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Description, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetDescription() string {
	return v.RepositoryFragment.Description
}

// GetCreatedAt returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.CreatedAt, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetCreatedAt() time.Time {
	return v.RepositoryFragment.CreatedAt
}

// GetIsArchived returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.IsArchived, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetIsArchived() bool {
	return v.RepositoryFragment.IsArchived
}

// GetIsFork returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.IsFork, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetIsFork() bool {
	return v.RepositoryFragment.IsFork
}

// GetIsPrivate returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.IsPrivate, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetIsPrivate() bool {
	return v.RepositoryFragment.IsPrivate
}

// GetIsTemplate returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.IsTemplate, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetIsTemplate() bool {
	return v.RepositoryFragment.IsTemplate
}

// GetUpdatedAt returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetUpdatedAt() time.Time {
	return v.RepositoryFragment.UpdatedAt
}

// GetParent returns ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Parent, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetParent() RepositoryFragmentParentRepository {
	return v.RepositoryFragment.Parent
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	Url string `json:"url"`

	HomepageUrl string `json:"homepageUrl"`

	SshUrl string `json:"sshUrl"`

	PrimaryLanguage RepositoryFragmentPrimaryLanguage `json:"primaryLanguage"`

	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	IsArchived bool `json:"isArchived"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	IsTemplate bool `json:"isTemplate"`

	UpdatedAt time.Time `json:"updatedAt"`

	Parent RepositoryFragmentParentRepository `json:"parent"`
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) __premarshalJSON() (*__premarshalListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository, error) {
	var retval __premarshalListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository

	retval.Url = v.RepositoryFragment.Url
	retval.HomepageUrl = v.RepositoryFragment.HomepageUrl
	retval.SshUrl = v.RepositoryFragment.SshUrl
	retval.PrimaryLanguage = v.RepositoryFragment.PrimaryLanguage
	retval.Name = v.RepositoryFragment.Name
	{

		dst := &retval.Owner
		src := v.RepositoryFragment.Owner
		var err error
		*dst, err = __marshalRepositoryFragmentOwnerRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListReposViewerUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.RepositoryFragment.Owner: %w", err)
		}
	}
	retval.Description = v.RepositoryFragment.Description
	retval.CreatedAt = v.RepositoryFragment.CreatedAt
	retval.IsArchived = v.RepositoryFragment.IsArchived
	retval.IsFork = v.RepositoryFragment.IsFork
	retval.IsPrivate = v.RepositoryFragment.IsPrivate
	retval.IsTemplate = v.RepositoryFragment.IsTemplate
	retval.UpdatedAt = v.RepositoryFragment.UpdatedAt
	retval.Parent = v.RepositoryFragment.Parent
	return &retval, nil
}

// ListReposViewerUserRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type ListReposViewerUserRepositoriesRepositoryConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetEndCursor returns ListReposViewerUserRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.PageInfoFragment.EndCursor
}

// GetHasNextPage returns ListReposViewerUserRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ListReposViewerUserRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListReposViewerUserRepositoriesRepositoryConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.ListReposViewerUserRepositoriesRepositoryConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListReposViewerUserRepositoriesRepositoryConnectionPageInfo struct {
	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListReposViewerUserRepositoriesRepositoryConnectionPageInfo) __premarshalJSON() (*__premarshalListReposViewerUserRepositoriesRepositoryConnectionPageInfo, error) {
	var retval __premarshalListReposViewerUserRepositoriesRepositoryConnectionPageInfo

	retval.EndCursor = v.PageInfoFragment.EndCursor
	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	return &retval, nil
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

// OwnerFragment includes the GraphQL fields of RepositoryOwner requested by the fragment OwnerFragment.
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
//
// OwnerFragment is implemented by the following types:
// OwnerFragmentOrganization
// OwnerFragmentUser
type OwnerFragment interface {
	implementsGraphQLInterfaceOwnerFragment()
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username used to login.
	GetLogin() string
}

func (v *OwnerFragmentOrganization) implementsGraphQLInterfaceOwnerFragment() {}
func (v *OwnerFragmentUser) implementsGraphQLInterfaceOwnerFragment()         {}

func __unmarshalOwnerFragment(b []byte, v *OwnerFragment) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(OwnerFragmentOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(OwnerFragmentUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for OwnerFragment: "%v"`, tn.TypeName)
	}
}

func __marshalOwnerFragment(v *OwnerFragment) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *OwnerFragmentOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnerFragmentOrganization
		}{typename, v}
		return json.Marshal(result)
	case *OwnerFragmentUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnerFragmentUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for OwnerFragment: "%T"`, v)
	}
}

// OwnerFragment includes the GraphQL fields of Organization requested by the fragment OwnerFragment.
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type OwnerFragmentOrganization struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns OwnerFragmentOrganization.Login, and is useful for accessing the field via an interface.
func (v *OwnerFragmentOrganization) GetLogin() string { return v.Login }

// OwnerFragment includes the GraphQL fields of User requested by the fragment OwnerFragment.
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type OwnerFragmentUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns OwnerFragmentUser.Login, and is useful for accessing the field via an interface.
func (v *OwnerFragmentUser) GetLogin() string { return v.Login }

// PageInfoFragment includes the GraphQL fields of PageInfo requested by the fragment PageInfoFragment.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type PageInfoFragment struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns PageInfoFragment.EndCursor, and is useful for accessing the field via an interface.
func (v *PageInfoFragment) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns PageInfoFragment.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfoFragment) GetHasNextPage() bool { return v.HasNextPage }

// ParentRepositoryFragment includes the GraphQL fields of Repository requested by the fragment ParentRepositoryFragment.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type ParentRepositoryFragment struct {
	// The name of the repository.
	Name string `json:"name"`
	// The User owner of the repository.
	Owner ParentRepositoryFragmentOwnerRepositoryOwner `json:"-"`
	// The SSH URL to clone this repository
	SshUrl string `json:"sshUrl"`
}

// GetName returns ParentRepositoryFragment.Name, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragment) GetName() string { return v.Name }

// GetOwner returns ParentRepositoryFragment.Owner, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragment) GetOwner() ParentRepositoryFragmentOwnerRepositoryOwner {
	return v.Owner
}

// GetSshUrl returns ParentRepositoryFragment.SshUrl, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragment) GetSshUrl() string { return v.SshUrl }

func (v *ParentRepositoryFragment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ParentRepositoryFragment
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ParentRepositoryFragment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalParentRepositoryFragmentOwnerRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ParentRepositoryFragment.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalParentRepositoryFragment struct {
	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`

	SshUrl string `json:"sshUrl"`
}

func (v *ParentRepositoryFragment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ParentRepositoryFragment) __premarshalJSON() (*__premarshalParentRepositoryFragment, error) {
	var retval __premarshalParentRepositoryFragment

	retval.Name = v.Name
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalParentRepositoryFragmentOwnerRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ParentRepositoryFragment.Owner: %w", err)
		}
	}
	retval.SshUrl = v.SshUrl
	return &retval, nil
}

// ParentRepositoryFragmentOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type ParentRepositoryFragmentOwnerOrganization struct {
	Typename                  string `json:"__typename"`
	OwnerFragmentOrganization `json:"-"`
}

// GetTypename returns ParentRepositoryFragmentOwnerOrganization.Typename, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragmentOwnerOrganization) GetTypename() string { return v.Typename }

// GetLogin returns ParentRepositoryFragmentOwnerOrganization.Login, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragmentOwnerOrganization) GetLogin() string {
	return v.OwnerFragmentOrganization.Login
}

func (v *ParentRepositoryFragmentOwnerOrganization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ParentRepositoryFragmentOwnerOrganization
		graphql.NoUnmarshalJSON
	}
	firstPass.ParentRepositoryFragmentOwnerOrganization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OwnerFragmentOrganization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalParentRepositoryFragmentOwnerOrganization struct {
	Typename string `json:"__typename"`

	Login string `json:"login"`
}

func (v *ParentRepositoryFragmentOwnerOrganization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ParentRepositoryFragmentOwnerOrganization) __premarshalJSON() (*__premarshalParentRepositoryFragmentOwnerOrganization, error) {
	var retval __premarshalParentRepositoryFragmentOwnerOrganization

	retval.Typename = v.Typename
	retval.Login = v.OwnerFragmentOrganization.Login
	return &retval, nil
}

// ParentRepositoryFragmentOwnerRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// ParentRepositoryFragmentOwnerRepositoryOwner is implemented by the following types:
// ParentRepositoryFragmentOwnerOrganization
// ParentRepositoryFragmentOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type ParentRepositoryFragmentOwnerRepositoryOwner interface {
	implementsGraphQLInterfaceParentRepositoryFragmentOwnerRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	OwnerFragment
}

func (v *ParentRepositoryFragmentOwnerOrganization) implementsGraphQLInterfaceParentRepositoryFragmentOwnerRepositoryOwner() {
}
func (v *ParentRepositoryFragmentOwnerUser) implementsGraphQLInterfaceParentRepositoryFragmentOwnerRepositoryOwner() {
}

func __unmarshalParentRepositoryFragmentOwnerRepositoryOwner(b []byte, v *ParentRepositoryFragmentOwnerRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(ParentRepositoryFragmentOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(ParentRepositoryFragmentOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ParentRepositoryFragmentOwnerRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalParentRepositoryFragmentOwnerRepositoryOwner(v *ParentRepositoryFragmentOwnerRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ParentRepositoryFragmentOwnerOrganization:
		typename = "Organization"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalParentRepositoryFragmentOwnerOrganization
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ParentRepositoryFragmentOwnerUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalParentRepositoryFragmentOwnerUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ParentRepositoryFragmentOwnerRepositoryOwner: "%T"`, v)
	}
}

// ParentRepositoryFragmentOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type ParentRepositoryFragmentOwnerUser struct {
	Typename          string `json:"__typename"`
	OwnerFragmentUser `json:"-"`
}

// GetTypename returns ParentRepositoryFragmentOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragmentOwnerUser) GetTypename() string { return v.Typename }

// GetLogin returns ParentRepositoryFragmentOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *ParentRepositoryFragmentOwnerUser) GetLogin() string { return v.OwnerFragmentUser.Login }

func (v *ParentRepositoryFragmentOwnerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ParentRepositoryFragmentOwnerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.ParentRepositoryFragmentOwnerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OwnerFragmentUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalParentRepositoryFragmentOwnerUser struct {
	Typename string `json:"__typename"`

	Login string `json:"login"`
}

func (v *ParentRepositoryFragmentOwnerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ParentRepositoryFragmentOwnerUser) __premarshalJSON() (*__premarshalParentRepositoryFragmentOwnerUser, error) {
	var retval __premarshalParentRepositoryFragmentOwnerUser

	retval.Typename = v.Typename
	retval.Login = v.OwnerFragmentUser.Login
	return &retval, nil
}

// The affiliation of a user to a repository
type RepositoryAffiliation string

const (
	// Repositories that the user has been added to as a collaborator.
	RepositoryAffiliationCollaborator RepositoryAffiliation = "COLLABORATOR"
	// Repositories that the user has access to through being a member of an
	// organization. This includes every repository on every team that the user is on.
	RepositoryAffiliationOrganizationMember RepositoryAffiliation = "ORGANIZATION_MEMBER"
	// Repositories that are owned by the authenticated user.
	RepositoryAffiliationOwner RepositoryAffiliation = "OWNER"
)

var AllRepositoryAffiliation = []RepositoryAffiliation{
	RepositoryAffiliationCollaborator,
	RepositoryAffiliationOrganizationMember,
	RepositoryAffiliationOwner,
}

// RepositoryFragment includes the GraphQL fields of Repository requested by the fragment RepositoryFragment.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type RepositoryFragment struct {
	// The HTTP URL for this repository
	Url string `json:"url"`
	// The repository's URL.
	HomepageUrl string `json:"homepageUrl"`
	// The SSH URL to clone this repository
	SshUrl string `json:"sshUrl"`
	// The primary language of the repository's code.
	PrimaryLanguage RepositoryFragmentPrimaryLanguage `json:"primaryLanguage"`
	// The name of the repository.
	Name string `json:"name"`
	// The User owner of the repository.
	Owner RepositoryFragmentOwnerRepositoryOwner `json:"-"`
	// The description of the repository.
	Description string `json:"description"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// Indicates if the repository is unmaintained.
	IsArchived bool `json:"isArchived"`
	// Identifies if the repository is a fork.
	IsFork bool `json:"isFork"`
	// Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate"`
	// Identifies if the repository is a template that can be used to generate new repositories.
	IsTemplate bool `json:"isTemplate"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The repository parent, if this is a fork.
	Parent RepositoryFragmentParentRepository `json:"parent"`
}

// GetUrl returns RepositoryFragment.Url, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetUrl() string { return v.Url }

// GetHomepageUrl returns RepositoryFragment.HomepageUrl, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetHomepageUrl() string { return v.HomepageUrl }

// GetSshUrl returns RepositoryFragment.SshUrl, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetSshUrl() string { return v.SshUrl }

// GetPrimaryLanguage returns RepositoryFragment.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetPrimaryLanguage() RepositoryFragmentPrimaryLanguage {
	return v.PrimaryLanguage
}

// GetName returns RepositoryFragment.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetName() string { return v.Name }

// GetOwner returns RepositoryFragment.Owner, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetOwner() RepositoryFragmentOwnerRepositoryOwner { return v.Owner }

// GetDescription returns RepositoryFragment.Description, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetDescription() string { return v.Description }

// GetCreatedAt returns RepositoryFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetIsArchived returns RepositoryFragment.IsArchived, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetIsArchived() bool { return v.IsArchived }

// GetIsFork returns RepositoryFragment.IsFork, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetIsFork() bool { return v.IsFork }

// GetIsPrivate returns RepositoryFragment.IsPrivate, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetIsPrivate() bool { return v.IsPrivate }

// GetIsTemplate returns RepositoryFragment.IsTemplate, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetIsTemplate() bool { return v.IsTemplate }

// GetUpdatedAt returns RepositoryFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetParent returns RepositoryFragment.Parent, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetParent() RepositoryFragmentParentRepository { return v.Parent }

func (v *RepositoryFragment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepositoryFragment
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RepositoryFragment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRepositoryFragmentOwnerRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RepositoryFragment.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRepositoryFragment struct {
	Url string `json:"url"`

	HomepageUrl string `json:"homepageUrl"`

	SshUrl string `json:"sshUrl"`

	PrimaryLanguage RepositoryFragmentPrimaryLanguage `json:"primaryLanguage"`

	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	IsArchived bool `json:"isArchived"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	IsTemplate bool `json:"isTemplate"`

	UpdatedAt time.Time `json:"updatedAt"`

	Parent RepositoryFragmentParentRepository `json:"parent"`
}

func (v *RepositoryFragment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepositoryFragment) __premarshalJSON() (*__premarshalRepositoryFragment, error) {
	var retval __premarshalRepositoryFragment

	retval.Url = v.Url
	retval.HomepageUrl = v.HomepageUrl
	retval.SshUrl = v.SshUrl
	retval.PrimaryLanguage = v.PrimaryLanguage
	retval.Name = v.Name
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalRepositoryFragmentOwnerRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RepositoryFragment.Owner: %w", err)
		}
	}
	retval.Description = v.Description
	retval.CreatedAt = v.CreatedAt
	retval.IsArchived = v.IsArchived
	retval.IsFork = v.IsFork
	retval.IsPrivate = v.IsPrivate
	retval.IsTemplate = v.IsTemplate
	retval.UpdatedAt = v.UpdatedAt
	retval.Parent = v.Parent
	return &retval, nil
}

// RepositoryFragmentOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type RepositoryFragmentOwnerOrganization struct {
	Typename                  string `json:"__typename"`
	OwnerFragmentOrganization `json:"-"`
}

// GetTypename returns RepositoryFragmentOwnerOrganization.Typename, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentOwnerOrganization) GetTypename() string { return v.Typename }

// GetLogin returns RepositoryFragmentOwnerOrganization.Login, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentOwnerOrganization) GetLogin() string {
	return v.OwnerFragmentOrganization.Login
}

func (v *RepositoryFragmentOwnerOrganization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepositoryFragmentOwnerOrganization
		graphql.NoUnmarshalJSON
	}
	firstPass.RepositoryFragmentOwnerOrganization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OwnerFragmentOrganization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepositoryFragmentOwnerOrganization struct {
	Typename string `json:"__typename"`

	Login string `json:"login"`
}

func (v *RepositoryFragmentOwnerOrganization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepositoryFragmentOwnerOrganization) __premarshalJSON() (*__premarshalRepositoryFragmentOwnerOrganization, error) {
	var retval __premarshalRepositoryFragmentOwnerOrganization

	retval.Typename = v.Typename
	retval.Login = v.OwnerFragmentOrganization.Login
	return &retval, nil
}

// RepositoryFragmentOwnerRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// RepositoryFragmentOwnerRepositoryOwner is implemented by the following types:
// RepositoryFragmentOwnerOrganization
// RepositoryFragmentOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type RepositoryFragmentOwnerRepositoryOwner interface {
	implementsGraphQLInterfaceRepositoryFragmentOwnerRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	OwnerFragment
}

func (v *RepositoryFragmentOwnerOrganization) implementsGraphQLInterfaceRepositoryFragmentOwnerRepositoryOwner() {
}
func (v *RepositoryFragmentOwnerUser) implementsGraphQLInterfaceRepositoryFragmentOwnerRepositoryOwner() {
}

func __unmarshalRepositoryFragmentOwnerRepositoryOwner(b []byte, v *RepositoryFragmentOwnerRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(RepositoryFragmentOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(RepositoryFragmentOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RepositoryFragmentOwnerRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalRepositoryFragmentOwnerRepositoryOwner(v *RepositoryFragmentOwnerRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RepositoryFragmentOwnerOrganization:
		typename = "Organization"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRepositoryFragmentOwnerOrganization
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RepositoryFragmentOwnerUser:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRepositoryFragmentOwnerUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RepositoryFragmentOwnerRepositoryOwner: "%T"`, v)
	}
}

// RepositoryFragmentOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type RepositoryFragmentOwnerUser struct {
	Typename          string `json:"__typename"`
	OwnerFragmentUser `json:"-"`
}

// GetTypename returns RepositoryFragmentOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentOwnerUser) GetTypename() string { return v.Typename }

// GetLogin returns RepositoryFragmentOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentOwnerUser) GetLogin() string { return v.OwnerFragmentUser.Login }

func (v *RepositoryFragmentOwnerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepositoryFragmentOwnerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.RepositoryFragmentOwnerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OwnerFragmentUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepositoryFragmentOwnerUser struct {
	Typename string `json:"__typename"`

	Login string `json:"login"`
}

func (v *RepositoryFragmentOwnerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepositoryFragmentOwnerUser) __premarshalJSON() (*__premarshalRepositoryFragmentOwnerUser, error) {
	var retval __premarshalRepositoryFragmentOwnerUser

	retval.Typename = v.Typename
	retval.Login = v.OwnerFragmentUser.Login
	return &retval, nil
}

// RepositoryFragmentParentRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type RepositoryFragmentParentRepository struct {
	ParentRepositoryFragment `json:"-"`
}

// GetName returns RepositoryFragmentParentRepository.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentParentRepository) GetName() string { return v.ParentRepositoryFragment.Name }

// GetOwner returns RepositoryFragmentParentRepository.Owner, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentParentRepository) GetOwner() ParentRepositoryFragmentOwnerRepositoryOwner {
	return v.ParentRepositoryFragment.Owner
}

// GetSshUrl returns RepositoryFragmentParentRepository.SshUrl, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentParentRepository) GetSshUrl() string {
	return v.ParentRepositoryFragment.SshUrl
}

func (v *RepositoryFragmentParentRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepositoryFragmentParentRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.RepositoryFragmentParentRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ParentRepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepositoryFragmentParentRepository struct {
	Name string `json:"name"`

	Owner json.RawMessage `json:"owner"`

	SshUrl string `json:"sshUrl"`
}

func (v *RepositoryFragmentParentRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepositoryFragmentParentRepository) __premarshalJSON() (*__premarshalRepositoryFragmentParentRepository, error) {
	var retval __premarshalRepositoryFragmentParentRepository

	retval.Name = v.ParentRepositoryFragment.Name
	{

		dst := &retval.Owner
		src := v.ParentRepositoryFragment.Owner
		var err error
		*dst, err = __marshalParentRepositoryFragmentOwnerRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RepositoryFragmentParentRepository.ParentRepositoryFragment.Owner: %w", err)
		}
	}
	retval.SshUrl = v.ParentRepositoryFragment.SshUrl
	return &retval, nil
}

// RepositoryFragmentPrimaryLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type RepositoryFragmentPrimaryLanguage struct {
	LanguageFragment `json:"-"`
}

// GetName returns RepositoryFragmentPrimaryLanguage.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentPrimaryLanguage) GetName() string { return v.LanguageFragment.Name }

func (v *RepositoryFragmentPrimaryLanguage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepositoryFragmentPrimaryLanguage
		graphql.NoUnmarshalJSON
	}
	firstPass.RepositoryFragmentPrimaryLanguage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LanguageFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepositoryFragmentPrimaryLanguage struct {
	Name string `json:"name"`
}

func (v *RepositoryFragmentPrimaryLanguage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepositoryFragmentPrimaryLanguage) __premarshalJSON() (*__premarshalRepositoryFragmentPrimaryLanguage, error) {
	var retval __premarshalRepositoryFragmentPrimaryLanguage

	retval.Name = v.LanguageFragment.Name
	return &retval, nil
}

// Ordering options for repository connections
type RepositoryOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field to order repositories by.
	Field RepositoryOrderField `json:"field"`
}

// GetDirection returns RepositoryOrder.Direction, and is useful for accessing the field via an interface.
func (v *RepositoryOrder) GetDirection() OrderDirection { return v.Direction }

// GetField returns RepositoryOrder.Field, and is useful for accessing the field via an interface.
func (v *RepositoryOrder) GetField() RepositoryOrderField { return v.Field }

// Properties by which repository connections can be ordered.
type RepositoryOrderField string

const (
	// Order repositories by creation time
	RepositoryOrderFieldCreatedAt RepositoryOrderField = "CREATED_AT"
	// Order repositories by name
	RepositoryOrderFieldName RepositoryOrderField = "NAME"
	// Order repositories by push time
	RepositoryOrderFieldPushedAt RepositoryOrderField = "PUSHED_AT"
	// Order repositories by number of stargazers
	RepositoryOrderFieldStargazers RepositoryOrderField = "STARGAZERS"
	// Order repositories by update time
	RepositoryOrderFieldUpdatedAt RepositoryOrderField = "UPDATED_AT"
)

var AllRepositoryOrderField = []RepositoryOrderField{
	RepositoryOrderFieldCreatedAt,
	RepositoryOrderFieldName,
	RepositoryOrderFieldPushedAt,
	RepositoryOrderFieldStargazers,
	RepositoryOrderFieldUpdatedAt,
}

// The privacy of a repository
type RepositoryPrivacy string

const (
	// Private
	RepositoryPrivacyPrivate RepositoryPrivacy = "PRIVATE"
	// Public
	RepositoryPrivacyPublic RepositoryPrivacy = "PUBLIC"
)

var AllRepositoryPrivacy = []RepositoryPrivacy{
	RepositoryPrivacyPrivate,
	RepositoryPrivacyPublic,
}

// __ListReposInput is used internally by genqlient
type __ListReposInput struct {
	First        int                     `json:"first"`
	After        string                  `json:"after,omitempty"`
	IsFork       *bool                   `json:"isFork,omitempty"`
	Privacy      RepositoryPrivacy       `json:"privacy,omitempty"`
	Affiliations []RepositoryAffiliation `json:"affiliations,omitempty"`
	OrderBy      RepositoryOrder         `json:"orderBy,omitempty"`
	IsArchived   *bool                   `json:"isArchived,omitempty"`
}

// GetFirst returns __ListReposInput.First, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetFirst() int { return v.First }

// GetAfter returns __ListReposInput.After, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetAfter() string { return v.After }

// GetIsFork returns __ListReposInput.IsFork, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetIsFork() *bool { return v.IsFork }

// GetPrivacy returns __ListReposInput.Privacy, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetPrivacy() RepositoryPrivacy { return v.Privacy }

// GetAffiliations returns __ListReposInput.Affiliations, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetAffiliations() []RepositoryAffiliation { return v.Affiliations }

// GetOrderBy returns __ListReposInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetOrderBy() RepositoryOrder { return v.OrderBy }

// GetIsArchived returns __ListReposInput.IsArchived, and is useful for accessing the field via an interface.
func (v *__ListReposInput) GetIsArchived() *bool { return v.IsArchived }

// The query executed by ListRepos.
const ListRepos_Operation = `
query ListRepos ($first: Int = 30, $after: String, $isFork: Boolean, $privacy: RepositoryPrivacy, $affiliations: [RepositoryAffiliation], $orderBy: RepositoryOrder = {field:PUSHED_AT,direction:DESC}, $isArchived: Boolean) {
	viewer {
		repositories(first: $first, after: $after, isArchived: $isArchived, isFork: $isFork, privacy: $privacy, ownerAffiliations: $affiliations, affiliations: $affiliations, orderBy: $orderBy) {
			edges {
				node {
					... RepositoryFragment
				}
			}
			totalCount
			pageInfo {
				... PageInfoFragment
			}
		}
	}
}
fragment RepositoryFragment on Repository {
	url
	homepageUrl
	sshUrl
	primaryLanguage {
		... LanguageFragment
	}
	name
	owner {
		__typename
		... OwnerFragment
	}
	description
	createdAt
	isArchived
	isFork
	isPrivate
	isTemplate
	updatedAt
	parent {
		... ParentRepositoryFragment
	}
}
fragment PageInfoFragment on PageInfo {
	endCursor
	hasNextPage
}
fragment LanguageFragment on Language {
	name
}
fragment OwnerFragment on RepositoryOwner {
	login
}
fragment ParentRepositoryFragment on Repository {
	name
	owner {
		__typename
		... OwnerFragment
	}
	sshUrl
}
`

func ListRepos(
	ctx_ context.Context,
	client_ graphql.Client,
	first int,
	after string,
	isFork *bool,
	privacy RepositoryPrivacy,
	affiliations []RepositoryAffiliation,
	orderBy RepositoryOrder,
	isArchived *bool,
) (data_ *ListReposResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListRepos",
		Query:  ListRepos_Operation,
		Variables: &__ListReposInput{
			First:        first,
			After:        after,
			IsFork:       isFork,
			Privacy:      privacy,
			Affiliations: affiliations,
			OrderBy:      orderBy,
			IsArchived:   isArchived,
		},
	}

	data_ = &ListReposResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
