// Code generated by main.go DO NOT EDIT.

package env

import (
	"fmt"
	types "github.com/kyoh86/appenv/types"
	"io"
)

type Config struct {
	yml     YAML
	keyring Keyring
}

func GetConfig(yamlReader io.Reader, keyringService string) (config Config, err error) {
	yml, err := loadYAML(yamlReader)
	if err != nil {
		return config, err
	}
	keyring, err := loadKeyring(keyringService)
	if err != nil {
		return config, err
	}
	config.yml = yml
	config.keyring = keyring
	return
}

func (c *Config) Save(yamlWriter io.Writer, keyringService string) error {
	if err := saveYAML(yamlWriter, &c.yml); err != nil {
		return err
	}
	if err := saveKeyring(keyringService, &c.keyring); err != nil {
		return err
	}
	return nil
}

func PropertyNames() []string {
	return []string{"roots", "github.host", "github.token"}
}

func (a *Config) Property(name string) (types.Config, error) {
	switch name {
	case "roots":
		return &rootsConfig{parent: a}, nil
	case "github.host":
		return &githubHostConfig{parent: a}, nil
	case "github.token":
		return &githubTokenConfig{parent: a}, nil
	}
	return nil, fmt.Errorf("invalid property name %q", name)
}

type rootsConfig struct {
	parent *Config
}

func (a *rootsConfig) Get() (string, error) {
	{
		p := a.parent.yml.Roots
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *rootsConfig) Set(value string) error {
	{
		p := a.parent.yml.Roots
		if p == nil {
			p = new(Roots)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.yml.Roots = p
	}
	return nil
}

func (a *rootsConfig) Unset() {
	a.parent.yml.Roots = nil
}

type githubHostConfig struct {
	parent *Config
}

func (a *githubHostConfig) Get() (string, error) {
	{
		p := a.parent.yml.GithubHost
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *githubHostConfig) Set(value string) error {
	{
		p := a.parent.yml.GithubHost
		if p == nil {
			p = new(GithubHost)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.yml.GithubHost = p
	}
	return nil
}

func (a *githubHostConfig) Unset() {
	a.parent.yml.GithubHost = nil
}

type githubTokenConfig struct {
	parent *Config
}

func (a *githubTokenConfig) Get() (string, error) {
	{
		p := a.parent.keyring.GithubToken
		if p != nil {
			text, err := p.MarshalText()
			return p.Mask(string(text)), err
		}
	}
	return "", nil
}

func (a *githubTokenConfig) Set(value string) error {
	{
		p := a.parent.keyring.GithubToken
		if p == nil {
			p = new(GithubToken)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.keyring.GithubToken = p
	}
	return nil
}

func (a *githubTokenConfig) Unset() {
	a.parent.keyring.GithubToken = nil
}
