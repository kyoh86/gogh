// Code generated by main.go DO NOT EDIT.

package env

func Merge(envar Envar, cache Cache, keyring Keyring, config Config) (merged Merged) {
	merged.roots = new(Roots).Default().([]string)
	if config.Roots != nil {
		merged.roots = config.Roots.Value().([]string)
	}
	if envar.Roots != nil {
		merged.roots = envar.Roots.Value().([]string)
	}

	merged.githubHost = new(GithubHost).Default().(string)
	if config.GithubHost != nil {
		merged.githubHost = config.GithubHost.Value().(string)
	}
	if envar.GithubHost != nil {
		merged.githubHost = envar.GithubHost.Value().(string)
	}

	merged.githubToken = new(GithubToken).Default().(string)
	if keyring.GithubToken != nil {
		merged.githubToken = keyring.GithubToken.Value().(string)
	}
	if envar.GithubToken != nil {
		merged.githubToken = envar.GithubToken.Value().(string)
	}

	merged.githubUser = new(GithubUser).Default().(string)
	if cache.GithubUser != nil {
		merged.githubUser = cache.GithubUser.Value().(string)
	}

	return
}

type Merged struct {
	roots       []string
	githubHost  string
	githubToken string
	githubUser  string
}

func (m *Merged) Roots() []string {
	return m.roots
}

func (m *Merged) GithubHost() string {
	return m.githubHost
}

func (m *Merged) GithubToken() string {
	return m.githubToken
}

func (m *Merged) GithubUser() string {
	return m.githubUser
}
