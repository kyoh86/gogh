// Code generated by main.go DO NOT EDIT.

package env

import "io"

func GetAccess(yamlReader io.Reader, envarPrefix string) (access Access, err error) {
	yml, err := loadYAML(yamlReader)
	if err != nil {
		return access, err
	}
	return buildAccess(yml, envarPrefix)
}

func buildAccess(yml YAML, envarPrefix string) (access Access, err error) {
	envar, err := getEnvar(envarPrefix)
	if err != nil {
		return access, err
	}
	access.githubHost = new(GithubHost).Default().(string)
	if yml.GithubHost != nil {
		access.githubHost = yml.GithubHost.Value().(string)
	}
	if envar.GithubHost != nil {
		access.githubHost = envar.GithubHost.Value().(string)
	}

	access.githubUser = new(GithubUser).Default().(string)
	if yml.GithubUser != nil {
		access.githubUser = yml.GithubUser.Value().(string)
	}
	if envar.GithubUser != nil {
		access.githubUser = envar.GithubUser.Value().(string)
	}

	access.roots = new(Roots).Default().([]string)
	if yml.Roots != nil {
		access.roots = yml.Roots.Value().([]string)
	}
	if envar.Roots != nil {
		access.roots = envar.Roots.Value().([]string)
	}

	access.hooks = new(Hooks).Default().([]string)
	if yml.Hooks != nil {
		access.hooks = yml.Hooks.Value().([]string)
	}
	if envar.Hooks != nil {
		access.hooks = envar.Hooks.Value().([]string)
	}

	return
}

type Access struct {
	githubHost string
	githubUser string
	roots      []string
	hooks      []string
}

func (a *Access) GithubHost() string {
	return a.githubHost
}

func (a *Access) GithubUser() string {
	return a.githubUser
}

func (a *Access) Roots() []string {
	return a.roots
}

func (a *Access) Hooks() []string {
	return a.hooks
}
