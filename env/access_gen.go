// Code generated by main.go DO NOT EDIT.

package env

import (
	"fmt"
	types "github.com/kyoh86/gogh/appenv/types"
)

type Accessor struct {
	file    File
	keyring Keyring
}

func (a *Accessor) Names() []string {
	return []string{"roots", "github.host", "github.token"}
}

func (a *Accessor) Property(name string) (types.Accessor, error) {
	switch name {
	case "roots":
		return &rootsAccessor{parent: a}, nil
	case "github.host":
		return &githubHostAccessor{parent: a}, nil
	case "github.token":
		return &githubTokenAccessor{parent: a}, nil
	}
	return nil, fmt.Errorf("invalid propertye name %q", name)
}

type rootsAccessor struct {
	parent *Accessor
}

func (a *rootsAccessor) Get() (string, error) {
	{
		p := a.parent.file.Roots
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *rootsAccessor) Set(value string) error {
	{
		p := a.parent.file.Roots
		if p == nil {
			p = new(Roots)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.file.Roots = p
	}
	return nil
}

func (a *rootsAccessor) Unset() {
	a.parent.file.Roots = nil
}

type githubHostAccessor struct {
	parent *Accessor
}

func (a *githubHostAccessor) Get() (string, error) {
	{
		p := a.parent.file.GithubHost
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *githubHostAccessor) Set(value string) error {
	{
		p := a.parent.file.GithubHost
		if p == nil {
			p = new(GithubHost)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.file.GithubHost = p
	}
	return nil
}

func (a *githubHostAccessor) Unset() {
	a.parent.file.GithubHost = nil
}

type githubTokenAccessor struct {
	parent *Accessor
}

func (a *githubTokenAccessor) Get() (string, error) {
	{
		p := a.parent.keyring.GithubToken
		if p != nil {
			text, err := p.MarshalText()
			return p.Mask(string(text)), err
		}
	}
	return "", nil
}

func (a *githubTokenAccessor) Set(value string) error {
	{
		p := a.parent.keyring.GithubToken
		if p == nil {
			p = new(GithubToken)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.keyring.GithubToken = p
	}
	return nil
}

func (a *githubTokenAccessor) Unset() {
	a.parent.keyring.GithubToken = nil
}
