// Code generated by main.go DO NOT EDIT.

package env

import (
	keyring "github.com/zalando/go-keyring"
	yaml "gopkg.in/yaml.v3"
	"io"
	"log"
	"os"
)

type File struct {
	Roots      *Roots      `yaml:"roots,omitempty"`
	GithubHost *GithubHost `yaml:"githubHost,omitempty"`
}

func SaveFile(w io.Writer, file *File) error {
	return yaml.NewEncoder(w).Encode(file)
}

func LoadFile(r io.Reader) (file File, err error) {
	err = yaml.NewDecoder(r).Decode(&file)
	return
}

type Envar struct {
	Roots       *Roots
	GithubHost  *GithubHost
	GithubToken *GithubToken
}

func LoadEnvar() (envar Envar, err error) {
	{
		v := os.Getenv("GOGH_ROOTS")
		if v == "" {
			log.Printf("info: there's no envar GOGH_ROOTS (%v)", err)
		} else {
			var value Roots
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Roots = &value
		}
	}
	{
		v := os.Getenv("GOGH_GITHUB_HOST")
		if v == "" {
			log.Printf("info: there's no envar GOGH_GITHUB_HOST (%v)", err)
		} else {
			var value GithubHost
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.GithubHost = &value
		}
	}
	{
		v := os.Getenv("GOGH_GITHUB_TOKEN")
		if v == "" {
			log.Printf("info: there's no envar GOGH_GITHUB_TOKEN (%v)", err)
		} else {
			var value GithubToken
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.GithubToken = &value
		}
	}
	return
}

type Keyring struct {
	GithubToken *GithubToken
}

func LoadKeyring() (key Keyring, err error) {
	{
		v, err := keyring.Get("github.com/kyoh86/gogh/env", "github-token")
		if err == nil {
			var value GithubToken
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return key, err
			}
			key.GithubToken = &value
		} else {
			log.Printf("info: there's no secret in github-token@github.com/kyoh86/gogh/env (%v)", err)
		}
	}
	return
}

func SaveKeyring(key Keyring) (err error) {
	{
		buf, err := key.GithubToken.MarshalText()
		if err != nil {
			return err
		}
		if err := keyring.Set("github.com/kyoh86/gogh/env", "github-token", string(buf)); err != nil {
			return err
		}
	}
	return nil
}
