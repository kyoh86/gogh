// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package githubv4

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Represents an object which can take actions on GitHub. Typically a User or Bot.
type Actor interface {
	IsActor()
	// A URL pointing to the actor's public avatar.
	GetAvatarURL() string
	// The username of the actor.
	GetLogin() string
	// The HTTP path for this actor.
	GetResourcePath() string
	// The HTTP URL for this actor.
	GetURL() string
}

// Represents an announcement banner.
type AnnouncementBanner interface {
	IsAnnouncementBanner()
	// The text of the announcement
	GetAnnouncement() *string
	// The expiration date of the announcement, if any
	GetAnnouncementExpiresAt() *string
	// Whether the announcement can be dismissed by the user
	GetAnnouncementUserDismissible() *bool
}

// An object that can have users assigned to it.
type Assignable interface {
	IsAssignable()
	// A list of Users assigned to this object.
	GetAssignees() UserConnection
}

// Types that can be assigned to issues.
type Assignee interface {
	IsAssignee()
}

// An entry in the audit log.
type AuditEntry interface {
	IsAuditEntry()
	// The action name
	GetAction() string
	// The user who initiated the action
	GetActor() AuditEntryActor
	// The IP address of the actor
	GetActorIP() *string
	// A readable representation of the actor's location
	GetActorLocation() *ActorLocation
	// The username of the user who initiated the action
	GetActorLogin() *string
	// The HTTP path for the actor.
	GetActorResourcePath() *string
	// The HTTP URL for the actor.
	GetActorURL() *string
	// The time the action was initiated
	GetCreatedAt() string
	// The corresponding operation type for the action
	GetOperationType() *OperationType
	// The user affected by the action
	GetUser() *User
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	GetUserLogin() *string
	// The HTTP path for the user.
	GetUserResourcePath() *string
	// The HTTP URL for the user.
	GetUserURL() *string
}

// Types that can initiate an audit log event.
type AuditEntryActor interface {
	IsAuditEntryActor()
}

// Types which can be actors for `BranchActorAllowance` objects.
type BranchActorAllowanceActor interface {
	IsBranchActorAllowanceActor()
}

// Types that can represent a repository ruleset bypass actor.
type BypassActor interface {
	IsBypassActor()
}

// An object which can have its data claimed or claim data from another.
type Claimable interface {
	IsClaimable()
}

// An object that can be closed
type Closable interface {
	IsClosable()
	// Indicates if the object is closed (definition of closed may depend on type)
	GetClosed() bool
	// Identifies the date and time when the object was closed.
	GetClosedAt() *string
	// Indicates if the object can be closed by the viewer.
	GetViewerCanClose() bool
	// Indicates if the object can be reopened by the viewer.
	GetViewerCanReopen() bool
}

// The object which triggered a `ClosedEvent`.
type Closer interface {
	IsCloser()
}

// Represents a comment.
type Comment interface {
	IsComment()
	// The actor who authored the comment.
	GetAuthor() Actor
	// Author's association with the subject of the comment.
	GetAuthorAssociation() CommentAuthorAssociation
	// The body as Markdown.
	GetBody() string
	// The body rendered to HTML.
	GetBodyHTML() string
	// The body rendered to text.
	GetBodyText() string
	// Identifies the date and time when the object was created.
	GetCreatedAt() string
	// Check if this comment was created via an email reply.
	GetCreatedViaEmail() bool
	// The actor who edited the comment.
	GetEditor() Actor
	GetID() string
	// Check if this comment was edited and includes an edit with the creation data
	GetIncludesCreatedEdit() bool
	// The moment the editor made the last edit
	GetLastEditedAt() *string
	// Identifies when the comment was published at.
	GetPublishedAt() *string
	// Identifies the date and time when the object was last updated.
	GetUpdatedAt() string
	// A list of edits to this content.
	GetUserContentEdits() *UserContentEditConnection
	// Did the viewer author this comment.
	GetViewerDidAuthor() bool
}

// Represents a contribution a user made on GitHub, such as opening an issue.
type Contribution interface {
	IsContribution()
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	GetIsRestricted() bool
	// When this contribution was made.
	GetOccurredAt() string
	// The HTTP path for this contribution.
	GetResourcePath() string
	// The HTTP URL for this contribution.
	GetURL() string
	// The user who made this contribution.
	//
	GetUser() User
}

// Represents either a issue the viewer can access or a restricted contribution.
type CreatedIssueOrRestrictedContribution interface {
	IsCreatedIssueOrRestrictedContribution()
}

// Represents either a pull request the viewer can access or a restricted contribution.
type CreatedPullRequestOrRestrictedContribution interface {
	IsCreatedPullRequestOrRestrictedContribution()
}

// Represents either a repository the viewer can access or a restricted contribution.
type CreatedRepositoryOrRestrictedContribution interface {
	IsCreatedRepositoryOrRestrictedContribution()
}

// Entities that can be deleted.
type Deletable interface {
	IsDeletable()
	// Check if the current viewer can delete this object.
	GetViewerCanDelete() bool
}

// Users and teams.
type DeploymentReviewer interface {
	IsDeploymentReviewer()
}

// Metadata for an audit entry containing enterprise account information.
type EnterpriseAuditEntryData interface {
	IsEnterpriseAuditEntryData()
	// The HTTP path for this enterprise.
	GetEnterpriseResourcePath() *string
	// The slug of the enterprise.
	GetEnterpriseSlug() *string
	// The HTTP URL for this enterprise.
	GetEnterpriseURL() *string
}

// An object that is a member of an enterprise.
type EnterpriseMember interface {
	IsEnterpriseMember()
}

// Represents a Git object.
type GitObject interface {
	IsGitObject()
	// An abbreviated version of the Git object ID
	GetAbbreviatedOid() string
	// The HTTP path for this Git object
	GetCommitResourcePath() string
	// The HTTP URL for this Git object
	GetCommitURL() string
	GetID() string
	// The Git object ID
	GetOid() string
	// The Repository the Git object belongs to
	GetRepository() Repository
}

// Information about a signature (GPG or S/MIME) on a Commit or Tag.
type GitSignature interface {
	IsGitSignature()
	// Email used to sign this object.
	GetEmail() string
	// True if the signature is valid and verified by GitHub.
	GetIsValid() bool
	// Payload for GPG signing object. Raw ODB object without the signature header.
	GetPayload() string
	// ASCII-armored signature header from object.
	GetSignature() string
	// GitHub user corresponding to the email signing this commit.
	GetSigner() *User
	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	GetState() GitSignatureState
	// True if the signature was made with GitHub's signing key.
	GetWasSignedByGitHub() bool
}

// An individual line of a hovercard
type HovercardContext interface {
	IsHovercardContext()
	// A string describing this context
	GetMessage() string
	// An octicon to accompany this context
	GetOcticon() string
}

// Types that can own an IP allow list.
type IPAllowListOwner interface {
	IsIPAllowListOwner()
}

// Used for return value of Repository.issueOrPullRequest.
type IssueOrPullRequest interface {
	IsIssueOrPullRequest()
}

// An item in an issue timeline
type IssueTimelineItem interface {
	IsIssueTimelineItem()
}

// An item in an issue timeline
type IssueTimelineItems interface {
	IsIssueTimelineItems()
}

// An object that can have labels assigned to it.
type Labelable interface {
	IsLabelable()
	// A list of labels associated with the object.
	GetLabels() *LabelConnection
}

// An object that can be locked.
type Lockable interface {
	IsLockable()
	// Reason that the conversation was locked.
	GetActiveLockReason() *LockReason
	// `true` if the object is locked
	GetLocked() bool
}

// Entities that have members who can set status messages.
type MemberStatusable interface {
	IsMemberStatusable()
	// Get the status messages members of this entity have set that are either public or visible only to the organization.
	GetMemberStatuses() UserStatusConnection
}

// Represents a GitHub Enterprise Importer (GEI) migration.
type Migration interface {
	IsMigration()
	// The migration flag to continue on error.
	GetContinueOnError() bool
	// Identifies the date and time when the object was created.
	GetCreatedAt() string
	// Identifies the primary key from the database.
	GetDatabaseID() *string
	// The reason the migration failed.
	GetFailureReason() *string
	GetID() string
	// The URL for the migration log (expires 1 day after migration completes).
	GetMigrationLogURL() *string
	// The migration source.
	GetMigrationSource() MigrationSource
	// The target repository name.
	GetRepositoryName() string
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	GetSourceURL() string
	// The migration state.
	GetState() MigrationState
	// The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
	GetWarningsCount() int64
}

// Types that can be inside a Milestone.
type MilestoneItem interface {
	IsMilestoneItem()
}

// Entities that can be minimized.
type Minimizable interface {
	IsMinimizable()
	// Returns whether or not a comment has been minimized.
	GetIsMinimized() bool
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	GetMinimizedReason() *string
	// Check if the current viewer can minimize this object.
	GetViewerCanMinimize() bool
}

// An object with an ID.
type Node interface {
	IsNode()
	// ID of the object.
	GetID() string
}

// The parent object that the notification thread's subject belongs to.
type NotificationsList interface {
	IsNotificationsList()
}

// The notification's subject.
type NotificationsSubject interface {
	IsNotificationsSubject()
}

// Metadata for an audit entry with action oauth_application.*
type OauthApplicationAuditEntryData interface {
	IsOauthApplicationAuditEntryData()
	// The name of the OAuth application.
	GetOauthApplicationName() *string
	// The HTTP path for the OAuth application
	GetOauthApplicationResourcePath() *string
	// The HTTP URL for the OAuth application
	GetOauthApplicationURL() *string
}

// Types of memberships that can be restored for an Organization member.
type OrgRestoreMemberAuditEntryMembership interface {
	IsOrgRestoreMemberAuditEntryMembership()
}

// An audit entry in an organization audit log.
type OrganizationAuditEntry interface {
	IsOrganizationAuditEntry()
}

// Metadata for an audit entry with action org.*
type OrganizationAuditEntryData interface {
	IsOrganizationAuditEntryData()
	// The Organization associated with the Audit Entry.
	GetOrganization() *Organization
	// The name of the Organization.
	GetOrganizationName() *string
	// The HTTP path for the organization
	GetOrganizationResourcePath() *string
	// The HTTP URL for the organization
	GetOrganizationURL() *string
}

// Used for argument of CreateProjectV2 mutation.
type OrganizationOrUser interface {
	IsOrganizationOrUser()
}

// Represents an owner of a package.
type PackageOwner interface {
	IsPackageOwner()
	GetID() string
	// A list of packages under the owner.
	GetPackages() PackageConnection
}

// Types that can grant permissions on a repository to a user
type PermissionGranter interface {
	IsPermissionGranter()
}

// Types that can be pinned to a profile page.
type PinnableItem interface {
	IsPinnableItem()
}

// Represents any entity on GitHub that has a profile page.
type ProfileOwner interface {
	IsProfileOwner()
	// Determine if this repository owner has any items that can be pinned to their profile.
	GetAnyPinnableItems() bool
	// The public profile email.
	GetEmail() *string
	GetID() string
	// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
	GetItemShowcase() ProfileItemShowcase
	// The public profile location.
	GetLocation() *string
	// The username used to login.
	GetLogin() string
	// The public profile name.
	GetName() *string
	// A list of repositories and gists this profile owner can pin to their profile.
	GetPinnableItems() PinnableItemConnection
	// A list of repositories and gists this profile owner has pinned to their profile
	GetPinnedItems() PinnableItemConnection
	// Returns how many more items this profile owner can pin to their profile.
	GetPinnedItemsRemaining() int64
	// Can the viewer pin repositories and gists to the profile?
	GetViewerCanChangePinnedItems() bool
	// The public profile website URL.
	GetWebsiteURL() *string
}

// Types that can be inside Project Cards.
type ProjectCardItem interface {
	IsProjectCardItem()
}

// Represents an owner of a Project.
type ProjectOwner interface {
	IsProjectOwner()
	GetID() string
	// Find project by number.
	GetProject() *Project
	// A list of projects under the owner.
	GetProjects() ProjectConnection
	// The HTTP path listing owners projects
	GetProjectsResourcePath() string
	// The HTTP URL listing owners projects
	GetProjectsURL() string
	// Can the current viewer create new projects on this owner.
	GetViewerCanCreateProjects() bool
}

// Possible collaborators for a project.
type ProjectV2Actor interface {
	IsProjectV2Actor()
}

// Common fields across different project field types
type ProjectV2FieldCommon interface {
	IsProjectV2FieldCommon()
	// Identifies the date and time when the object was created.
	GetCreatedAt() string
	// The field's type.
	GetDataType() ProjectV2FieldType
	// Identifies the primary key from the database.
	GetDatabaseID() *int64
	GetID() string
	// The project field's name.
	GetName() string
	// The project that contains this field.
	GetProject() ProjectV2
	// Identifies the date and time when the object was last updated.
	GetUpdatedAt() string
}

// Configurations for project fields.
type ProjectV2FieldConfiguration interface {
	IsProjectV2FieldConfiguration()
}

// Types that can be inside Project Items.
type ProjectV2ItemContent interface {
	IsProjectV2ItemContent()
}

// Project field values
type ProjectV2ItemFieldValue interface {
	IsProjectV2ItemFieldValue()
}

// Common fields across different project field value types
type ProjectV2ItemFieldValueCommon interface {
	IsProjectV2ItemFieldValueCommon()
	// Identifies the date and time when the object was created.
	GetCreatedAt() string
	// The actor who created the item.
	GetCreator() Actor
	// Identifies the primary key from the database.
	GetDatabaseID() *int64
	// The project field that contains this value.
	GetField() ProjectV2FieldConfiguration
	GetID() string
	// The project item that contains this value.
	GetItem() ProjectV2Item
	// Identifies the date and time when the object was last updated.
	GetUpdatedAt() string
}

// Represents an owner of a project (beta).
type ProjectV2Owner interface {
	IsProjectV2Owner()
	GetID() string
	// Find a project by number.
	GetProjectV2() *ProjectV2
	// A list of projects under the owner.
	GetProjectsV2() ProjectV2Connection
}

// Recent projects for the owner.
type ProjectV2Recent interface {
	IsProjectV2Recent()
	// Recent projects that this user has modified in the context of the owner.
	GetRecentProjects() ProjectV2Connection
}

// An item in a pull request timeline
type PullRequestTimelineItem interface {
	IsPullRequestTimelineItem()
}

// An item in a pull request timeline
type PullRequestTimelineItems interface {
	IsPullRequestTimelineItems()
}

// Types that can be an actor.
type PushAllowanceActor interface {
	IsPushAllowanceActor()
}

// Represents a subject that can be reacted on.
type Reactable interface {
	IsReactable()
	// Identifies the primary key from the database.
	GetDatabaseID() *int64
	GetID() string
	// A list of reactions grouped by content left on the subject.
	GetReactionGroups() []*ReactionGroup
	// A list of Reactions left on the Issue.
	GetReactions() ReactionConnection
	// Can user react to this subject
	GetViewerCanReact() bool
}

// Types that can be assigned to reactions.
type Reactor interface {
	IsReactor()
}

// Any referencable object
type ReferencedSubject interface {
	IsReferencedSubject()
}

// An object which has a renamable title
type RenamedTitleSubject interface {
	IsRenamedTitleSubject()
}

// Metadata for an audit entry with action repo.*
type RepositoryAuditEntryData interface {
	IsRepositoryAuditEntryData()
	// The repository associated with the action
	GetRepository() *Repository
	// The name of the repository
	GetRepositoryName() *string
	// The HTTP path for the repository
	GetRepositoryResourcePath() *string
	// The HTTP URL for the repository
	GetRepositoryURL() *string
}

// Represents an author of discussions in repositories.
type RepositoryDiscussionAuthor interface {
	IsRepositoryDiscussionAuthor()
	// Discussions this user has started.
	GetRepositoryDiscussions() DiscussionConnection
}

// Represents an author of discussion comments in repositories.
type RepositoryDiscussionCommentAuthor interface {
	IsRepositoryDiscussionCommentAuthor()
	// Discussion comments this user has authored.
	GetRepositoryDiscussionComments() DiscussionCommentConnection
}

// A subset of repository info.
type RepositoryInfo interface {
	IsRepositoryInfo()
	// Identifies the date and time when the repository was archived.
	GetArchivedAt() *string
	// Identifies the date and time when the object was created.
	GetCreatedAt() string
	// The description of the repository.
	GetDescription() *string
	// The description of the repository rendered to HTML.
	GetDescriptionHTML() string
	// Returns how many forks there are of this repository in the whole network.
	GetForkCount() int64
	// Indicates if the repository has the Discussions feature enabled.
	GetHasDiscussionsEnabled() bool
	// Indicates if the repository has issues feature enabled.
	GetHasIssuesEnabled() bool
	// Indicates if the repository has the Projects feature enabled.
	GetHasProjectsEnabled() bool
	// Indicates if the repository has wiki feature enabled.
	GetHasWikiEnabled() bool
	// The repository's URL.
	GetHomepageURL() *string
	// Indicates if the repository is unmaintained.
	GetIsArchived() bool
	// Identifies if the repository is a fork.
	GetIsFork() bool
	// Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
	GetIsInOrganization() bool
	// Indicates if the repository has been locked or not.
	GetIsLocked() bool
	// Identifies if the repository is a mirror.
	GetIsMirror() bool
	// Identifies if the repository is private or internal.
	GetIsPrivate() bool
	// Identifies if the repository is a template that can be used to generate new repositories.
	GetIsTemplate() bool
	// The license associated with the repository
	GetLicenseInfo() *License
	// The reason the repository has been locked.
	GetLockReason() *RepositoryLockReason
	// The repository's original mirror URL.
	GetMirrorURL() *string
	// The name of the repository.
	GetName() string
	// The repository's name with owner.
	GetNameWithOwner() string
	// The image used to represent this repository in Open Graph data.
	GetOpenGraphImageURL() string
	// The User owner of the repository.
	GetOwner() RepositoryOwner
	// Identifies the date and time when the repository was last pushed to.
	GetPushedAt() *string
	// The HTTP path for this repository
	GetResourcePath() string
	// A description of the repository, rendered to HTML without any links in it.
	GetShortDescriptionHTML() string
	// Identifies the date and time when the object was last updated.
	GetUpdatedAt() string
	// The HTTP URL for this repository
	GetURL() string
	// Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
	GetUsesCustomOpenGraphImage() bool
	// Indicates the repository's visibility level.
	GetVisibility() RepositoryVisibility
}

// Represents a object that belongs to a repository.
type RepositoryNode interface {
	IsRepositoryNode()
	// The repository associated with this node.
	GetRepository() Repository
}

// Represents an owner of a Repository.
type RepositoryOwner interface {
	IsRepositoryOwner()
	// A URL pointing to the owner's public avatar.
	GetAvatarURL() string
	GetID() string
	// The username used to login.
	GetLogin() string
	// A list of repositories that the user owns.
	GetRepositories() RepositoryConnection
	// Find Repository.
	GetRepository() *Repository
	// The HTTP URL for the owner.
	GetResourcePath() string
	// The HTTP URL for the owner.
	GetURL() string
}

// Types that can be requested reviewers.
type RequestedReviewer interface {
	IsRequestedReviewer()
}

// Represents a type that can be required by a pull request for merging.
type RequirableByPullRequest interface {
	IsRequirableByPullRequest()
	// Whether this is required to pass before merging for a specific pull request.
	GetIsRequired() bool
}

// Types that can be an actor.
type ReviewDismissalAllowanceActor interface {
	IsReviewDismissalAllowanceActor()
}

// Types which can be parameters for `RepositoryRule` objects.
type RuleParameters interface {
	IsRuleParameters()
}

// Types which can have `RepositoryRule` objects.
type RuleSource interface {
	IsRuleSource()
}

// The results of a search.
type SearchResultItem interface {
	IsSearchResultItem()
}

// Entities that can sponsor others via GitHub Sponsors
type Sponsor interface {
	IsSponsor()
}

// Entities that can sponsor or be sponsored through GitHub Sponsors.
type Sponsorable interface {
	IsSponsorable()
	// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
	GetEstimatedNextSponsorsPayoutInCents() int64
	// True if this user/organization has a GitHub Sponsors listing.
	GetHasSponsorsListing() bool
	// Whether the given account is sponsoring this user/organization.
	GetIsSponsoredBy() bool
	// True if the viewer is sponsored by this user/organization.
	GetIsSponsoringViewer() bool
	// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
	GetMonthlyEstimatedSponsorsIncomeInCents() int64
	// List of users and organizations this entity is sponsoring.
	GetSponsoring() SponsorConnection
	// List of sponsors for this user or organization.
	GetSponsors() SponsorConnection
	// Events involving this sponsorable, such as new sponsorships.
	GetSponsorsActivities() SponsorsActivityConnection
	// The GitHub Sponsors listing for this user or organization.
	GetSponsorsListing() *SponsorsListing
	// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
	GetSponsorshipForViewerAsSponsor() *Sponsorship
	// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
	GetSponsorshipForViewerAsSponsorable() *Sponsorship
	// List of sponsorship updates sent from this sponsorable to sponsors.
	GetSponsorshipNewsletters() SponsorshipNewsletterConnection
	// The sponsorships where this user or organization is the maintainer receiving the funds.
	GetSponsorshipsAsMaintainer() SponsorshipConnection
	// The sponsorships where this user or organization is the funder.
	GetSponsorshipsAsSponsor() SponsorshipConnection
	// The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
	GetTotalSponsorshipAmountAsSponsorInCents() *int64
	// Whether or not the viewer is able to sponsor this user/organization.
	GetViewerCanSponsor() bool
	// True if the viewer is sponsoring this user/organization.
	GetViewerIsSponsoring() bool
}

// Entities that can be sponsored via GitHub Sponsors
type SponsorableItem interface {
	IsSponsorableItem()
}

// A record that can be featured on a GitHub Sponsors profile.
type SponsorsListingFeatureableItem interface {
	IsSponsorsListingFeatureableItem()
}

// Things that can be starred.
type Starrable interface {
	IsStarrable()
	GetID() string
	// Returns a count of how many stargazers there are on this object
	//
	GetStargazerCount() int64
	// A list of users who have starred this starrable.
	GetStargazers() StargazerConnection
	// Returns a boolean indicating whether the viewing user has starred this starrable.
	GetViewerHasStarred() bool
}

// Types that can be inside a StatusCheckRollup context.
type StatusCheckRollupContext interface {
	IsStatusCheckRollupContext()
}

// Entities that can be subscribed to for web and email notifications.
type Subscribable interface {
	IsSubscribable()
	GetID() string
	// Check if the viewer is able to change their subscription status for the repository.
	GetViewerCanSubscribe() bool
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	GetViewerSubscription() *SubscriptionState
}

// Entities that can be subscribed to for web and email notifications.
type SubscribableThread interface {
	IsSubscribableThread()
	GetID() string
	// Identifies the viewer's thread subscription form action.
	GetViewerThreadSubscriptionFormAction() *ThreadSubscriptionFormAction
	// Identifies the viewer's thread subscription status.
	GetViewerThreadSubscriptionStatus() *ThreadSubscriptionState
}

// Metadata for an audit entry with action team.*
type TeamAuditEntryData interface {
	IsTeamAuditEntryData()
	// The team associated with the action
	GetTeam() *Team
	// The name of the team
	GetTeamName() *string
	// The HTTP path for this team
	GetTeamResourcePath() *string
	// The HTTP URL for this team
	GetTeamURL() *string
}

// Metadata for an audit entry with a topic.
type TopicAuditEntryData interface {
	IsTopicAuditEntryData()
	// The name of the topic added to the repository
	GetTopic() *Topic
	// The name of the topic added to the repository
	GetTopicName() *string
}

// Represents a type that can be retrieved by a URL.
type UniformResourceLocatable interface {
	IsUniformResourceLocatable()
	// The HTML path to this resource.
	GetResourcePath() string
	// The URL to this resource.
	GetURL() string
}

// Entities that can be updated.
type Updatable interface {
	IsUpdatable()
	// Check if the current viewer can update this object.
	GetViewerCanUpdate() bool
}

// Comments that can be updated.
type UpdatableComment interface {
	IsUpdatableComment()
	// Reasons why the current viewer can not update this comment.
	GetViewerCannotUpdateReasons() []CommentCannotUpdateReason
}

// Types that can own a verifiable domain.
type VerifiableDomainOwner interface {
	IsVerifiableDomainOwner()
}

// A subject that may be upvoted.
type Votable interface {
	IsVotable()
	// Number of upvotes that this subject has received.
	GetUpvoteCount() int64
	// Whether or not the current user can add or remove an upvote on this subject.
	GetViewerCanUpvote() bool
	// Whether or not the current user has already upvoted this subject.
	GetViewerHasUpvoted() bool
}

// Autogenerated input type of AbortQueuedMigrations
type AbortQueuedMigrationsInput struct {
	// The ID of the organization that is running the migrations.
	OwnerID string `json:"ownerId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AbortQueuedMigrations
type AbortQueuedMigrationsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of AbortRepositoryMigration
type AbortRepositoryMigrationInput struct {
	// The ID of the migration to be aborted.
	MigrationID string `json:"migrationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AbortRepositoryMigration
type AbortRepositoryMigrationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of AcceptEnterpriseAdministratorInvitation
type AcceptEnterpriseAdministratorInvitationInput struct {
	// The id of the invitation being accepted
	InvitationID string `json:"invitationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AcceptEnterpriseAdministratorInvitation
type AcceptEnterpriseAdministratorInvitationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The invitation that was accepted.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
	// A message confirming the result of accepting an administrator invitation.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of AcceptTopicSuggestion
type AcceptTopicSuggestionInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the suggested topic.
	Name string `json:"name"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AcceptTopicSuggestion
type AcceptTopicSuggestionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The accepted topic.
	Topic *Topic `json:"topic,omitempty"`
}

// Location information for an actor
type ActorLocation struct {
	// City
	City *string `json:"city,omitempty"`
	// Country name
	Country *string `json:"country,omitempty"`
	// Country code
	CountryCode *string `json:"countryCode,omitempty"`
	// Region name
	Region *string `json:"region,omitempty"`
	// Region or state code
	RegionCode *string `json:"regionCode,omitempty"`
}

// Autogenerated input type of AddAssigneesToAssignable
type AddAssigneesToAssignableInput struct {
	// The id of the assignable object to add assignees to.
	AssignableID string `json:"assignableId"`
	// The id of users to add as assignees.
	AssigneeIds []string `json:"assigneeIds"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddAssigneesToAssignable
type AddAssigneesToAssignablePayload struct {
	// The item that was assigned.
	Assignable Assignable `json:"assignable,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of AddComment
type AddCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID string `json:"subjectId"`
	// The contents of the comment.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddComment
type AddCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The edge from the subject's comment connection.
	CommentEdge *IssueCommentEdge `json:"commentEdge,omitempty"`
	// The subject
	Subject Node `json:"subject,omitempty"`
	// The edge from the subject's timeline connection.
	TimelineEdge *IssueTimelineItemEdge `json:"timelineEdge,omitempty"`
}

// Autogenerated input type of AddDiscussionComment
type AddDiscussionCommentInput struct {
	// The Node ID of the discussion to comment on.
	DiscussionID string `json:"discussionId"`
	// The Node ID of the discussion comment within this discussion to reply to.
	ReplyToID *string `json:"replyToId,omitempty"`
	// The contents of the comment.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddDiscussionComment
type AddDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created discussion comment.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

// Autogenerated input type of AddDiscussionPollVote
type AddDiscussionPollVoteInput struct {
	// The Node ID of the discussion poll option to vote for.
	PollOptionID string `json:"pollOptionId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddDiscussionPollVote
type AddDiscussionPollVotePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The poll option that a vote was added to.
	PollOption *DiscussionPollOption `json:"pollOption,omitempty"`
}

// Autogenerated input type of AddEnterpriseOrganizationMember
type AddEnterpriseOrganizationMemberInput struct {
	// The ID of the enterprise which owns the organization.
	EnterpriseID string `json:"enterpriseId"`
	// The ID of the organization the users will be added to.
	OrganizationID string `json:"organizationId"`
	// The IDs of the enterprise members to add.
	UserIds []string `json:"userIds"`
	// The role to assign the users in the organization
	Role *OrganizationMemberRole `json:"role,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddEnterpriseOrganizationMember
type AddEnterpriseOrganizationMemberPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The users who were added to the organization.
	Users []*User `json:"users,omitempty"`
}

// Autogenerated input type of AddEnterpriseSupportEntitlement
type AddEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID string `json:"enterpriseId"`
	// The login of a member who will receive the support entitlement.
	Login string `json:"login"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddEnterpriseSupportEntitlement
type AddEnterpriseSupportEntitlementPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of adding the support entitlement.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of AddLabelsToLabelable
type AddLabelsToLabelableInput struct {
	// The id of the labelable object to add labels to.
	LabelableID string `json:"labelableId"`
	// The ids of the labels to add.
	LabelIds []string `json:"labelIds"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddLabelsToLabelable
type AddLabelsToLabelablePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item that was labeled.
	Labelable Labelable `json:"labelable,omitempty"`
}

// Autogenerated input type of AddProjectCard
type AddProjectCardInput struct {
	// The Node ID of the ProjectColumn.
	ProjectColumnID string `json:"projectColumnId"`
	// The content of the card. Must be a member of the ProjectCardItem union
	ContentID *string `json:"contentId,omitempty"`
	// The note on the card.
	Note *string `json:"note,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddProjectCard
type AddProjectCardPayload struct {
	// The edge from the ProjectColumn's card connection.
	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The ProjectColumn
	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
}

// Autogenerated input type of AddProjectColumn
type AddProjectColumnInput struct {
	// The Node ID of the project.
	ProjectID string `json:"projectId"`
	// The name of the column.
	Name string `json:"name"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddProjectColumn
type AddProjectColumnPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The edge from the project's column connection.
	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`
	// The project
	Project *Project `json:"project,omitempty"`
}

// Autogenerated input type of AddProjectV2DraftIssue
type AddProjectV2DraftIssueInput struct {
	// The ID of the Project to add the draft issue to.
	ProjectID string `json:"projectId"`
	// The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access.
	Title string `json:"title"`
	// The body of the draft issue.
	Body *string `json:"body,omitempty"`
	// The IDs of the assignees of the draft issue.
	AssigneeIds []string `json:"assigneeIds,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddProjectV2DraftIssue
type AddProjectV2DraftIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The draft issue added to the project.
	ProjectItem *ProjectV2Item `json:"projectItem,omitempty"`
}

// Autogenerated input type of AddProjectV2ItemById
type AddProjectV2ItemByIDInput struct {
	// The ID of the Project to add the item to.
	ProjectID string `json:"projectId"`
	// The id of the Issue or Pull Request to add.
	ContentID string `json:"contentId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddProjectV2ItemById
type AddProjectV2ItemByIDPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item added to the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

// Autogenerated input type of AddPullRequestReviewComment
type AddPullRequestReviewCommentInput struct {
	// The node ID of the pull request reviewing
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	PullRequestID *string `json:"pullRequestId,omitempty"`
	// The Node ID of the review to modify.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
	// The SHA of the commit to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	CommitOid *string `json:"commitOID,omitempty"`
	// The text of the comment. This field is required
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	Body *string `json:"body,omitempty"`
	// The relative path of the file to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	Path *string `json:"path,omitempty"`
	// The line index in the diff to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	Position *int64 `json:"position,omitempty"`
	// The comment id to reply to.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	//
	InReplyTo *string `json:"inReplyTo,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddPullRequestReviewComment
type AddPullRequestReviewCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created comment.
	Comment *PullRequestReviewComment `json:"comment,omitempty"`
	// The edge from the review's comment connection.
	CommentEdge *PullRequestReviewCommentEdge `json:"commentEdge,omitempty"`
}

// Autogenerated input type of AddPullRequestReview
type AddPullRequestReviewInput struct {
	// The Node ID of the pull request to modify.
	PullRequestID string `json:"pullRequestId"`
	// The commit OID the review pertains to.
	CommitOid *string `json:"commitOID,omitempty"`
	// The contents of the review body comment.
	Body *string `json:"body,omitempty"`
	// The event to perform on the pull request review.
	Event *PullRequestReviewEvent `json:"event,omitempty"`
	// The review line comments.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `comments` will be removed. use the `threads` argument instead
	// **Reason:** We are deprecating comment fields that use diff-relative positioning
	//
	Comments []*DraftPullRequestReviewComment `json:"comments,omitempty"`
	// The review line comment threads.
	Threads []*DraftPullRequestReviewThread `json:"threads,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddPullRequestReview
type AddPullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
	// The edge from the pull request's review connection.
	ReviewEdge *PullRequestReviewEdge `json:"reviewEdge,omitempty"`
}

// Autogenerated input type of AddPullRequestReviewThread
type AddPullRequestReviewThreadInput struct {
	// Path to the file being commented on.
	Path string `json:"path"`
	// Body of the thread's first comment.
	Body string `json:"body"`
	// The node ID of the pull request reviewing
	PullRequestID *string `json:"pullRequestId,omitempty"`
	// The Node ID of the review to modify.
	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
	// The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments.
	Line *int64 `json:"line,omitempty"`
	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	Side *DiffSide `json:"side,omitempty"`
	// The first line of the range to which the comment refers.
	StartLine *int64 `json:"startLine,omitempty"`
	// The side of the diff on which the start line resides.
	StartSide *DiffSide `json:"startSide,omitempty"`
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
	SubjectType *PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddPullRequestReviewThread
type AddPullRequestReviewThreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created thread.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

// Autogenerated input type of AddPullRequestReviewThreadReply
type AddPullRequestReviewThreadReplyInput struct {
	// The Node ID of the pending review to which the reply will belong.
	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
	// The Node ID of the thread to which this reply is being written.
	PullRequestReviewThreadID string `json:"pullRequestReviewThreadId"`
	// The text of the reply.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddPullRequestReviewThreadReply
type AddPullRequestReviewThreadReplyPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created reply.
	Comment *PullRequestReviewComment `json:"comment,omitempty"`
}

// Autogenerated input type of AddReaction
type AddReactionInput struct {
	// The Node ID of the subject to modify.
	SubjectID string `json:"subjectId"`
	// The name of the emoji to react with.
	Content ReactionContent `json:"content"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddReaction
type AddReactionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The reaction object.
	Reaction *Reaction `json:"reaction,omitempty"`
	// The reaction groups for the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// The reactable subject.
	Subject Reactable `json:"subject,omitempty"`
}

// Autogenerated input type of AddStar
type AddStarInput struct {
	// The Starrable ID to star.
	StarrableID string `json:"starrableId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddStar
type AddStarPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The starrable.
	Starrable Starrable `json:"starrable,omitempty"`
}

// Autogenerated input type of AddUpvote
type AddUpvoteInput struct {
	// The Node ID of the discussion or comment to upvote.
	SubjectID string `json:"subjectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddUpvote
type AddUpvotePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The votable subject.
	Subject Votable `json:"subject,omitempty"`
}

// Autogenerated input type of AddVerifiableDomain
type AddVerifiableDomainInput struct {
	// The ID of the owner to add the domain to
	OwnerID string `json:"ownerId"`
	// The URL of the domain
	Domain string `json:"domain"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of AddVerifiableDomain
type AddVerifiableDomainPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The verifiable domain that was added.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

// Represents an 'added_to_merge_queue' event on a given pull request.
type AddedToMergeQueueEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who added this Pull Request to the merge queue
	Enqueuer *User  `json:"enqueuer,omitempty"`
	ID       string `json:"id"`
	// The merge queue where this pull request was added to.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (AddedToMergeQueueEvent) IsNode() {}

// ID of the object.
func (this AddedToMergeQueueEvent) GetID() string { return this.ID }

func (AddedToMergeQueueEvent) IsPullRequestTimelineItems() {}

// Represents a 'added_to_project' event on a given issue or pull request.
type AddedToProjectEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
}

func (AddedToProjectEvent) IsIssueTimelineItems() {}

func (AddedToProjectEvent) IsNode() {}

// ID of the object.
func (this AddedToProjectEvent) GetID() string { return this.ID }

func (AddedToProjectEvent) IsPullRequestTimelineItems() {}

// A GitHub App.
type App struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The description of the app.
	Description *string `json:"description,omitempty"`
	ID          string  `json:"id"`
	// The IP addresses of the app.
	IPAllowListEntries IPAllowListEntryConnection `json:"ipAllowListEntries"`
	// The hex color code, without the leading '#', for the logo background.
	LogoBackgroundColor string `json:"logoBackgroundColor"`
	// A URL pointing to the app's logo.
	LogoURL string `json:"logoUrl"`
	// The name of the app.
	Name string `json:"name"`
	// A slug based on the name of the app for use in URLs.
	Slug string `json:"slug"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The URL to the app's homepage.
	URL string `json:"url"`
}

func (App) IsBranchActorAllowanceActor() {}

func (App) IsBypassActor() {}

func (App) IsIPAllowListOwner() {}

func (App) IsNode() {}

// ID of the object.
func (this App) GetID() string { return this.ID }

func (App) IsPushAllowanceActor() {}

func (App) IsReviewDismissalAllowanceActor() {}

func (App) IsSearchResultItem() {}

// Autogenerated input type of ApproveDeployments
type ApproveDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments.
	WorkflowRunID string `json:"workflowRunId"`
	// The ids of environments to reject deployments
	EnvironmentIds []string `json:"environmentIds"`
	// Optional comment for approving deployments
	Comment *string `json:"comment,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ApproveDeployments
type ApproveDeploymentsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The affected deployments.
	Deployments []*Deployment `json:"deployments,omitempty"`
}

// Autogenerated input type of ApproveVerifiableDomain
type ApproveVerifiableDomainInput struct {
	// The ID of the verifiable domain to approve.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ApproveVerifiableDomain
type ApproveVerifiableDomainPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The verifiable domain that was approved.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

// Autogenerated input type of ArchiveProjectV2Item
type ArchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from.
	ProjectID string `json:"projectId"`
	// The ID of the ProjectV2Item to archive.
	ItemID string `json:"itemId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ArchiveProjectV2Item
type ArchiveProjectV2ItemPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item archived from the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

// Autogenerated input type of ArchiveRepository
type ArchiveRepositoryInput struct {
	// The ID of the repository to mark as archived.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ArchiveRepository
type ArchiveRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository that was marked as archived.
	Repository *Repository `json:"repository,omitempty"`
}

// Represents an 'assigned' event on any assignable object.
type AssignedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the assignable associated with the event.
	Assignable Assignable `json:"assignable"`
	// Identifies the user or mannequin that was assigned.
	Assignee Assignee `json:"assignee,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the user who was assigned.
	User *User `json:"user,omitempty"`
}

func (AssignedEvent) IsIssueTimelineItem() {}

func (AssignedEvent) IsIssueTimelineItems() {}

func (AssignedEvent) IsNode() {}

// ID of the object.
func (this AssignedEvent) GetID() string { return this.ID }

func (AssignedEvent) IsPullRequestTimelineItem() {}

func (AssignedEvent) IsPullRequestTimelineItems() {}

// Ordering options for Audit Log connections.
type AuditLogOrder struct {
	// The field to order Audit Logs by.
	Field *AuditLogOrderField `json:"field,omitempty"`
	// The ordering direction.
	Direction *OrderDirection `json:"direction,omitempty"`
}

// Represents a 'auto_merge_disabled' event on a given pull request.
type AutoMergeDisabledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who disabled auto-merge for this Pull Request
	Disabler *User  `json:"disabler,omitempty"`
	ID       string `json:"id"`
	// PullRequest referenced by event
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// The reason auto-merge was disabled
	Reason *string `json:"reason,omitempty"`
	// The reason_code relating to why auto-merge was disabled
	ReasonCode *string `json:"reasonCode,omitempty"`
}

func (AutoMergeDisabledEvent) IsNode() {}

// ID of the object.
func (this AutoMergeDisabledEvent) GetID() string { return this.ID }

func (AutoMergeDisabledEvent) IsPullRequestTimelineItems() {}

// Represents a 'auto_merge_enabled' event on a given pull request.
type AutoMergeEnabledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who enabled auto-merge for this Pull Request
	Enabler *User  `json:"enabler,omitempty"`
	ID      string `json:"id"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (AutoMergeEnabledEvent) IsNode() {}

// ID of the object.
func (this AutoMergeEnabledEvent) GetID() string { return this.ID }

func (AutoMergeEnabledEvent) IsPullRequestTimelineItems() {}

// Represents an auto-merge request for a pull request
type AutoMergeRequest struct {
	// The email address of the author of this auto-merge request.
	AuthorEmail *string `json:"authorEmail,omitempty"`
	// The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
	CommitBody *string `json:"commitBody,omitempty"`
	// The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging
	CommitHeadline *string `json:"commitHeadline,omitempty"`
	// When was this auto-merge request was enabled.
	EnabledAt *string `json:"enabledAt,omitempty"`
	// The actor who created the auto-merge request.
	EnabledBy Actor `json:"enabledBy,omitempty"`
	// The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
	MergeMethod PullRequestMergeMethod `json:"mergeMethod"`
	// The pull request that this auto-merge request is set against.
	PullRequest PullRequest `json:"pullRequest"`
}

// Represents a 'auto_rebase_enabled' event on a given pull request.
type AutoRebaseEnabledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who enabled auto-merge (rebase) for this Pull Request
	Enabler *User  `json:"enabler,omitempty"`
	ID      string `json:"id"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (AutoRebaseEnabledEvent) IsNode() {}

// ID of the object.
func (this AutoRebaseEnabledEvent) GetID() string { return this.ID }

func (AutoRebaseEnabledEvent) IsPullRequestTimelineItems() {}

// Represents a 'auto_squash_enabled' event on a given pull request.
type AutoSquashEnabledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who enabled auto-merge (squash) for this Pull Request
	Enabler *User  `json:"enabler,omitempty"`
	ID      string `json:"id"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (AutoSquashEnabledEvent) IsNode() {}

// ID of the object.
func (this AutoSquashEnabledEvent) GetID() string { return this.ID }

func (AutoSquashEnabledEvent) IsPullRequestTimelineItems() {}

// Represents a 'automatic_base_change_failed' event on a given pull request.
type AutomaticBaseChangeFailedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The new base for this PR
	NewBase string `json:"newBase"`
	// The old base for this PR
	OldBase string `json:"oldBase"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (AutomaticBaseChangeFailedEvent) IsNode() {}

// ID of the object.
func (this AutomaticBaseChangeFailedEvent) GetID() string { return this.ID }

func (AutomaticBaseChangeFailedEvent) IsPullRequestTimelineItems() {}

// Represents a 'automatic_base_change_succeeded' event on a given pull request.
type AutomaticBaseChangeSucceededEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The new base for this PR
	NewBase string `json:"newBase"`
	// The old base for this PR
	OldBase string `json:"oldBase"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (AutomaticBaseChangeSucceededEvent) IsNode() {}

// ID of the object.
func (this AutomaticBaseChangeSucceededEvent) GetID() string { return this.ID }

func (AutomaticBaseChangeSucceededEvent) IsPullRequestTimelineItems() {}

// Represents a 'base_ref_changed' event on a given issue or pull request.
type BaseRefChangedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the name of the base ref for the pull request after it was changed.
	CurrentRefName string `json:"currentRefName"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// Identifies the name of the base ref for the pull request before it was changed.
	PreviousRefName string `json:"previousRefName"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (BaseRefChangedEvent) IsNode() {}

// ID of the object.
func (this BaseRefChangedEvent) GetID() string { return this.ID }

func (BaseRefChangedEvent) IsPullRequestTimelineItems() {}

// Represents a 'base_ref_deleted' event on a given pull request.
type BaseRefDeletedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the name of the Ref associated with the `base_ref_deleted` event.
	BaseRefName *string `json:"baseRefName,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (BaseRefDeletedEvent) IsNode() {}

// ID of the object.
func (this BaseRefDeletedEvent) GetID() string { return this.ID }

func (BaseRefDeletedEvent) IsPullRequestTimelineItem() {}

func (BaseRefDeletedEvent) IsPullRequestTimelineItems() {}

// Represents a 'base_ref_force_pushed' event on a given pull request.
type BaseRefForcePushedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the after commit SHA for the 'base_ref_force_pushed' event.
	AfterCommit *Commit `json:"afterCommit,omitempty"`
	// Identifies the before commit SHA for the 'base_ref_force_pushed' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (BaseRefForcePushedEvent) IsNode() {}

// ID of the object.
func (this BaseRefForcePushedEvent) GetID() string { return this.ID }

func (BaseRefForcePushedEvent) IsPullRequestTimelineItem() {}

func (BaseRefForcePushedEvent) IsPullRequestTimelineItems() {}

// Represents a Git blame.
type Blame struct {
	// The list of ranges from a Git blame.
	Ranges []*BlameRange `json:"ranges"`
}

// Represents a range of information from a Git blame.
type BlameRange struct {
	// Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
	Age int64 `json:"age"`
	// Identifies the line author
	Commit Commit `json:"commit"`
	// The ending line for the range
	EndingLine int64 `json:"endingLine"`
	// The starting line for the range
	StartingLine int64 `json:"startingLine"`
}

// Represents a Git blob.
type Blob struct {
	// An abbreviated version of the Git object ID
	AbbreviatedOid string `json:"abbreviatedOid"`
	// Byte size of Blob object
	ByteSize int64 `json:"byteSize"`
	// The HTTP path for this Git object
	CommitResourcePath string `json:"commitResourcePath"`
	// The HTTP URL for this Git object
	CommitURL string `json:"commitUrl"`
	ID        string `json:"id"`
	// Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
	IsBinary *bool `json:"isBinary,omitempty"`
	// Indicates whether the contents is truncated
	IsTruncated bool `json:"isTruncated"`
	// The Git object ID
	Oid string `json:"oid"`
	// The Repository the Git object belongs to
	Repository Repository `json:"repository"`
	// UTF8 text data or null if the Blob is binary
	Text *string `json:"text,omitempty"`
}

func (Blob) IsGitObject() {}

// An abbreviated version of the Git object ID
func (this Blob) GetAbbreviatedOid() string { return this.AbbreviatedOid }

// The HTTP path for this Git object
func (this Blob) GetCommitResourcePath() string { return this.CommitResourcePath }

// The HTTP URL for this Git object
func (this Blob) GetCommitURL() string { return this.CommitURL }
func (this Blob) GetID() string        { return this.ID }

// The Git object ID
func (this Blob) GetOid() string { return this.Oid }

// The Repository the Git object belongs to
func (this Blob) GetRepository() Repository { return this.Repository }

func (Blob) IsNode() {}

// ID of the object.

// A special type of user which takes actions on behalf of GitHub Apps.
type Bot struct {
	// A URL pointing to the GitHub App's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The username of the actor.
	Login string `json:"login"`
	// The HTTP path for this bot
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this bot
	URL string `json:"url"`
}

func (Bot) IsActor() {}

// A URL pointing to the actor's public avatar.
func (this Bot) GetAvatarURL() string { return this.AvatarURL }

// The username of the actor.
func (this Bot) GetLogin() string { return this.Login }

// The HTTP path for this actor.
func (this Bot) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this actor.
func (this Bot) GetURL() string { return this.URL }

func (Bot) IsAssignee() {}

func (Bot) IsAuditEntryActor() {}

func (Bot) IsNode() {}

// ID of the object.
func (this Bot) GetID() string { return this.ID }

func (Bot) IsReactor() {}

func (Bot) IsRequestedReviewer() {}

func (Bot) IsUniformResourceLocatable() {}

// The HTML path to this resource.

// The URL to this resource.

// Parameters to be used for the branch_name_pattern rule
type BranchNamePatternParameters struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

func (BranchNamePatternParameters) IsRuleParameters() {}

// Parameters to be used for the branch_name_pattern rule
type BranchNamePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate *bool `json:"negate,omitempty"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

// A branch protection rule.
type BranchProtectionRule struct {
	// Can this branch be deleted.
	AllowsDeletions bool `json:"allowsDeletions"`
	// Are force pushes allowed on this branch.
	AllowsForcePushes bool `json:"allowsForcePushes"`
	// Is branch creation a protected operation.
	BlocksCreations bool `json:"blocksCreations"`
	// A list of conflicts matching branches protection rule and other branch protection rules
	BranchProtectionRuleConflicts BranchProtectionRuleConflictConnection `json:"branchProtectionRuleConflicts"`
	// A list of actors able to force push for this branch protection rule.
	BypassForcePushAllowances BypassForcePushAllowanceConnection `json:"bypassForcePushAllowances"`
	// A list of actors able to bypass PRs for this branch protection rule.
	BypassPullRequestAllowances BypassPullRequestAllowanceConnection `json:"bypassPullRequestAllowances"`
	// The actor who created this branch protection rule.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews bool   `json:"dismissesStaleReviews"`
	ID                    string `json:"id"`
	// Can admins overwrite branch protection.
	IsAdminEnforced bool `json:"isAdminEnforced"`
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge bool `json:"lockAllowsFetchAndMerge"`
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch bool `json:"lockBranch"`
	// Repository refs that are protected by this rule
	MatchingRefs RefConnection `json:"matchingRefs"`
	// Identifies the protection rule pattern.
	Pattern string `json:"pattern"`
	// A list push allowances for this branch protection rule.
	PushAllowances PushAllowanceConnection `json:"pushAllowances"`
	// The repository associated with this branch protection rule.
	Repository *Repository `json:"repository,omitempty"`
	// Whether the most recent push must be approved by someone other than the person who pushed it
	RequireLastPushApproval bool `json:"requireLastPushApproval"`
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty"`
	// List of required deployment environments that must be deployed successfully to update matching branches
	RequiredDeploymentEnvironments []*string `json:"requiredDeploymentEnvironments,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts,omitempty"`
	// List of required status checks that must pass for commits to be accepted to matching branches.
	RequiredStatusChecks []*RequiredStatusCheckDescription `json:"requiredStatusChecks,omitempty"`
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews bool `json:"requiresApprovingReviews"`
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews"`
	// Are commits required to be signed.
	RequiresCommitSignatures bool `json:"requiresCommitSignatures"`
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution bool `json:"requiresConversationResolution"`
	// Does this branch require deployment to specific environments before merging
	RequiresDeployments bool `json:"requiresDeployments"`
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory bool `json:"requiresLinearHistory"`
	// Are status checks required to update matching branches.
	RequiresStatusChecks bool `json:"requiresStatusChecks"`
	// Are branches required to be up to date before merging.
	RequiresStrictStatusChecks bool `json:"requiresStrictStatusChecks"`
	// Is pushing to matching branches restricted.
	RestrictsPushes bool `json:"restrictsPushes"`
	// Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals bool `json:"restrictsReviewDismissals"`
	// A list review dismissal allowances for this branch protection rule.
	ReviewDismissalAllowances ReviewDismissalAllowanceConnection `json:"reviewDismissalAllowances"`
}

func (BranchProtectionRule) IsNode() {}

// ID of the object.
func (this BranchProtectionRule) GetID() string { return this.ID }

// A conflict between two branch protection rules.
type BranchProtectionRuleConflict struct {
	// Identifies the branch protection rule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	// Identifies the conflicting branch protection rule.
	ConflictingBranchProtectionRule *BranchProtectionRule `json:"conflictingBranchProtectionRule,omitempty"`
	// Identifies the branch ref that has conflicting rules
	Ref *Ref `json:"ref,omitempty"`
}

// The connection type for BranchProtectionRuleConflict.
type BranchProtectionRuleConflictConnection struct {
	// A list of edges.
	Edges []*BranchProtectionRuleConflictEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*BranchProtectionRuleConflict `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type BranchProtectionRuleConflictEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *BranchProtectionRuleConflict `json:"node,omitempty"`
}

// The connection type for BranchProtectionRule.
type BranchProtectionRuleConnection struct {
	// A list of edges.
	Edges []*BranchProtectionRuleEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*BranchProtectionRule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type BranchProtectionRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *BranchProtectionRule `json:"node,omitempty"`
}

// Information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once.
type BulkSponsorship struct {
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *string `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
	Amount int64 `json:"amount"`
}

// A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
type BypassForcePushAllowance struct {
	// The actor that can force push.
	Actor BranchActorAllowanceActor `json:"actor,omitempty"`
	// Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	ID                   string                `json:"id"`
}

func (BypassForcePushAllowance) IsNode() {}

// ID of the object.
func (this BypassForcePushAllowance) GetID() string { return this.ID }

// The connection type for BypassForcePushAllowance.
type BypassForcePushAllowanceConnection struct {
	// A list of edges.
	Edges []*BypassForcePushAllowanceEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*BypassForcePushAllowance `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type BypassForcePushAllowanceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *BypassForcePushAllowance `json:"node,omitempty"`
}

// A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
type BypassPullRequestAllowance struct {
	// The actor that can bypass.
	Actor BranchActorAllowanceActor `json:"actor,omitempty"`
	// Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	ID                   string                `json:"id"`
}

func (BypassPullRequestAllowance) IsNode() {}

// ID of the object.
func (this BypassPullRequestAllowance) GetID() string { return this.ID }

// The connection type for BypassPullRequestAllowance.
type BypassPullRequestAllowanceConnection struct {
	// A list of edges.
	Edges []*BypassPullRequestAllowanceEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*BypassPullRequestAllowance `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type BypassPullRequestAllowanceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *BypassPullRequestAllowance `json:"node,omitempty"`
}

// The Common Vulnerability Scoring System
type Cvss struct {
	// The CVSS score associated with this advisory
	Score float64 `json:"score"`
	// The CVSS vector string associated with this advisory
	VectorString *string `json:"vectorString,omitempty"`
}

// A common weakness enumeration
type Cwe struct {
	// The id of the CWE
	CweID string `json:"cweId"`
	// A detailed description of this CWE
	Description string `json:"description"`
	ID          string `json:"id"`
	// The name of this CWE
	Name string `json:"name"`
}

func (Cwe) IsNode() {}

// ID of the object.
func (this Cwe) GetID() string { return this.ID }

// The connection type for CWE.
type CWEConnection struct {
	// A list of edges.
	Edges []*CWEEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Cwe `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CWEEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Cwe `json:"node,omitempty"`
}

// Autogenerated input type of CancelEnterpriseAdminInvitation
type CancelEnterpriseAdminInvitationInput struct {
	// The Node ID of the pending enterprise administrator invitation.
	InvitationID string `json:"invitationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CancelEnterpriseAdminInvitation
type CancelEnterpriseAdminInvitationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The invitation that was canceled.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
	// A message confirming the result of canceling an administrator invitation.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of CancelSponsorship
type CancelSponsorshipInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *string `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *string `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CancelSponsorship
type CancelSponsorshipPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The tier that was being used at the time of cancellation.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

// Autogenerated input type of ChangeUserStatus
type ChangeUserStatusInput struct {
	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
	Emoji *string `json:"emoji,omitempty"`
	// A short description of your current status.
	Message *string `json:"message,omitempty"`
	// The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
	OrganizationID *string `json:"organizationId,omitempty"`
	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
	LimitedAvailability *bool `json:"limitedAvailability,omitempty"`
	// If set, the user status will not be shown after this date.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ChangeUserStatus
type ChangeUserStatusPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Your updated status.
	Status *UserStatus `json:"status,omitempty"`
}

// A single check annotation.
type CheckAnnotation struct {
	// The annotation's severity level.
	AnnotationLevel *CheckAnnotationLevel `json:"annotationLevel,omitempty"`
	// The path to the file that this annotation was made on.
	BlobURL string `json:"blobUrl"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The position of this annotation.
	Location CheckAnnotationSpan `json:"location"`
	// The annotation's message.
	Message string `json:"message"`
	// The path that this annotation was made on.
	Path string `json:"path"`
	// Additional information about the annotation.
	RawDetails *string `json:"rawDetails,omitempty"`
	// The annotation's title
	Title *string `json:"title,omitempty"`
}

// The connection type for CheckAnnotation.
type CheckAnnotationConnection struct {
	// A list of edges.
	Edges []*CheckAnnotationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CheckAnnotation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Information from a check run analysis to specific lines of code.
type CheckAnnotationData struct {
	// The path of the file to add an annotation to.
	Path string `json:"path"`
	// The location of the annotation
	Location CheckAnnotationRange `json:"location"`
	// Represents an annotation's information level
	AnnotationLevel CheckAnnotationLevel `json:"annotationLevel"`
	// A short description of the feedback for these lines of code.
	Message string `json:"message"`
	// The title that represents the annotation.
	Title *string `json:"title,omitempty"`
	// Details about this annotation.
	RawDetails *string `json:"rawDetails,omitempty"`
}

// An edge in a connection.
type CheckAnnotationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CheckAnnotation `json:"node,omitempty"`
}

// A character position in a check annotation.
type CheckAnnotationPosition struct {
	// Column number (1 indexed).
	Column *int64 `json:"column,omitempty"`
	// Line number (1 indexed).
	Line int64 `json:"line"`
}

// Information from a check run analysis to specific lines of code.
type CheckAnnotationRange struct {
	// The starting line of the range.
	StartLine int64 `json:"startLine"`
	// The starting column of the range.
	StartColumn *int64 `json:"startColumn,omitempty"`
	// The ending line of the range.
	EndLine int64 `json:"endLine"`
	// The ending column of the range.
	EndColumn *int64 `json:"endColumn,omitempty"`
}

// An inclusive pair of positions for a check annotation.
type CheckAnnotationSpan struct {
	// End position (inclusive).
	End CheckAnnotationPosition `json:"end"`
	// Start position (inclusive).
	Start CheckAnnotationPosition `json:"start"`
}

// A check run.
type CheckRun struct {
	// The check run's annotations
	Annotations *CheckAnnotationConnection `json:"annotations,omitempty"`
	// The check suite that this run is a part of.
	CheckSuite CheckSuite `json:"checkSuite"`
	// Identifies the date and time when the check run was completed.
	CompletedAt *string `json:"completedAt,omitempty"`
	// The conclusion of the check run.
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The corresponding deployment for this job, if any
	Deployment *Deployment `json:"deployment,omitempty"`
	// The URL from which to find full details of the check run on the integrator's site.
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// A reference for the check run on the integrator's system.
	ExternalID *string `json:"externalId,omitempty"`
	ID         string  `json:"id"`
	// Whether this is required to pass before merging for a specific pull request.
	IsRequired bool `json:"isRequired"`
	// The name of the check for this check run.
	Name string `json:"name"`
	// Information about a pending deployment, if any, in this check run
	PendingDeploymentRequest *DeploymentRequest `json:"pendingDeploymentRequest,omitempty"`
	// The permalink to the check run summary.
	Permalink string `json:"permalink"`
	// The repository associated with this check run.
	Repository Repository `json:"repository"`
	// The HTTP path for this check run.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the check run was started.
	StartedAt *string `json:"startedAt,omitempty"`
	// The current status of the check run.
	Status CheckStatusState `json:"status"`
	// The check run's steps
	Steps *CheckStepConnection `json:"steps,omitempty"`
	// A string representing the check run's summary
	Summary *string `json:"summary,omitempty"`
	// A string representing the check run's text
	Text *string `json:"text,omitempty"`
	// A string representing the check run
	Title *string `json:"title,omitempty"`
	// The HTTP URL for this check run.
	URL string `json:"url"`
}

func (CheckRun) IsNode() {}

// ID of the object.
func (this CheckRun) GetID() string { return this.ID }

func (CheckRun) IsRequirableByPullRequest() {}

// Whether this is required to pass before merging for a specific pull request.
func (this CheckRun) GetIsRequired() bool { return this.IsRequired }

func (CheckRun) IsStatusCheckRollupContext() {}

func (CheckRun) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this CheckRun) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this CheckRun) GetURL() string { return this.URL }

// Possible further actions the integrator can perform.
type CheckRunAction struct {
	// The text to be displayed on a button in the web UI.
	Label string `json:"label"`
	// A short explanation of what this action would do.
	Description string `json:"description"`
	// A reference for the action on the integrator's system.
	Identifier string `json:"identifier"`
}

// The connection type for CheckRun.
type CheckRunConnection struct {
	// A list of edges.
	Edges []*CheckRunEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CheckRun `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CheckRunEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CheckRun `json:"node,omitempty"`
}

// The filters that are available when fetching check runs.
type CheckRunFilter struct {
	// Filters the check runs by this type.
	CheckType *CheckRunType `json:"checkType,omitempty"`
	// Filters the check runs created by this application ID.
	AppID *int64 `json:"appId,omitempty"`
	// Filters the check runs by this name.
	CheckName *string `json:"checkName,omitempty"`
	// Filters the check runs by this status. Superceded by statuses.
	Status *CheckStatusState `json:"status,omitempty"`
	// Filters the check runs by this status. Overrides status.
	Statuses []CheckStatusState `json:"statuses,omitempty"`
	// Filters the check runs by these conclusions.
	Conclusions []CheckConclusionState `json:"conclusions,omitempty"`
}

// Descriptive details about the check run.
type CheckRunOutput struct {
	// A title to provide for this check run.
	Title string `json:"title"`
	// The summary of the check run (supports Commonmark).
	Summary string `json:"summary"`
	// The details of the check run (supports Commonmark).
	Text *string `json:"text,omitempty"`
	// The annotations that are made as part of the check run.
	Annotations []*CheckAnnotationData `json:"annotations,omitempty"`
	// Images attached to the check run output displayed in the GitHub pull request UI.
	Images []*CheckRunOutputImage `json:"images,omitempty"`
}

// Images attached to the check run output displayed in the GitHub pull request UI.
type CheckRunOutputImage struct {
	// The alternative text for the image.
	Alt string `json:"alt"`
	// The full URL of the image.
	ImageURL string `json:"imageUrl"`
	// A short image description.
	Caption *string `json:"caption,omitempty"`
}

// Represents a count of the state of a check run.
type CheckRunStateCount struct {
	// The number of check runs with this state.
	Count int64 `json:"count"`
	// The state of a check run.
	State CheckRunState `json:"state"`
}

// A single check step.
type CheckStep struct {
	// Identifies the date and time when the check step was completed.
	CompletedAt *string `json:"completedAt,omitempty"`
	// The conclusion of the check step.
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// A reference for the check step on the integrator's system.
	ExternalID *string `json:"externalId,omitempty"`
	// The step's name.
	Name string `json:"name"`
	// The index of the step in the list of steps of the parent check run.
	Number int64 `json:"number"`
	// Number of seconds to completion.
	SecondsToCompletion *int64 `json:"secondsToCompletion,omitempty"`
	// Identifies the date and time when the check step was started.
	StartedAt *string `json:"startedAt,omitempty"`
	// The current status of the check step.
	Status CheckStatusState `json:"status"`
}

// The connection type for CheckStep.
type CheckStepConnection struct {
	// A list of edges.
	Edges []*CheckStepEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CheckStep `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CheckStepEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CheckStep `json:"node,omitempty"`
}

// A check suite.
type CheckSuite struct {
	// The GitHub App which created this check suite.
	App *App `json:"app,omitempty"`
	// The name of the branch for this check suite.
	Branch *Ref `json:"branch,omitempty"`
	// The check runs associated with a check suite.
	CheckRuns *CheckRunConnection `json:"checkRuns,omitempty"`
	// The commit for this check suite
	Commit Commit `json:"commit"`
	// The conclusion of this check suite.
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who triggered the check suite.
	Creator *User `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// A list of open pull requests matching the check suite.
	MatchingPullRequests *PullRequestConnection `json:"matchingPullRequests,omitempty"`
	// The push that triggered this check suite.
	Push *Push `json:"push,omitempty"`
	// The repository associated with this check suite.
	Repository Repository `json:"repository"`
	// The HTTP path for this check suite
	ResourcePath string `json:"resourcePath"`
	// The status of this check suite.
	Status CheckStatusState `json:"status"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this check suite
	URL string `json:"url"`
	// The workflow run associated with this check suite.
	WorkflowRun *WorkflowRun `json:"workflowRun,omitempty"`
}

func (CheckSuite) IsNode() {}

// ID of the object.
func (this CheckSuite) GetID() string { return this.ID }

func (CheckSuite) IsNotificationsSubject() {}

// The auto-trigger preferences that are available for check suites.
type CheckSuiteAutoTriggerPreference struct {
	// The node ID of the application that owns the check suite.
	AppID string `json:"appId"`
	// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
	Setting bool `json:"setting"`
}

// The connection type for CheckSuite.
type CheckSuiteConnection struct {
	// A list of edges.
	Edges []*CheckSuiteEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CheckSuite `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CheckSuiteEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CheckSuite `json:"node,omitempty"`
}

// The filters that are available when fetching check suites.
type CheckSuiteFilter struct {
	// Filters the check suites created by this application ID.
	AppID *int64 `json:"appId,omitempty"`
	// Filters the check suites by this name.
	CheckName *string `json:"checkName,omitempty"`
}

// Autogenerated input type of ClearLabelsFromLabelable
type ClearLabelsFromLabelableInput struct {
	// The id of the labelable object to clear the labels from.
	LabelableID string `json:"labelableId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ClearLabelsFromLabelable
type ClearLabelsFromLabelablePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item that was unlabeled.
	Labelable Labelable `json:"labelable,omitempty"`
}

// Autogenerated input type of ClearProjectV2ItemFieldValue
type ClearProjectV2ItemFieldValueInput struct {
	// The ID of the Project.
	ProjectID string `json:"projectId"`
	// The ID of the item to be cleared.
	ItemID string `json:"itemId"`
	// The ID of the field to be cleared.
	FieldID string `json:"fieldId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ClearProjectV2ItemFieldValue
type ClearProjectV2ItemFieldValuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated item.
	ProjectV2Item *ProjectV2Item `json:"projectV2Item,omitempty"`
}

// Autogenerated input type of CloneProject
type CloneProjectInput struct {
	// The owner ID to create the project under.
	TargetOwnerID string `json:"targetOwnerId"`
	// The source project to clone.
	SourceID string `json:"sourceId"`
	// Whether or not to clone the source project's workflows.
	IncludeWorkflows bool `json:"includeWorkflows"`
	// The name of the project.
	Name string `json:"name"`
	// The description of the project.
	Body *string `json:"body,omitempty"`
	// The visibility of the project, defaults to false (private).
	Public *bool `json:"public,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CloneProject
type CloneProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The id of the JobStatus for populating cloned fields.
	JobStatusID *string `json:"jobStatusId,omitempty"`
	// The new cloned project.
	Project *Project `json:"project,omitempty"`
}

// Autogenerated input type of CloneTemplateRepository
type CloneTemplateRepositoryInput struct {
	// The Node ID of the template repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the new repository.
	Name string `json:"name"`
	// The ID of the owner for the new repository.
	OwnerID string `json:"ownerId"`
	// A short description of the new repository.
	Description *string `json:"description,omitempty"`
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility `json:"visibility"`
	// Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
	IncludeAllBranches *bool `json:"includeAllBranches,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CloneTemplateRepository
type CloneTemplateRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of CloseDiscussion
type CloseDiscussionInput struct {
	// ID of the discussion to be closed.
	DiscussionID string `json:"discussionId"`
	// The reason why the discussion is being closed.
	Reason *DiscussionCloseReason `json:"reason,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CloseDiscussion
type CloseDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that was closed.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of CloseIssue
type CloseIssueInput struct {
	// ID of the issue to be closed.
	IssueID string `json:"issueId"`
	// The reason the issue is to be closed.
	StateReason *IssueClosedStateReason `json:"stateReason,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CloseIssue
type CloseIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was closed.
	Issue *Issue `json:"issue,omitempty"`
}

// Autogenerated input type of ClosePullRequest
type ClosePullRequestInput struct {
	// ID of the pull request to be closed.
	PullRequestID string `json:"pullRequestId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ClosePullRequest
type ClosePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that was closed.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Represents a 'closed' event on any `Closable`.
type ClosedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Object that was closed.
	Closable Closable `json:"closable"`
	// Object which triggered the creation of this event.
	Closer Closer `json:"closer,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The HTTP path for this closed event.
	ResourcePath string `json:"resourcePath"`
	// The reason the issue state was changed to closed.
	StateReason *IssueStateReason `json:"stateReason,omitempty"`
	// The HTTP URL for this closed event.
	URL string `json:"url"`
}

func (ClosedEvent) IsIssueTimelineItem() {}

func (ClosedEvent) IsIssueTimelineItems() {}

func (ClosedEvent) IsNode() {}

// ID of the object.
func (this ClosedEvent) GetID() string { return this.ID }

func (ClosedEvent) IsPullRequestTimelineItem() {}

func (ClosedEvent) IsPullRequestTimelineItems() {}

func (ClosedEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this ClosedEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this ClosedEvent) GetURL() string { return this.URL }

// The Code of Conduct for a repository
type CodeOfConduct struct {
	// The body of the Code of Conduct
	Body *string `json:"body,omitempty"`
	ID   string  `json:"id"`
	// The key for the Code of Conduct
	Key string `json:"key"`
	// The formal name of the Code of Conduct
	Name string `json:"name"`
	// The HTTP path for this Code of Conduct
	ResourcePath *string `json:"resourcePath,omitempty"`
	// The HTTP URL for this Code of Conduct
	URL *string `json:"url,omitempty"`
}

func (CodeOfConduct) IsNode() {}

// ID of the object.
func (this CodeOfConduct) GetID() string { return this.ID }

// Represents a 'comment_deleted' event on a given issue or pull request.
type CommentDeletedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The user who authored the deleted comment.
	DeletedCommentAuthor Actor  `json:"deletedCommentAuthor,omitempty"`
	ID                   string `json:"id"`
}

func (CommentDeletedEvent) IsIssueTimelineItems() {}

func (CommentDeletedEvent) IsNode() {}

// ID of the object.
func (this CommentDeletedEvent) GetID() string { return this.ID }

func (CommentDeletedEvent) IsPullRequestTimelineItems() {}

// Represents a Git commit.
type Commit struct {
	// An abbreviated version of the Git object ID
	AbbreviatedOid string `json:"abbreviatedOid"`
	// The number of additions in this commit.
	Additions int64 `json:"additions"`
	// The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests,omitempty"`
	// Authorship details of the commit.
	Author *GitActor `json:"author,omitempty"`
	// Check if the committer and the author match.
	AuthoredByCommitter bool `json:"authoredByCommitter"`
	// The datetime when this commit was authored.
	AuthoredDate string `json:"authoredDate"`
	// The list of authors for this commit based on the git author and the Co-authored-by
	// message trailer. The git author will always be first.
	//
	Authors GitActorConnection `json:"authors"`
	// Fetches `git blame` information.
	Blame Blame `json:"blame"`
	// We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
	ChangedFiles int64 `json:"changedFiles"`
	// The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`.
	ChangedFilesIfAvailable *int64 `json:"changedFilesIfAvailable,omitempty"`
	// The check suites associated with a commit.
	CheckSuites *CheckSuiteConnection `json:"checkSuites,omitempty"`
	// Comments made on the commit.
	Comments CommitCommentConnection `json:"comments"`
	// The HTTP path for this Git object
	CommitResourcePath string `json:"commitResourcePath"`
	// The HTTP URL for this Git object
	CommitURL string `json:"commitUrl"`
	// The datetime when this commit was committed.
	CommittedDate string `json:"committedDate"`
	// Check if committed via GitHub web UI.
	CommittedViaWeb bool `json:"committedViaWeb"`
	// Committer details of the commit.
	Committer *GitActor `json:"committer,omitempty"`
	// The number of deletions in this commit.
	Deletions int64 `json:"deletions"`
	// The deployments associated with a commit.
	Deployments *DeploymentConnection `json:"deployments,omitempty"`
	// The tree entry representing the file located at the given path.
	File *TreeEntry `json:"file,omitempty"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History CommitHistoryConnection `json:"history"`
	ID      string                  `json:"id"`
	// The Git commit message
	Message string `json:"message"`
	// The Git commit message body
	MessageBody string `json:"messageBody"`
	// The commit message body rendered to HTML.
	MessageBodyHTML string `json:"messageBodyHTML"`
	// The Git commit message headline
	MessageHeadline string `json:"messageHeadline"`
	// The commit message headline rendered to HTML.
	MessageHeadlineHTML string `json:"messageHeadlineHTML"`
	// The Git object ID
	Oid string `json:"oid"`
	// The organization this commit was made on behalf of.
	OnBehalfOf *Organization `json:"onBehalfOf,omitempty"`
	// The parents of a commit.
	Parents CommitConnection `json:"parents"`
	// The datetime when this commit was pushed.
	PushedDate *string `json:"pushedDate,omitempty"`
	// The Repository this commit belongs to
	Repository Repository `json:"repository"`
	// The HTTP path for this commit
	ResourcePath string `json:"resourcePath"`
	// Commit signing information, if present.
	Signature GitSignature `json:"signature,omitempty"`
	// Status information for this commit
	Status *Status `json:"status,omitempty"`
	// Check and Status rollup information for this commit.
	StatusCheckRollup *StatusCheckRollup `json:"statusCheckRollup,omitempty"`
	// Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
	Submodules SubmoduleConnection `json:"submodules"`
	// Returns a URL to download a tarball archive for a repository.
	// Note: For private repositories, these links are temporary and expire after five minutes.
	TarballURL string `json:"tarballUrl"`
	// Commit's root Tree
	Tree Tree `json:"tree"`
	// The HTTP path for the tree of this commit
	TreeResourcePath string `json:"treeResourcePath"`
	// The HTTP URL for the tree of this commit
	TreeURL string `json:"treeUrl"`
	// The HTTP URL for this commit
	URL string `json:"url"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
	// Returns a URL to download a zipball archive for a repository.
	// Note: For private repositories, these links are temporary and expire after five minutes.
	ZipballURL string `json:"zipballUrl"`
}

func (Commit) IsCloser() {}

func (Commit) IsGitObject() {}

// An abbreviated version of the Git object ID
func (this Commit) GetAbbreviatedOid() string { return this.AbbreviatedOid }

// The HTTP path for this Git object
func (this Commit) GetCommitResourcePath() string { return this.CommitResourcePath }

// The HTTP URL for this Git object
func (this Commit) GetCommitURL() string { return this.CommitURL }
func (this Commit) GetID() string        { return this.ID }

// The Git object ID
func (this Commit) GetOid() string { return this.Oid }

// The Repository the Git object belongs to
func (this Commit) GetRepository() Repository { return this.Repository }

func (Commit) IsIssueTimelineItem() {}

func (Commit) IsNode() {}

// ID of the object.

func (Commit) IsNotificationsSubject() {}

func (Commit) IsPullRequestTimelineItem() {}

func (Commit) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this Commit) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this Commit) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (Commit) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Commit) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Commit) GetURL() string { return this.URL }

// Specifies an author for filtering Git commits.
type CommitAuthor struct {
	// ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
	ID *string `json:"id,omitempty"`
	// Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
	Emails []string `json:"emails,omitempty"`
}

// Parameters to be used for the commit_author_email_pattern rule
type CommitAuthorEmailPatternParameters struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

func (CommitAuthorEmailPatternParameters) IsRuleParameters() {}

// Parameters to be used for the commit_author_email_pattern rule
type CommitAuthorEmailPatternParametersInput struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate *bool `json:"negate,omitempty"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

// Represents a comment on a given Commit.
type CommitComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// Identifies the comment body.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the commit associated with the comment, if the commit exists.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// Identifies the file path associated with the comment.
	Path *string `json:"path,omitempty"`
	// Identifies the line position associated with the comment.
	Position *int64 `json:"position,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path permalink for this commit comment.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL permalink for this commit comment.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (CommitComment) IsComment() {}

// The actor who authored the comment.
func (this CommitComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this CommitComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this CommitComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this CommitComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this CommitComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this CommitComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this CommitComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this CommitComment) GetEditor() Actor { return this.Editor }
func (this CommitComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this CommitComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this CommitComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this CommitComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this CommitComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this CommitComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this CommitComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (CommitComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this CommitComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (CommitComment) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this CommitComment) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this CommitComment) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this CommitComment) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (CommitComment) IsNode() {}

// ID of the object.

func (CommitComment) IsReactable() {}

// Identifies the primary key from the database.
func (this CommitComment) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this CommitComment) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this CommitComment) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this CommitComment) GetViewerCanReact() bool { return this.ViewerCanReact }

func (CommitComment) IsRepositoryNode() {}

// The repository associated with this node.
func (this CommitComment) GetRepository() Repository { return this.Repository }

func (CommitComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this CommitComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (CommitComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this CommitComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The connection type for CommitComment.
type CommitCommentConnection struct {
	// A list of edges.
	Edges []*CommitCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CommitComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CommitCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CommitComment `json:"node,omitempty"`
}

// A thread of comments on a commit.
type CommitCommentThread struct {
	// The comments that exist in this thread.
	Comments CommitCommentConnection `json:"comments"`
	// The commit the comments were made on.
	Commit *Commit `json:"commit,omitempty"`
	ID     string  `json:"id"`
	// The file the comments were made on.
	Path *string `json:"path,omitempty"`
	// The position in the diff for the commit that the comment was made on.
	Position *int64 `json:"position,omitempty"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
}

func (CommitCommentThread) IsNode() {}

// ID of the object.
func (this CommitCommentThread) GetID() string { return this.ID }

func (CommitCommentThread) IsPullRequestTimelineItem() {}

func (CommitCommentThread) IsRepositoryNode() {}

// The repository associated with this node.
func (this CommitCommentThread) GetRepository() Repository { return this.Repository }

// The connection type for Commit.
type CommitConnection struct {
	// A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Ordering options for commit contribution connections.
type CommitContributionOrder struct {
	// The field by which to order commit contributions.
	Field CommitContributionOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// This aggregates commits made by a user within one repository.
type CommitContributionsByRepository struct {
	// The commit contributions, each representing a day.
	Contributions CreatedCommitContributionConnection `json:"contributions"`
	// The repository in which the commits were made.
	Repository Repository `json:"repository"`
	// The HTTP path for the user's commits to the repository in this time range.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for the user's commits to the repository in this time range.
	URL string `json:"url"`
}

// An edge in a connection.
type CommitEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Commit `json:"node,omitempty"`
}

// The connection type for Commit.
type CommitHistoryConnection struct {
	// A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A message to include with a new commit
type CommitMessage struct {
	// The headline of the message.
	Headline string `json:"headline"`
	// The body of the message.
	Body *string `json:"body,omitempty"`
}

// Parameters to be used for the commit_message_pattern rule
type CommitMessagePatternParameters struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

func (CommitMessagePatternParameters) IsRuleParameters() {}

// Parameters to be used for the commit_message_pattern rule
type CommitMessagePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate *bool `json:"negate,omitempty"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

// A git ref for a commit to be appended to.
//
// The ref must be a branch, i.e. its fully qualified name must start
// with `refs/heads/` (although the input is not required to be fully
// qualified).
//
// The Ref may be specified by its global node ID or by the
// `repositoryNameWithOwner` and `branchName`.
//
// ### Examples
//
// Specify a branch using a global node ID:
//
//	{ "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
//
// Specify a branch using `repositoryNameWithOwner` and `branchName`:
//
//	{
//	  "repositoryNameWithOwner": "github/graphql-client",
//	  "branchName": "main"
//	}
type CommittableBranch struct {
	// The Node ID of the Ref to be updated.
	ID *string `json:"id,omitempty"`
	// The nameWithOwner of the repository to commit to.
	RepositoryNameWithOwner *string `json:"repositoryNameWithOwner,omitempty"`
	// The unqualified name of the branch to append the commit to.
	BranchName *string `json:"branchName,omitempty"`
}

// Parameters to be used for the committer_email_pattern rule
type CommitterEmailPatternParameters struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

func (CommitterEmailPatternParameters) IsRuleParameters() {}

// Parameters to be used for the committer_email_pattern rule
type CommitterEmailPatternParametersInput struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate *bool `json:"negate,omitempty"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

// Represents a comparison between two commit revisions.
type Comparison struct {
	// The number of commits ahead of the base branch.
	AheadBy int64 `json:"aheadBy"`
	// The base revision of this comparison.
	BaseTarget GitObject `json:"baseTarget"`
	// The number of commits behind the base branch.
	BehindBy int64 `json:"behindBy"`
	// The commits which compose this comparison.
	Commits ComparisonCommitConnection `json:"commits"`
	// The head revision of this comparison.
	HeadTarget GitObject `json:"headTarget"`
	ID         string    `json:"id"`
	// The status of this comparison.
	Status ComparisonStatus `json:"status"`
}

func (Comparison) IsNode() {}

// ID of the object.
func (this Comparison) GetID() string { return this.ID }

// The connection type for Commit.
type ComparisonCommitConnection struct {
	// The total count of authors and co-authors across all commits.
	AuthorCount int64 `json:"authorCount"`
	// A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a 'connected' event on a given issue or pull request.
type ConnectedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository"`
	// Issue or pull request that made the reference.
	Source ReferencedSubject `json:"source"`
	// Issue or pull request which was connected.
	Subject ReferencedSubject `json:"subject"`
}

func (ConnectedEvent) IsIssueTimelineItems() {}

func (ConnectedEvent) IsNode() {}

// ID of the object.
func (this ConnectedEvent) GetID() string { return this.ID }

func (ConnectedEvent) IsPullRequestTimelineItems() {}

// The Contributing Guidelines for a repository.
type ContributingGuidelines struct {
	// The body of the Contributing Guidelines.
	Body *string `json:"body,omitempty"`
	// The HTTP path for the Contributing Guidelines.
	ResourcePath *string `json:"resourcePath,omitempty"`
	// The HTTP URL for the Contributing Guidelines.
	URL *string `json:"url,omitempty"`
}

// A calendar of contributions made on GitHub by a user.
type ContributionCalendar struct {
	// A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
	Colors []string `json:"colors"`
	// Determine if the color set was chosen because it's currently Halloween.
	IsHalloween bool `json:"isHalloween"`
	// A list of the months of contributions in this calendar.
	Months []*ContributionCalendarMonth `json:"months"`
	// The count of total contributions in the calendar.
	TotalContributions int64 `json:"totalContributions"`
	// A list of the weeks of contributions in this calendar.
	Weeks []*ContributionCalendarWeek `json:"weeks"`
}

// Represents a single day of contributions on GitHub by a user.
type ContributionCalendarDay struct {
	// The hex color code that represents how many contributions were made on this day compared to others in the calendar.
	Color string `json:"color"`
	// How many contributions were made by the user on this day.
	ContributionCount int64 `json:"contributionCount"`
	// Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
	ContributionLevel ContributionLevel `json:"contributionLevel"`
	// The day this square represents.
	Date time.Time `json:"date"`
	// A number representing which day of the week this square represents, e.g., 1 is Monday.
	Weekday int64 `json:"weekday"`
}

// A month of contributions in a user's contribution graph.
type ContributionCalendarMonth struct {
	// The date of the first day of this month.
	FirstDay time.Time `json:"firstDay"`
	// The name of the month.
	Name string `json:"name"`
	// How many weeks started in this month.
	TotalWeeks int64 `json:"totalWeeks"`
	// The year the month occurred in.
	Year int64 `json:"year"`
}

// A week of contributions in a user's contribution graph.
type ContributionCalendarWeek struct {
	// The days of contributions in this week.
	ContributionDays []*ContributionCalendarDay `json:"contributionDays"`
	// The date of the earliest square in this week.
	FirstDay time.Time `json:"firstDay"`
}

// Ordering options for contribution connections.
type ContributionOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A contributions collection aggregates contributions such as opened issues and commits created by a user.
type ContributionsCollection struct {
	// Commit contributions made by the user, grouped by repository.
	CommitContributionsByRepository []*CommitContributionsByRepository `json:"commitContributionsByRepository"`
	// A calendar of this user's contributions on GitHub.
	ContributionCalendar ContributionCalendar `json:"contributionCalendar"`
	// The years the user has been making contributions with the most recent year first.
	ContributionYears []int64 `json:"contributionYears"`
	// Determine if this collection's time span ends in the current month.
	//
	DoesEndInCurrentMonth bool `json:"doesEndInCurrentMonth"`
	// The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
	EarliestRestrictedContributionDate *time.Time `json:"earliestRestrictedContributionDate,omitempty"`
	// The ending date and time of this collection.
	EndedAt string `json:"endedAt"`
	// The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
	FirstIssueContribution CreatedIssueOrRestrictedContribution `json:"firstIssueContribution,omitempty"`
	// The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
	FirstPullRequestContribution CreatedPullRequestOrRestrictedContribution `json:"firstPullRequestContribution,omitempty"`
	// The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
	FirstRepositoryContribution CreatedRepositoryOrRestrictedContribution `json:"firstRepositoryContribution,omitempty"`
	// Does the user have any more activity in the timeline that occurred prior to the collection's time range?
	HasActivityInThePast bool `json:"hasActivityInThePast"`
	// Determine if there are any contributions in this collection.
	HasAnyContributions bool `json:"hasAnyContributions"`
	// Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
	HasAnyRestrictedContributions bool `json:"hasAnyRestrictedContributions"`
	// Whether or not the collector's time span is all within the same day.
	IsSingleDay bool `json:"isSingleDay"`
	// A list of issues the user opened.
	IssueContributions CreatedIssueContributionConnection `json:"issueContributions"`
	// Issue contributions made by the user, grouped by repository.
	IssueContributionsByRepository []*IssueContributionsByRepository `json:"issueContributionsByRepository"`
	// When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
	JoinedGitHubContribution *JoinedGitHubContribution `json:"joinedGitHubContribution,omitempty"`
	// The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
	LatestRestrictedContributionDate *time.Time `json:"latestRestrictedContributionDate,omitempty"`
	// When this collection's time range does not include any activity from the user, use this
	// to get a different collection from an earlier time range that does have activity.
	//
	MostRecentCollectionWithActivity *ContributionsCollection `json:"mostRecentCollectionWithActivity,omitempty"`
	// Returns a different contributions collection from an earlier time range than this one
	// that does not have any contributions.
	//
	MostRecentCollectionWithoutActivity *ContributionsCollection `json:"mostRecentCollectionWithoutActivity,omitempty"`
	// The issue the user opened on GitHub that received the most comments in the specified
	// time frame.
	//
	PopularIssueContribution *CreatedIssueContribution `json:"popularIssueContribution,omitempty"`
	// The pull request the user opened on GitHub that received the most comments in the
	// specified time frame.
	//
	PopularPullRequestContribution *CreatedPullRequestContribution `json:"popularPullRequestContribution,omitempty"`
	// Pull request contributions made by the user.
	PullRequestContributions CreatedPullRequestContributionConnection `json:"pullRequestContributions"`
	// Pull request contributions made by the user, grouped by repository.
	PullRequestContributionsByRepository []*PullRequestContributionsByRepository `json:"pullRequestContributionsByRepository"`
	// Pull request review contributions made by the user. Returns the most recently
	// submitted review for each PR reviewed by the user.
	//
	PullRequestReviewContributions CreatedPullRequestReviewContributionConnection `json:"pullRequestReviewContributions"`
	// Pull request review contributions made by the user, grouped by repository.
	PullRequestReviewContributionsByRepository []*PullRequestReviewContributionsByRepository `json:"pullRequestReviewContributionsByRepository"`
	// A list of repositories owned by the user that the user created in this time range.
	RepositoryContributions CreatedRepositoryContributionConnection `json:"repositoryContributions"`
	// A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
	RestrictedContributionsCount int64 `json:"restrictedContributionsCount"`
	// The beginning date and time of this collection.
	StartedAt string `json:"startedAt"`
	// How many commits were made by the user in this time span.
	TotalCommitContributions int64 `json:"totalCommitContributions"`
	// How many issues the user opened.
	TotalIssueContributions int64 `json:"totalIssueContributions"`
	// How many pull requests the user opened.
	TotalPullRequestContributions int64 `json:"totalPullRequestContributions"`
	// How many pull request reviews the user left.
	TotalPullRequestReviewContributions int64 `json:"totalPullRequestReviewContributions"`
	// How many different repositories the user committed to.
	TotalRepositoriesWithContributedCommits int64 `json:"totalRepositoriesWithContributedCommits"`
	// How many different repositories the user opened issues in.
	TotalRepositoriesWithContributedIssues int64 `json:"totalRepositoriesWithContributedIssues"`
	// How many different repositories the user left pull request reviews in.
	TotalRepositoriesWithContributedPullRequestReviews int64 `json:"totalRepositoriesWithContributedPullRequestReviews"`
	// How many different repositories the user opened pull requests in.
	TotalRepositoriesWithContributedPullRequests int64 `json:"totalRepositoriesWithContributedPullRequests"`
	// How many repositories the user created.
	TotalRepositoryContributions int64 `json:"totalRepositoryContributions"`
	// The user who made the contributions in this collection.
	User *User `json:"user"`
}

// Autogenerated input type of ConvertProjectCardNoteToIssue
type ConvertProjectCardNoteToIssueInput struct {
	// The ProjectCard ID to convert.
	ProjectCardID string `json:"projectCardId"`
	// The ID of the repository to create the issue in.
	RepositoryID string `json:"repositoryId"`
	// The title of the newly created issue. Defaults to the card's note text.
	Title *string `json:"title,omitempty"`
	// The body of the newly created issue.
	Body *string `json:"body,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ConvertProjectCardNoteToIssue
type ConvertProjectCardNoteToIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated ProjectCard.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
}

// Autogenerated input type of ConvertPullRequestToDraft
type ConvertPullRequestToDraftInput struct {
	// ID of the pull request to convert to draft
	PullRequestID string `json:"pullRequestId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ConvertPullRequestToDraft
type ConvertPullRequestToDraftPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that is now a draft.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Represents a 'convert_to_draft' event on a given pull request.
type ConvertToDraftEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// The HTTP path for this convert to draft event.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this convert to draft event.
	URL string `json:"url"`
}

func (ConvertToDraftEvent) IsNode() {}

// ID of the object.
func (this ConvertToDraftEvent) GetID() string { return this.ID }

func (ConvertToDraftEvent) IsPullRequestTimelineItems() {}

func (ConvertToDraftEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this ConvertToDraftEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this ConvertToDraftEvent) GetURL() string { return this.URL }

// Represents a 'converted_note_to_issue' event on a given issue or pull request.
type ConvertedNoteToIssueEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
}

func (ConvertedNoteToIssueEvent) IsIssueTimelineItems() {}

func (ConvertedNoteToIssueEvent) IsNode() {}

// ID of the object.
func (this ConvertedNoteToIssueEvent) GetID() string { return this.ID }

func (ConvertedNoteToIssueEvent) IsPullRequestTimelineItems() {}

// Represents a 'converted_to_discussion' event on a given issue.
type ConvertedToDiscussionEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The discussion that the issue was converted into.
	Discussion *Discussion `json:"discussion,omitempty"`
	ID         string      `json:"id"`
}

func (ConvertedToDiscussionEvent) IsIssueTimelineItems() {}

func (ConvertedToDiscussionEvent) IsNode() {}

// ID of the object.
func (this ConvertedToDiscussionEvent) GetID() string { return this.ID }

func (ConvertedToDiscussionEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of CopyProjectV2
type CopyProjectV2Input struct {
	// The ID of the source Project to copy.
	ProjectID string `json:"projectId"`
	// The owner ID of the new project.
	OwnerID string `json:"ownerId"`
	// The title of the project.
	Title string `json:"title"`
	// Include draft issues in the new project
	IncludeDraftIssues *bool `json:"includeDraftIssues,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CopyProjectV2
type CopyProjectV2Payload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The copied project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of CreateAttributionInvitation
type CreateAttributionInvitationInput struct {
	// The Node ID of the owner scoping the reattributable data.
	OwnerID string `json:"ownerId"`
	// The Node ID of the account owning the data to reattribute.
	SourceID string `json:"sourceId"`
	// The Node ID of the account which may claim the data.
	TargetID string `json:"targetId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateAttributionInvitation
type CreateAttributionInvitationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The owner scoping the reattributable data.
	Owner *Organization `json:"owner,omitempty"`
	// The account owning the data to reattribute.
	Source Claimable `json:"source,omitempty"`
	// The account which may claim the data.
	Target Claimable `json:"target,omitempty"`
}

// Autogenerated input type of CreateBranchProtectionRule
type CreateBranchProtectionRuleInput struct {
	// The global relay id of the repository in which a new branch protection rule should be created in.
	RepositoryID string `json:"repositoryId"`
	// The glob-like pattern used to determine matching branches.
	Pattern string `json:"pattern"`
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews *bool `json:"requiresApprovingReviews,omitempty"`
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty"`
	// Are commits required to be signed.
	RequiresCommitSignatures *bool `json:"requiresCommitSignatures,omitempty"`
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory *bool `json:"requiresLinearHistory,omitempty"`
	// Is branch creation a protected operation.
	BlocksCreations *bool `json:"blocksCreations,omitempty"`
	// Are force pushes allowed on this branch.
	AllowsForcePushes *bool `json:"allowsForcePushes,omitempty"`
	// Can this branch be deleted.
	AllowsDeletions *bool `json:"allowsDeletions,omitempty"`
	// Can admins overwrite branch protection.
	IsAdminEnforced *bool `json:"isAdminEnforced,omitempty"`
	// Are status checks required to update matching branches.
	RequiresStatusChecks *bool `json:"requiresStatusChecks,omitempty"`
	// Are branches required to be up to date before merging.
	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks,omitempty"`
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews,omitempty"`
	// Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews *bool `json:"dismissesStaleReviews,omitempty"`
	// Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals,omitempty"`
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	BypassPullRequestActorIds []string `json:"bypassPullRequestActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	BypassForcePushActorIds []string `json:"bypassForcePushActorIds,omitempty"`
	// Is pushing to matching branches restricted.
	RestrictsPushes *bool `json:"restrictsPushes,omitempty"`
	// A list of User, Team, or App IDs allowed to push to matching branches.
	PushActorIds []string `json:"pushActorIds,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`
	// The list of required status checks
	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
	// Are successful deployments required before merging.
	RequiresDeployments *bool `json:"requiresDeployments,omitempty"`
	// The list of required deployment environments
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution *bool `json:"requiresConversationResolution,omitempty"`
	// Whether the most recent push must be approved by someone other than the person who pushed it
	RequireLastPushApproval *bool `json:"requireLastPushApproval,omitempty"`
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *bool `json:"lockBranch,omitempty"`
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge *bool `json:"lockAllowsFetchAndMerge,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateBranchProtectionRule
type CreateBranchProtectionRulePayload struct {
	// The newly created BranchProtectionRule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of CreateCheckRun
type CreateCheckRunInput struct {
	// The node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the check.
	Name string `json:"name"`
	// The SHA of the head commit.
	HeadSha string `json:"headSha"`
	// The URL of the integrator's site that has the full details of the check.
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// A reference for the run on the integrator's system.
	ExternalID *string `json:"externalId,omitempty"`
	// The current status.
	Status *RequestableCheckStatusState `json:"status,omitempty"`
	// The time that the check run began.
	StartedAt *string `json:"startedAt,omitempty"`
	// The final conclusion of the check.
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// The time that the check run finished.
	CompletedAt *string `json:"completedAt,omitempty"`
	// Descriptive details about the run.
	Output *CheckRunOutput `json:"output,omitempty"`
	// Possible further actions the integrator can perform, which a user may trigger.
	Actions []*CheckRunAction `json:"actions,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateCheckRun
type CreateCheckRunPayload struct {
	// The newly created check run.
	CheckRun *CheckRun `json:"checkRun,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of CreateCheckSuite
type CreateCheckSuiteInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The SHA of the head commit.
	HeadSha string `json:"headSha"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateCheckSuite
type CreateCheckSuitePayload struct {
	// The newly created check suite.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of CreateCommitOnBranch
type CreateCommitOnBranchInput struct {
	// The Ref to be updated.  Must be a branch.
	Branch CommittableBranch `json:"branch"`
	// A description of changes to files in this commit.
	FileChanges *FileChanges `json:"fileChanges,omitempty"`
	// The commit message the be included with the commit.
	Message CommitMessage `json:"message"`
	// The git commit oid expected at the head of the branch prior to the commit
	ExpectedHeadOid string `json:"expectedHeadOid"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateCommitOnBranch
type CreateCommitOnBranchPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new commit.
	Commit *Commit `json:"commit,omitempty"`
	// The ref which has been updated to point to the new commit.
	Ref *Ref `json:"ref,omitempty"`
}

// Autogenerated input type of CreateDiscussion
type CreateDiscussionInput struct {
	// The id of the repository on which to create the discussion.
	RepositoryID string `json:"repositoryId"`
	// The title of the discussion.
	Title string `json:"title"`
	// The body of the discussion.
	Body string `json:"body"`
	// The id of the discussion category to associate with this discussion.
	CategoryID string `json:"categoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateDiscussion
type CreateDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that was just created.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of CreateEnterpriseOrganization
type CreateEnterpriseOrganizationInput struct {
	// The ID of the enterprise owning the new organization.
	EnterpriseID string `json:"enterpriseId"`
	// The login of the new organization.
	Login string `json:"login"`
	// The profile name of the new organization.
	ProfileName string `json:"profileName"`
	// The email used for sending billing receipts.
	BillingEmail string `json:"billingEmail"`
	// The logins for the administrators of the new organization.
	AdminLogins []string `json:"adminLogins"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateEnterpriseOrganization
type CreateEnterpriseOrganizationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise that owns the created organization.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// The organization that was created.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of CreateEnvironment
type CreateEnvironmentInput struct {
	// The node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the environment.
	Name string `json:"name"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateEnvironment
type CreateEnvironmentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new or existing environment.
	Environment *Environment `json:"environment,omitempty"`
}

// Autogenerated input type of CreateIpAllowListEntry
type CreateIPAllowListEntryInput struct {
	// The ID of the owner for which to create the new IP allow list entry.
	OwnerID string `json:"ownerId"`
	// An IP address or range of addresses in CIDR notation.
	AllowListValue string `json:"allowListValue"`
	// An optional name for the IP allow list entry.
	Name *string `json:"name,omitempty"`
	// Whether the IP allow list entry is active when an IP allow list is enabled.
	IsActive bool `json:"isActive"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateIpAllowListEntry
type CreateIPAllowListEntryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The IP allow list entry that was created.
	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

// Autogenerated input type of CreateIssue
type CreateIssueInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The title for the issue.
	Title string `json:"title"`
	// The body for the issue description.
	Body *string `json:"body,omitempty"`
	// The Node ID for the user assignee for this issue.
	AssigneeIds []string `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this issue.
	MilestoneID *string `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this issue.
	LabelIds []string `json:"labelIds,omitempty"`
	// An array of Node IDs for projects associated with this issue.
	ProjectIds []string `json:"projectIds,omitempty"`
	// The name of an issue template in the repository, assigns labels and assignees from the template to the issue
	IssueTemplate *string `json:"issueTemplate,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateIssue
type CreateIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new issue.
	Issue *Issue `json:"issue,omitempty"`
}

// Autogenerated input type of CreateLinkedBranch
type CreateLinkedBranchInput struct {
	// ID of the issue to link to.
	IssueID string `json:"issueId"`
	// The commit SHA to base the new branch on.
	Oid string `json:"oid"`
	// The name of the new branch. Defaults to issue number and title.
	Name *string `json:"name,omitempty"`
	// ID of the repository to create the branch in. Defaults to the issue repository.
	RepositoryID *string `json:"repositoryId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateLinkedBranch
type CreateLinkedBranchPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was linked to.
	Issue *Issue `json:"issue,omitempty"`
	// The new branch issue reference.
	LinkedBranch *LinkedBranch `json:"linkedBranch,omitempty"`
}

// Autogenerated input type of CreateMigrationSource
type CreateMigrationSourceInput struct {
	// The migration source name.
	Name string `json:"name"`
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	URL *string `json:"url,omitempty"`
	// The migration source access token.
	AccessToken *string `json:"accessToken,omitempty"`
	// The migration source type.
	Type MigrationSourceType `json:"type"`
	// The ID of the organization that will own the migration source.
	OwnerID string `json:"ownerId"`
	// The GitHub personal access token of the user importing to the target repository.
	GithubPat *string `json:"githubPat,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateMigrationSource
type CreateMigrationSourcePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The created migration source.
	MigrationSource *MigrationSource `json:"migrationSource,omitempty"`
}

// Autogenerated input type of CreateProject
type CreateProjectInput struct {
	// The owner ID to create the project under.
	OwnerID string `json:"ownerId"`
	// The name of project.
	Name string `json:"name"`
	// The description of project.
	Body *string `json:"body,omitempty"`
	// The name of the GitHub-provided template.
	Template *ProjectTemplate `json:"template,omitempty"`
	// A list of repository IDs to create as linked repositories for the project
	RepositoryIds []string `json:"repositoryIds,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateProject
type CreateProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new project.
	Project *Project `json:"project,omitempty"`
}

// Autogenerated input type of CreateProjectV2Field
type CreateProjectV2FieldInput struct {
	// The ID of the Project to create the field in.
	ProjectID string `json:"projectId"`
	// The data type of the field.
	DataType ProjectV2CustomFieldType `json:"dataType"`
	// The name of the field.
	Name string `json:"name"`
	// Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
	SingleSelectOptions []*ProjectV2SingleSelectFieldOptionInput `json:"singleSelectOptions,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateProjectV2Field
type CreateProjectV2FieldPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new field.
	ProjectV2Field ProjectV2FieldConfiguration `json:"projectV2Field,omitempty"`
}

// Autogenerated input type of CreateProjectV2
type CreateProjectV2Input struct {
	// The owner ID to create the project under.
	OwnerID string `json:"ownerId"`
	// The title of the project.
	Title string `json:"title"`
	// The repository to link the project to.
	RepositoryID *string `json:"repositoryId,omitempty"`
	// The team to link the project to. The team will be granted read permissions.
	TeamID *string `json:"teamId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateProjectV2
type CreateProjectV2Payload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of CreatePullRequest
type CreatePullRequestInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository. You cannot update the base branch on a pull request to point
	// to another repository.
	//
	BaseRefName string `json:"baseRefName"`
	// The name of the branch where your changes are implemented. For cross-repository pull requests
	// in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
	//
	HeadRefName string `json:"headRefName"`
	// The Node ID of the head repository.
	HeadRepositoryID *string `json:"headRepositoryId,omitempty"`
	// The title of the pull request.
	Title string `json:"title"`
	// The contents of the pull request.
	Body *string `json:"body,omitempty"`
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainerCanModify,omitempty"`
	// Indicates whether this pull request should be a draft.
	Draft *bool `json:"draft,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreatePullRequest
type CreatePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of CreateRef
type CreateRefInput struct {
	// The Node ID of the Repository to create the Ref in.
	RepositoryID string `json:"repositoryId"`
	// The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
	Name string `json:"name"`
	// The GitObjectID that the new Ref shall target. Must point to a commit.
	Oid string `json:"oid"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateRef
type CreateRefPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created ref.
	Ref *Ref `json:"ref,omitempty"`
}

// Autogenerated input type of CreateRepository
type CreateRepositoryInput struct {
	// The name of the new repository.
	Name string `json:"name"`
	// The ID of the owner for the new repository.
	OwnerID *string `json:"ownerId,omitempty"`
	// A short description of the new repository.
	Description *string `json:"description,omitempty"`
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility `json:"visibility"`
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	Template *bool `json:"template,omitempty"`
	// The URL for a web page about this repository.
	HomepageURL *string `json:"homepageUrl,omitempty"`
	// Indicates if the repository should have the wiki feature enabled.
	HasWikiEnabled *bool `json:"hasWikiEnabled,omitempty"`
	// Indicates if the repository should have the issues feature enabled.
	HasIssuesEnabled *bool `json:"hasIssuesEnabled,omitempty"`
	// When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
	TeamID *string `json:"teamId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateRepository
type CreateRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of CreateRepositoryRuleset
type CreateRepositoryRulesetInput struct {
	// The global relay id of the source in which a new ruleset should be created in.
	SourceID string `json:"sourceId"`
	// The name of the ruleset.
	Name string `json:"name"`
	// The target of the ruleset.
	Target *RepositoryRulesetTarget `json:"target,omitempty"`
	// The list of rules for this ruleset
	Rules []*RepositoryRuleInput `json:"rules,omitempty"`
	// The set of conditions for this ruleset
	Conditions RepositoryRuleConditionsInput `json:"conditions"`
	// The enforcement level for this ruleset
	Enforcement RuleEnforcement `json:"enforcement"`
	// A list of actors that are allowed to bypass rules in this ruleset.
	BypassActors []*RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateRepositoryRuleset
type CreateRepositoryRulesetPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created Ruleset.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
}

// Autogenerated input type of CreateSavedNotificationThread
type CreateSavedNotificationThreadInput struct {
	// The notification thread's id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateSavedNotificationThread
type CreateSavedNotificationThreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the saved notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of CreateSponsorsListing
type CreateSponsorsListingInput struct {
	// The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information.
	FiscalHostLogin *string `json:"fiscalHostLogin,omitempty"`
	// The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified.
	FiscallyHostedProjectProfileURL *string `json:"fiscallyHostedProjectProfileUrl,omitempty"`
	// The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
	BillingCountryOrRegionCode *SponsorsCountryOrRegionCode `json:"billingCountryOrRegionCode,omitempty"`
	// The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization.
	ResidenceCountryOrRegionCode *SponsorsCountryOrRegionCode `json:"residenceCountryOrRegionCode,omitempty"`
	// The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted.
	ContactEmail *string `json:"contactEmail,omitempty"`
	// Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported.
	FullDescription *string `json:"fullDescription,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateSponsorsListing
type CreateSponsorsListingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new GitHub Sponsors profile.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
}

// Autogenerated input type of CreateSponsorsTier
type CreateSponsorsTierInput struct {
	// The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given.
	SponsorableID *string `json:"sponsorableId,omitempty"`
	// The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// The value of the new tier in US dollars. Valid values: 1-12000.
	Amount int64 `json:"amount"`
	// Whether sponsorships using this tier should happen monthly/yearly or just once.
	IsRecurring *bool `json:"isRecurring,omitempty"`
	// Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization.
	RepositoryID *string `json:"repositoryId,omitempty"`
	// Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given.
	RepositoryOwnerLogin *string `json:"repositoryOwnerLogin,omitempty"`
	// Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
	RepositoryName *string `json:"repositoryName,omitempty"`
	// Optional message new sponsors at this tier will receive.
	WelcomeMessage *string `json:"welcomeMessage,omitempty"`
	// A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
	Description string `json:"description"`
	// Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible.
	Publish *bool `json:"publish,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateSponsorsTier
type CreateSponsorsTierPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new tier.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

// Autogenerated input type of CreateSponsorship
type CreateSponsorshipInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *string `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *string `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
	TierID *string `json:"tierId,omitempty"`
	// The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
	Amount *int64 `json:"amount,omitempty"`
	// Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
	IsRecurring *bool `json:"isRecurring,omitempty"`
	// Whether the sponsor should receive email updates from the sponsorable.
	ReceiveEmails *bool `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateSponsorship
type CreateSponsorshipPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The sponsorship that was started.
	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
}

// Autogenerated input type of CreateSponsorships
type CreateSponsorshipsInput struct {
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
	SponsorLogin string `json:"sponsorLogin"`
	// The list of maintainers to sponsor and for how much apiece.
	Sponsorships []*BulkSponsorship `json:"sponsorships"`
	// Whether the sponsor should receive email updates from the sponsorables.
	ReceiveEmails *bool `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship.
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateSponsorships
type CreateSponsorshipsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The users and organizations who received a sponsorship.
	Sponsorables []Sponsorable `json:"sponsorables,omitempty"`
}

// Autogenerated input type of CreateTeamDiscussionComment
type CreateTeamDiscussionCommentInput struct {
	// The ID of the discussion to which the comment belongs. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `discussionId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	DiscussionID *string `json:"discussionId,omitempty"`
	// The content of the comment. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	Body *string `json:"body,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateTeamDiscussionComment
type CreateTeamDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new comment.
	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
}

// Autogenerated input type of CreateTeamDiscussion
type CreateTeamDiscussionInput struct {
	// The ID of the team to which the discussion belongs. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `teamId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	TeamID *string `json:"teamId,omitempty"`
	// The title of the discussion. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `title` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	Title *string `json:"title,omitempty"`
	// The content of the discussion. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	Body *string `json:"body,omitempty"`
	// If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `private` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	//
	Private *bool `json:"private,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of CreateTeamDiscussion
type CreateTeamDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new discussion.
	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
}

// Represents the contribution a user made by committing to a repository.
type CreatedCommitContribution struct {
	// How many commits were made on this day to this repository by the user.
	CommitCount int64 `json:"commitCount"`
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The repository the user made a commit in.
	Repository Repository `json:"repository"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (CreatedCommitContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this CreatedCommitContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this CreatedCommitContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this CreatedCommitContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this CreatedCommitContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this CreatedCommitContribution) GetUser() User { return this.User }

// The connection type for CreatedCommitContribution.
type CreatedCommitContributionConnection struct {
	// A list of edges.
	Edges []*CreatedCommitContributionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CreatedCommitContribution `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of commits across days and repositories in the connection.
	//
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CreatedCommitContributionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CreatedCommitContribution `json:"node,omitempty"`
}

// Represents the contribution a user made on GitHub by opening an issue.
type CreatedIssueContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// The issue that was opened.
	Issue Issue `json:"issue"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (CreatedIssueContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this CreatedIssueContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this CreatedIssueContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this CreatedIssueContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this CreatedIssueContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this CreatedIssueContribution) GetUser() User { return this.User }

func (CreatedIssueContribution) IsCreatedIssueOrRestrictedContribution() {}

// The connection type for CreatedIssueContribution.
type CreatedIssueContributionConnection struct {
	// A list of edges.
	Edges []*CreatedIssueContributionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CreatedIssueContribution `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CreatedIssueContributionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CreatedIssueContribution `json:"node,omitempty"`
}

// Represents the contribution a user made on GitHub by opening a pull request.
type CreatedPullRequestContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The pull request that was opened.
	PullRequest PullRequest `json:"pullRequest"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (CreatedPullRequestContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this CreatedPullRequestContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this CreatedPullRequestContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this CreatedPullRequestContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this CreatedPullRequestContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this CreatedPullRequestContribution) GetUser() User { return this.User }

func (CreatedPullRequestContribution) IsCreatedPullRequestOrRestrictedContribution() {}

// The connection type for CreatedPullRequestContribution.
type CreatedPullRequestContributionConnection struct {
	// A list of edges.
	Edges []*CreatedPullRequestContributionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CreatedPullRequestContribution `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CreatedPullRequestContributionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CreatedPullRequestContribution `json:"node,omitempty"`
}

// Represents the contribution a user made by leaving a review on a pull request.
type CreatedPullRequestReviewContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The pull request the user reviewed.
	PullRequest PullRequest `json:"pullRequest"`
	// The review the user left on the pull request.
	PullRequestReview PullRequestReview `json:"pullRequestReview"`
	// The repository containing the pull request that the user reviewed.
	Repository Repository `json:"repository"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (CreatedPullRequestReviewContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this CreatedPullRequestReviewContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this CreatedPullRequestReviewContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this CreatedPullRequestReviewContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this CreatedPullRequestReviewContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this CreatedPullRequestReviewContribution) GetUser() User { return this.User }

// The connection type for CreatedPullRequestReviewContribution.
type CreatedPullRequestReviewContributionConnection struct {
	// A list of edges.
	Edges []*CreatedPullRequestReviewContributionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CreatedPullRequestReviewContribution `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CreatedPullRequestReviewContributionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CreatedPullRequestReviewContribution `json:"node,omitempty"`
}

// Represents the contribution a user made on GitHub by creating a repository.
type CreatedRepositoryContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The repository that was created.
	Repository Repository `json:"repository"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (CreatedRepositoryContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this CreatedRepositoryContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this CreatedRepositoryContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this CreatedRepositoryContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this CreatedRepositoryContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this CreatedRepositoryContribution) GetUser() User { return this.User }

func (CreatedRepositoryContribution) IsCreatedRepositoryOrRestrictedContribution() {}

// The connection type for CreatedRepositoryContribution.
type CreatedRepositoryContributionConnection struct {
	// A list of edges.
	Edges []*CreatedRepositoryContributionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*CreatedRepositoryContribution `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type CreatedRepositoryContributionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *CreatedRepositoryContribution `json:"node,omitempty"`
}

// Represents a mention made by one issue or pull request to another.
type CrossReferencedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository"`
	// Identifies when the reference was made.
	ReferencedAt string `json:"referencedAt"`
	// The HTTP path for this pull request.
	ResourcePath string `json:"resourcePath"`
	// Issue or pull request that made the reference.
	Source ReferencedSubject `json:"source"`
	// Issue or pull request to which the reference was made.
	Target ReferencedSubject `json:"target"`
	// The HTTP URL for this pull request.
	URL string `json:"url"`
	// Checks if the target will be closed when the source is merged.
	WillCloseTarget bool `json:"willCloseTarget"`
}

func (CrossReferencedEvent) IsIssueTimelineItem() {}

func (CrossReferencedEvent) IsIssueTimelineItems() {}

func (CrossReferencedEvent) IsNode() {}

// ID of the object.
func (this CrossReferencedEvent) GetID() string { return this.ID }

func (CrossReferencedEvent) IsPullRequestTimelineItem() {}

func (CrossReferencedEvent) IsPullRequestTimelineItems() {}

func (CrossReferencedEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this CrossReferencedEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this CrossReferencedEvent) GetURL() string { return this.URL }

// Autogenerated input type of DeclineTopicSuggestion
type DeclineTopicSuggestionInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The name of the suggested topic.
	Name string `json:"name"`
	// The reason why the suggested topic is declined.
	Reason TopicSuggestionDeclineReason `json:"reason"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeclineTopicSuggestion
type DeclineTopicSuggestionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The declined topic.
	Topic *Topic `json:"topic,omitempty"`
}

// Autogenerated input type of DeleteBranchProtectionRule
type DeleteBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be deleted.
	BranchProtectionRuleID string `json:"branchProtectionRuleId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteBranchProtectionRule
type DeleteBranchProtectionRulePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteDeployment
type DeleteDeploymentInput struct {
	// The Node ID of the deployment to be deleted.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteDeployment
type DeleteDeploymentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteDiscussionComment
type DeleteDiscussionCommentInput struct {
	// The Node id of the discussion comment to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteDiscussionComment
type DeleteDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion comment that was just deleted.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

// Autogenerated input type of DeleteDiscussion
type DeleteDiscussionInput struct {
	// The id of the discussion to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteDiscussion
type DeleteDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that was just deleted.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of DeleteEnvironment
type DeleteEnvironmentInput struct {
	// The Node ID of the environment to be deleted.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteEnvironment
type DeleteEnvironmentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteIpAllowListEntry
type DeleteIPAllowListEntryInput struct {
	// The ID of the IP allow list entry to delete.
	IPAllowListEntryID string `json:"ipAllowListEntryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteIpAllowListEntry
type DeleteIPAllowListEntryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The IP allow list entry that was deleted.
	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

// Autogenerated input type of DeleteIssueComment
type DeleteIssueCommentInput struct {
	// The ID of the comment to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteIssueComment
type DeleteIssueCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteIssue
type DeleteIssueInput struct {
	// The ID of the issue to delete.
	IssueID string `json:"issueId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteIssue
type DeleteIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository the issue belonged to
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of DeleteLinkedBranch
type DeleteLinkedBranchInput struct {
	// The ID of the linked branch
	LinkedBranchID string `json:"linkedBranchId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteLinkedBranch
type DeleteLinkedBranchPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue the linked branch was unlinked from.
	Issue *Issue `json:"issue,omitempty"`
}

// Autogenerated input type of DeleteProjectCard
type DeleteProjectCardInput struct {
	// The id of the card to delete.
	CardID string `json:"cardId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProjectCard
type DeleteProjectCardPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The column the deleted card was in.
	Column *ProjectColumn `json:"column,omitempty"`
	// The deleted card ID.
	DeletedCardID *string `json:"deletedCardId,omitempty"`
}

// Autogenerated input type of DeleteProjectColumn
type DeleteProjectColumnInput struct {
	// The id of the column to delete.
	ColumnID string `json:"columnId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProjectColumn
type DeleteProjectColumnPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The deleted column ID.
	DeletedColumnID *string `json:"deletedColumnId,omitempty"`
	// The project the deleted column was in.
	Project *Project `json:"project,omitempty"`
}

// Autogenerated input type of DeleteProject
type DeleteProjectInput struct {
	// The Project ID to update.
	ProjectID string `json:"projectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProject
type DeleteProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository or organization the project was removed from.
	Owner ProjectOwner `json:"owner,omitempty"`
}

// Autogenerated input type of DeleteProjectV2Field
type DeleteProjectV2FieldInput struct {
	// The ID of the field to delete.
	FieldID string `json:"fieldId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProjectV2Field
type DeleteProjectV2FieldPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The deleted field.
	ProjectV2Field ProjectV2FieldConfiguration `json:"projectV2Field,omitempty"`
}

// Autogenerated input type of DeleteProjectV2
type DeleteProjectV2Input struct {
	// The ID of the Project to delete.
	ProjectID string `json:"projectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteProjectV2Item
type DeleteProjectV2ItemInput struct {
	// The ID of the Project from which the item should be removed.
	ProjectID string `json:"projectId"`
	// The ID of the item to be removed.
	ItemID string `json:"itemId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProjectV2Item
type DeleteProjectV2ItemPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The ID of the deleted item.
	DeletedItemID *string `json:"deletedItemId,omitempty"`
}

// Autogenerated return type of DeleteProjectV2
type DeleteProjectV2Payload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The deleted Project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of DeleteProjectV2Workflow
type DeleteProjectV2WorkflowInput struct {
	// The ID of the workflow to be removed.
	WorkflowID string `json:"workflowId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteProjectV2Workflow
type DeleteProjectV2WorkflowPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The ID of the deleted workflow.
	DeletedWorkflowID *string `json:"deletedWorkflowId,omitempty"`
	// The project the deleted workflow was in.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of DeletePullRequestReviewComment
type DeletePullRequestReviewCommentInput struct {
	// The ID of the comment to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeletePullRequestReviewComment
type DeletePullRequestReviewCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request review the deleted comment belonged to.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
	// The deleted pull request review comment.
	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment,omitempty"`
}

// Autogenerated input type of DeletePullRequestReview
type DeletePullRequestReviewInput struct {
	// The Node ID of the pull request review to delete.
	PullRequestReviewID string `json:"pullRequestReviewId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeletePullRequestReview
type DeletePullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The deleted pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

// Autogenerated input type of DeleteRef
type DeleteRefInput struct {
	// The Node ID of the Ref to be deleted.
	RefID string `json:"refId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteRef
type DeleteRefPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteRepositoryRuleset
type DeleteRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be deleted.
	RepositoryRulesetID string `json:"repositoryRulesetId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteRepositoryRuleset
type DeleteRepositoryRulesetPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteSavedNotificationThread
type DeleteSavedNotificationThreadInput struct {
	// The saved notification thread's id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteSavedNotificationThread
type DeleteSavedNotificationThreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that deleted the saved notification.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of DeleteTeamDiscussionComment
type DeleteTeamDiscussionCommentInput struct {
	// The ID of the comment to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteTeamDiscussionComment
type DeleteTeamDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteTeamDiscussion
type DeleteTeamDiscussionInput struct {
	// The discussion ID to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteTeamDiscussion
type DeleteTeamDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of DeleteVerifiableDomain
type DeleteVerifiableDomainInput struct {
	// The ID of the verifiable domain to delete.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DeleteVerifiableDomain
type DeleteVerifiableDomainPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The owning account from which the domain was deleted.
	Owner VerifiableDomainOwner `json:"owner,omitempty"`
}

// Represents a 'demilestoned' event on a given issue or pull request.
type DemilestonedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the milestone title associated with the 'demilestoned' event.
	MilestoneTitle string `json:"milestoneTitle"`
	// Object referenced by event.
	Subject MilestoneItem `json:"subject"`
}

func (DemilestonedEvent) IsIssueTimelineItem() {}

func (DemilestonedEvent) IsIssueTimelineItems() {}

func (DemilestonedEvent) IsNode() {}

// ID of the object.
func (this DemilestonedEvent) GetID() string { return this.ID }

func (DemilestonedEvent) IsPullRequestTimelineItem() {}

func (DemilestonedEvent) IsPullRequestTimelineItems() {}

// A Dependabot Update for a dependency in a repository
type DependabotUpdate struct {
	// The error from a dependency update
	Error *DependabotUpdateError `json:"error,omitempty"`
	// The associated pull request
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
}

func (DependabotUpdate) IsRepositoryNode() {}

// The repository associated with this node.
func (this DependabotUpdate) GetRepository() Repository { return this.Repository }

// An error produced from a Dependabot Update
type DependabotUpdateError struct {
	// The body of the error
	Body string `json:"body"`
	// The error code
	ErrorType string `json:"errorType"`
	// The title of the error
	Title string `json:"title"`
}

// A repository deploy key.
type DeployKey struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The deploy key.
	Key string `json:"key"`
	// Whether or not the deploy key is read only.
	ReadOnly bool `json:"readOnly"`
	// The deploy key title.
	Title string `json:"title"`
	// Whether or not the deploy key has been verified.
	Verified bool `json:"verified"`
}

func (DeployKey) IsNode() {}

// ID of the object.
func (this DeployKey) GetID() string { return this.ID }

// The connection type for DeployKey.
type DeployKeyConnection struct {
	// A list of edges.
	Edges []*DeployKeyEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DeployKey `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeployKeyEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DeployKey `json:"node,omitempty"`
}

// Represents a 'deployed' event on a given pull request.
type DeployedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The deployment associated with the 'deployed' event.
	Deployment Deployment `json:"deployment"`
	ID         string     `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// The ref associated with the 'deployed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (DeployedEvent) IsNode() {}

// ID of the object.
func (this DeployedEvent) GetID() string { return this.ID }

func (DeployedEvent) IsPullRequestTimelineItem() {}

func (DeployedEvent) IsPullRequestTimelineItems() {}

// Represents triggered deployment instance.
type Deployment struct {
	// Identifies the commit sha of the deployment.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies the oid of the deployment commit, even if the commit has been deleted.
	CommitOid string `json:"commitOid"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the actor who triggered the deployment.
	Creator Actor `json:"creator"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The deployment description.
	Description *string `json:"description,omitempty"`
	// The latest environment to which this deployment was made.
	Environment *string `json:"environment,omitempty"`
	ID          string  `json:"id"`
	// The latest environment to which this deployment was made.
	LatestEnvironment *string `json:"latestEnvironment,omitempty"`
	// The latest status of this deployment.
	LatestStatus *DeploymentStatus `json:"latestStatus,omitempty"`
	// The original environment to which this deployment was made.
	OriginalEnvironment *string `json:"originalEnvironment,omitempty"`
	// Extra information that a deployment system might need.
	Payload *string `json:"payload,omitempty"`
	// Identifies the Ref of the deployment, if the deployment was created by ref.
	Ref *Ref `json:"ref,omitempty"`
	// Identifies the repository associated with the deployment.
	Repository Repository `json:"repository"`
	// The current state of the deployment.
	State *DeploymentState `json:"state,omitempty"`
	// A list of statuses associated with the deployment.
	Statuses *DeploymentStatusConnection `json:"statuses,omitempty"`
	// The deployment task.
	Task *string `json:"task,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (Deployment) IsNode() {}

// ID of the object.
func (this Deployment) GetID() string { return this.ID }

// The connection type for Deployment.
type DeploymentConnection struct {
	// A list of edges.
	Edges []*DeploymentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Deployment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Deployment `json:"node,omitempty"`
}

// Represents a 'deployment_environment_changed' event on a given pull request.
type DeploymentEnvironmentChangedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The deployment status that updated the deployment environment.
	DeploymentStatus DeploymentStatus `json:"deploymentStatus"`
	ID               string           `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (DeploymentEnvironmentChangedEvent) IsNode() {}

// ID of the object.
func (this DeploymentEnvironmentChangedEvent) GetID() string { return this.ID }

func (DeploymentEnvironmentChangedEvent) IsPullRequestTimelineItem() {}

func (DeploymentEnvironmentChangedEvent) IsPullRequestTimelineItems() {}

// Ordering options for deployment connections
type DeploymentOrder struct {
	// The field to order deployments by.
	Field DeploymentOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A protection rule.
type DeploymentProtectionRule struct {
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// Whether deployments to this environment can be approved by the user who created the deployment.
	PreventSelfReview *bool `json:"preventSelfReview,omitempty"`
	// The teams or users that can review the deployment
	Reviewers DeploymentReviewerConnection `json:"reviewers"`
	// The timeout in minutes for this protection rule.
	Timeout int64 `json:"timeout"`
	// The type of protection rule.
	Type DeploymentProtectionRuleType `json:"type"`
}

// The connection type for DeploymentProtectionRule.
type DeploymentProtectionRuleConnection struct {
	// A list of edges.
	Edges []*DeploymentProtectionRuleEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DeploymentProtectionRule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentProtectionRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DeploymentProtectionRule `json:"node,omitempty"`
}

// A request to deploy a workflow run to an environment.
type DeploymentRequest struct {
	// Whether or not the current user can approve the deployment
	CurrentUserCanApprove bool `json:"currentUserCanApprove"`
	// The target environment of the deployment
	Environment Environment `json:"environment"`
	// The teams or users that can review the deployment
	Reviewers DeploymentReviewerConnection `json:"reviewers"`
	// The wait timer in minutes configured in the environment
	WaitTimer int64 `json:"waitTimer"`
	// The wait timer in minutes configured in the environment
	WaitTimerStartedAt *string `json:"waitTimerStartedAt,omitempty"`
}

// The connection type for DeploymentRequest.
type DeploymentRequestConnection struct {
	// A list of edges.
	Edges []*DeploymentRequestEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DeploymentRequest `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentRequestEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DeploymentRequest `json:"node,omitempty"`
}

// A deployment review.
type DeploymentReview struct {
	// The comment the user left.
	Comment string `json:"comment"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The environments approved or rejected
	Environments EnvironmentConnection `json:"environments"`
	ID           string                `json:"id"`
	// The decision of the user.
	State DeploymentReviewState `json:"state"`
	// The user that reviewed the deployment.
	User User `json:"user"`
}

func (DeploymentReview) IsNode() {}

// ID of the object.
func (this DeploymentReview) GetID() string { return this.ID }

// The connection type for DeploymentReview.
type DeploymentReviewConnection struct {
	// A list of edges.
	Edges []*DeploymentReviewEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DeploymentReview `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentReviewEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DeploymentReview `json:"node,omitempty"`
}

// The connection type for DeploymentReviewer.
type DeploymentReviewerConnection struct {
	// A list of edges.
	Edges []*DeploymentReviewerEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []DeploymentReviewer `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentReviewerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node DeploymentReviewer `json:"node,omitempty"`
}

// Describes the status of a given deployment attempt.
type DeploymentStatus struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the actor who triggered the deployment.
	Creator Actor `json:"creator"`
	// Identifies the deployment associated with status.
	Deployment Deployment `json:"deployment"`
	// Identifies the description of the deployment.
	Description *string `json:"description,omitempty"`
	// Identifies the environment URL of the deployment.
	EnvironmentURL *string `json:"environmentUrl,omitempty"`
	ID             string  `json:"id"`
	// Identifies the log URL of the deployment.
	LogURL *string `json:"logUrl,omitempty"`
	// Identifies the current state of the deployment.
	State DeploymentStatusState `json:"state"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (DeploymentStatus) IsNode() {}

// ID of the object.
func (this DeploymentStatus) GetID() string { return this.ID }

// The connection type for DeploymentStatus.
type DeploymentStatusConnection struct {
	// A list of edges.
	Edges []*DeploymentStatusEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DeploymentStatus `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DeploymentStatusEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DeploymentStatus `json:"node,omitempty"`
}

// Autogenerated input type of DequeuePullRequest
type DequeuePullRequestInput struct {
	// The ID of the pull request to be dequeued.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DequeuePullRequest
type DequeuePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The merge queue entry of the dequeued pull request.
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`
}

// Autogenerated input type of DisablePullRequestAutoMerge
type DisablePullRequestAutoMergeInput struct {
	// ID of the pull request to disable auto merge on.
	PullRequestID string `json:"pullRequestId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DisablePullRequestAutoMerge
type DisablePullRequestAutoMergePayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request auto merge was disabled on.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Represents a 'disconnected' event on a given issue or pull request.
type DisconnectedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository"`
	// Issue or pull request from which the issue was disconnected.
	Source ReferencedSubject `json:"source"`
	// Issue or pull request which was disconnected.
	Subject ReferencedSubject `json:"subject"`
}

func (DisconnectedEvent) IsIssueTimelineItems() {}

func (DisconnectedEvent) IsNode() {}

// ID of the object.
func (this DisconnectedEvent) GetID() string { return this.ID }

func (DisconnectedEvent) IsPullRequestTimelineItems() {}

// A discussion in a repository.
type Discussion struct {
	// Reason that the conversation was locked.
	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
	// The comment chosen as this discussion's answer, if any.
	Answer *DiscussionComment `json:"answer,omitempty"`
	// The time when a user chose this discussion's answer, if answered.
	AnswerChosenAt *string `json:"answerChosenAt,omitempty"`
	// The user who chose this discussion's answer, if answered.
	AnswerChosenBy Actor `json:"answerChosenBy,omitempty"`
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The main text of the discussion post.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The category for this discussion.
	Category DiscussionCategory `json:"category"`
	// Indicates if the object is closed (definition of closed may depend on type)
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// The replies to the discussion.
	Comments DiscussionCommentConnection `json:"comments"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Only return answered/unanswered discussions
	IsAnswered *bool `json:"isAnswered,omitempty"`
	// A list of labels associated with the object.
	Labels *LabelConnection `json:"labels,omitempty"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// `true` if the object is locked
	Locked bool `json:"locked"`
	// The number identifying this discussion within the repository.
	Number int64 `json:"number"`
	// The poll associated with this discussion, if one exists.
	Poll *DiscussionPoll `json:"poll,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The path for this discussion.
	ResourcePath string `json:"resourcePath"`
	// Identifies the reason for the discussion's state.
	StateReason *DiscussionStateReason `json:"stateReason,omitempty"`
	// The title of this discussion.
	Title string `json:"title"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// Number of upvotes that this subject has received.
	UpvoteCount int64 `json:"upvoteCount"`
	// The URL for this discussion.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Whether or not the current user can add or remove an upvote on this subject.
	ViewerCanUpvote bool `json:"viewerCanUpvote"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
	// Whether or not the current user has already upvoted this subject.
	ViewerHasUpvoted bool `json:"viewerHasUpvoted"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (Discussion) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this Discussion) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this Discussion) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this Discussion) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this Discussion) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (Discussion) IsComment() {}

// The actor who authored the comment.
func (this Discussion) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this Discussion) GetAuthorAssociation() CommentAuthorAssociation { return this.AuthorAssociation }

// The body as Markdown.
func (this Discussion) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this Discussion) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this Discussion) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this Discussion) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this Discussion) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this Discussion) GetEditor() Actor { return this.Editor }
func (this Discussion) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this Discussion) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this Discussion) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this Discussion) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this Discussion) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this Discussion) GetUserContentEdits() *UserContentEditConnection { return this.UserContentEdits }

// Did the viewer author this comment.
func (this Discussion) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (Discussion) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this Discussion) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (Discussion) IsLabelable() {}

// A list of labels associated with the object.
func (this Discussion) GetLabels() *LabelConnection { return this.Labels }

func (Discussion) IsLockable() {}

// Reason that the conversation was locked.
func (this Discussion) GetActiveLockReason() *LockReason { return this.ActiveLockReason }

// `true` if the object is locked
func (this Discussion) GetLocked() bool { return this.Locked }

func (Discussion) IsNode() {}

// ID of the object.

func (Discussion) IsNotificationsSubject() {}

func (Discussion) IsReactable() {}

// Identifies the primary key from the database.
func (this Discussion) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this Discussion) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this Discussion) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this Discussion) GetViewerCanReact() bool { return this.ViewerCanReact }

func (Discussion) IsRepositoryNode() {}

// The repository associated with this node.
func (this Discussion) GetRepository() Repository { return this.Repository }

func (Discussion) IsSearchResultItem() {}

func (Discussion) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this Discussion) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this Discussion) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (Discussion) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this Discussion) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (Discussion) IsVotable() {}

// Number of upvotes that this subject has received.
func (this Discussion) GetUpvoteCount() int64 { return this.UpvoteCount }

// Whether or not the current user can add or remove an upvote on this subject.
func (this Discussion) GetViewerCanUpvote() bool { return this.ViewerCanUpvote }

// Whether or not the current user has already upvoted this subject.
func (this Discussion) GetViewerHasUpvoted() bool { return this.ViewerHasUpvoted }

// A category for discussions in a repository.
type DiscussionCategory struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// A description of this category.
	Description *string `json:"description,omitempty"`
	// An emoji representing this category.
	Emoji string `json:"emoji"`
	// This category's emoji rendered as HTML.
	EmojiHTML string `json:"emojiHTML"`
	ID        string `json:"id"`
	// Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
	IsAnswerable bool `json:"isAnswerable"`
	// The name of this category.
	Name string `json:"name"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The slug of this category.
	Slug string `json:"slug"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (DiscussionCategory) IsNode() {}

// ID of the object.
func (this DiscussionCategory) GetID() string { return this.ID }

func (DiscussionCategory) IsRepositoryNode() {}

// The repository associated with this node.
func (this DiscussionCategory) GetRepository() Repository { return this.Repository }

// The connection type for DiscussionCategory.
type DiscussionCategoryConnection struct {
	// A list of edges.
	Edges []*DiscussionCategoryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DiscussionCategory `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DiscussionCategoryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DiscussionCategory `json:"node,omitempty"`
}

// A comment on a discussion.
type DiscussionComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The body as Markdown.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The time when this replied-to comment was deleted
	DeletedAt *string `json:"deletedAt,omitempty"`
	// The discussion this comment was created in
	Discussion *Discussion `json:"discussion,omitempty"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Has this comment been chosen as the answer of its discussion?
	IsAnswer bool `json:"isAnswer"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The threaded replies to this comment.
	Replies DiscussionCommentConnection `json:"replies"`
	// The discussion comment this comment is a reply to
	ReplyTo *DiscussionComment `json:"replyTo,omitempty"`
	// The path for this discussion comment.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// Number of upvotes that this subject has received.
	UpvoteCount int64 `json:"upvoteCount"`
	// The URL for this discussion comment.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Can the current user mark this comment as an answer?
	ViewerCanMarkAsAnswer bool `json:"viewerCanMarkAsAnswer"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Can the current user unmark this comment as an answer?
	ViewerCanUnmarkAsAnswer bool `json:"viewerCanUnmarkAsAnswer"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Whether or not the current user can add or remove an upvote on this subject.
	ViewerCanUpvote bool `json:"viewerCanUpvote"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
	// Whether or not the current user has already upvoted this subject.
	ViewerHasUpvoted bool `json:"viewerHasUpvoted"`
}

func (DiscussionComment) IsComment() {}

// The actor who authored the comment.
func (this DiscussionComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this DiscussionComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this DiscussionComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this DiscussionComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this DiscussionComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this DiscussionComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this DiscussionComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this DiscussionComment) GetEditor() Actor { return this.Editor }
func (this DiscussionComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this DiscussionComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this DiscussionComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this DiscussionComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this DiscussionComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this DiscussionComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this DiscussionComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (DiscussionComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this DiscussionComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (DiscussionComment) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this DiscussionComment) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this DiscussionComment) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this DiscussionComment) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (DiscussionComment) IsNode() {}

// ID of the object.

func (DiscussionComment) IsReactable() {}

// Identifies the primary key from the database.
func (this DiscussionComment) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this DiscussionComment) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this DiscussionComment) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this DiscussionComment) GetViewerCanReact() bool { return this.ViewerCanReact }

func (DiscussionComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this DiscussionComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (DiscussionComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this DiscussionComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (DiscussionComment) IsVotable() {}

// Number of upvotes that this subject has received.
func (this DiscussionComment) GetUpvoteCount() int64 { return this.UpvoteCount }

// Whether or not the current user can add or remove an upvote on this subject.
func (this DiscussionComment) GetViewerCanUpvote() bool { return this.ViewerCanUpvote }

// Whether or not the current user has already upvoted this subject.
func (this DiscussionComment) GetViewerHasUpvoted() bool { return this.ViewerHasUpvoted }

// The connection type for DiscussionComment.
type DiscussionCommentConnection struct {
	// A list of edges.
	Edges []*DiscussionCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DiscussionComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DiscussionCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DiscussionComment `json:"node,omitempty"`
}

// The connection type for Discussion.
type DiscussionConnection struct {
	// A list of edges.
	Edges []*DiscussionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Discussion `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DiscussionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Discussion `json:"node,omitempty"`
}

// Ways in which lists of discussions can be ordered upon return.
type DiscussionOrder struct {
	// The field by which to order discussions.
	Field DiscussionOrderField `json:"field"`
	// The direction in which to order discussions by the specified field.
	Direction OrderDirection `json:"direction"`
}

// A poll for a discussion.
type DiscussionPoll struct {
	// The discussion that this poll belongs to.
	Discussion *Discussion `json:"discussion,omitempty"`
	ID         string      `json:"id"`
	// The options for this poll.
	Options *DiscussionPollOptionConnection `json:"options,omitempty"`
	// The question that is being asked by this poll.
	Question string `json:"question"`
	// The total number of votes that have been cast for this poll.
	TotalVoteCount int64 `json:"totalVoteCount"`
	// Indicates if the viewer has permission to vote in this poll.
	ViewerCanVote bool `json:"viewerCanVote"`
	// Indicates if the viewer has voted for any option in this poll.
	ViewerHasVoted bool `json:"viewerHasVoted"`
}

func (DiscussionPoll) IsNode() {}

// ID of the object.
func (this DiscussionPoll) GetID() string { return this.ID }

// An option for a discussion poll.
type DiscussionPollOption struct {
	ID string `json:"id"`
	// The text for this option.
	Option string `json:"option"`
	// The discussion poll that this option belongs to.
	Poll *DiscussionPoll `json:"poll,omitempty"`
	// The total number of votes that have been cast for this option.
	TotalVoteCount int64 `json:"totalVoteCount"`
	// Indicates if the viewer has voted for this option in the poll.
	ViewerHasVoted bool `json:"viewerHasVoted"`
}

func (DiscussionPollOption) IsNode() {}

// ID of the object.
func (this DiscussionPollOption) GetID() string { return this.ID }

// The connection type for DiscussionPollOption.
type DiscussionPollOptionConnection struct {
	// A list of edges.
	Edges []*DiscussionPollOptionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*DiscussionPollOption `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type DiscussionPollOptionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *DiscussionPollOption `json:"node,omitempty"`
}

// Ordering options for discussion poll option connections.
type DiscussionPollOptionOrder struct {
	// The field to order poll options by.
	Field DiscussionPollOptionOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Autogenerated input type of DismissPullRequestReview
type DismissPullRequestReviewInput struct {
	// The Node ID of the pull request review to modify.
	PullRequestReviewID string `json:"pullRequestReviewId"`
	// The contents of the pull request review dismissal message.
	Message string `json:"message"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DismissPullRequestReview
type DismissPullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The dismissed pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

// Autogenerated input type of DismissRepositoryVulnerabilityAlert
type DismissRepositoryVulnerabilityAlertInput struct {
	// The Dependabot alert ID to dismiss.
	RepositoryVulnerabilityAlertID string `json:"repositoryVulnerabilityAlertId"`
	// The reason the Dependabot alert is being dismissed.
	DismissReason DismissReason `json:"dismissReason"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of DismissRepositoryVulnerabilityAlert
type DismissRepositoryVulnerabilityAlertPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The Dependabot alert that was dismissed
	RepositoryVulnerabilityAlert *RepositoryVulnerabilityAlert `json:"repositoryVulnerabilityAlert,omitempty"`
}

// A draft issue within a project.
type DraftIssue struct {
	// A list of users to assigned to this draft issue.
	Assignees UserConnection `json:"assignees"`
	// The body of the draft issue.
	Body string `json:"body"`
	// The body of the draft issue rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body of the draft issue rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created this draft issue.
	Creator Actor  `json:"creator,omitempty"`
	ID      string `json:"id"`
	// List of items linked with the draft issue (currently draft issue can be linked to only one item).
	ProjectV2Items ProjectV2ItemConnection `json:"projectV2Items"`
	// Projects that link to this draft issue (currently draft issue can be linked to only one project).
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// The title of the draft issue
	Title string `json:"title"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (DraftIssue) IsNode() {}

// ID of the object.
func (this DraftIssue) GetID() string { return this.ID }

func (DraftIssue) IsProjectV2ItemContent() {}

// Specifies a review comment to be left with a Pull Request Review.
type DraftPullRequestReviewComment struct {
	// Path to the file being commented on.
	Path string `json:"path"`
	// Position in the file to leave a comment on.
	Position int64 `json:"position"`
	// Body of the comment to leave.
	Body string `json:"body"`
}

// Specifies a review comment thread to be left with a Pull Request Review.
type DraftPullRequestReviewThread struct {
	// Path to the file being commented on.
	Path string `json:"path"`
	// The line of the blob to which the thread refers. The end of the line range for multi-line comments.
	Line int64 `json:"line"`
	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	Side *DiffSide `json:"side,omitempty"`
	// The first line of the range to which the comment refers.
	StartLine *int64 `json:"startLine,omitempty"`
	// The side of the diff on which the start line resides.
	StartSide *DiffSide `json:"startSide,omitempty"`
	// Body of the comment to leave.
	Body string `json:"body"`
}

// Autogenerated input type of EnablePullRequestAutoMerge
type EnablePullRequestAutoMergeInput struct {
	// ID of the pull request to enable auto-merge on.
	PullRequestID string `json:"pullRequestId"`
	// Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored.
	CommitHeadline *string `json:"commitHeadline,omitempty"`
	// Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored.
	CommitBody *string `json:"commitBody,omitempty"`
	// The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored.
	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
	// The email address to associate with this merge.
	AuthorEmail *string `json:"authorEmail,omitempty"`
	// The expected head OID of the pull request.
	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of EnablePullRequestAutoMerge
type EnablePullRequestAutoMergePayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request auto-merge was enabled on.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of EnqueuePullRequest
type EnqueuePullRequestInput struct {
	// The ID of the pull request to enqueue.
	PullRequestID string `json:"pullRequestId"`
	// Add the pull request to the front of the queue.
	Jump *bool `json:"jump,omitempty"`
	// The expected head OID of the pull request.
	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of EnqueuePullRequest
type EnqueuePullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The merge queue entry for the enqueued pull request.
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`
}

// An account to manage multiple organizations with consolidated policy and billing.
type Enterprise struct {
	// The text of the announcement
	Announcement *string `json:"announcement,omitempty"`
	// The expiration date of the announcement, if any
	AnnouncementExpiresAt *string `json:"announcementExpiresAt,omitempty"`
	// Whether the announcement can be dismissed by the user
	AnnouncementUserDismissible *bool `json:"announcementUserDismissible,omitempty"`
	// A URL pointing to the enterprise's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// Enterprise billing information visible to enterprise billing managers.
	BillingInfo *EnterpriseBillingInfo `json:"billingInfo,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The description of the enterprise.
	Description *string `json:"description,omitempty"`
	// The description of the enterprise as HTML.
	DescriptionHTML string `json:"descriptionHTML"`
	ID              string `json:"id"`
	// The location of the enterprise.
	Location *string `json:"location,omitempty"`
	// A list of users who are members of this enterprise.
	Members EnterpriseMemberConnection `json:"members"`
	// The name of the enterprise.
	Name string `json:"name"`
	// A list of organizations that belong to this enterprise.
	Organizations OrganizationConnection `json:"organizations"`
	// Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
	OwnerInfo *EnterpriseOwnerInfo `json:"ownerInfo,omitempty"`
	// The HTTP path for this enterprise.
	ResourcePath string `json:"resourcePath"`
	// The URL-friendly identifier for the enterprise.
	Slug string `json:"slug"`
	// The HTTP URL for this enterprise.
	URL string `json:"url"`
	// Is the current viewer an admin of this enterprise?
	ViewerIsAdmin bool `json:"viewerIsAdmin"`
	// The URL of the enterprise website.
	WebsiteURL *string `json:"websiteUrl,omitempty"`
}

func (Enterprise) IsAnnouncementBanner() {}

// The text of the announcement
func (this Enterprise) GetAnnouncement() *string { return this.Announcement }

// The expiration date of the announcement, if any
func (this Enterprise) GetAnnouncementExpiresAt() *string { return this.AnnouncementExpiresAt }

// Whether the announcement can be dismissed by the user
func (this Enterprise) GetAnnouncementUserDismissible() *bool {
	return this.AnnouncementUserDismissible
}

func (Enterprise) IsIPAllowListOwner() {}

func (Enterprise) IsNode() {}

// ID of the object.
func (this Enterprise) GetID() string { return this.ID }

func (Enterprise) IsVerifiableDomainOwner() {}

// The connection type for User.
type EnterpriseAdministratorConnection struct {
	// A list of edges.
	Edges []*EnterpriseAdministratorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A User who is an administrator of an enterprise.
type EnterpriseAdministratorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
	// The role of the administrator.
	Role EnterpriseAdministratorRole `json:"role"`
}

// An invitation for a user to become an owner or billing manager of an enterprise.
type EnterpriseAdministratorInvitation struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The email of the person who was invited to the enterprise.
	Email *string `json:"email,omitempty"`
	// The enterprise the invitation is for.
	Enterprise Enterprise `json:"enterprise"`
	ID         string     `json:"id"`
	// The user who was invited to the enterprise.
	Invitee *User `json:"invitee,omitempty"`
	// The user who created the invitation.
	Inviter *User `json:"inviter,omitempty"`
	// The invitee's pending role in the enterprise (owner or billing_manager).
	Role EnterpriseAdministratorRole `json:"role"`
}

func (EnterpriseAdministratorInvitation) IsNode() {}

// ID of the object.
func (this EnterpriseAdministratorInvitation) GetID() string { return this.ID }

// The connection type for EnterpriseAdministratorInvitation.
type EnterpriseAdministratorInvitationConnection struct {
	// A list of edges.
	Edges []*EnterpriseAdministratorInvitationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseAdministratorInvitation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseAdministratorInvitationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseAdministratorInvitation `json:"node,omitempty"`
}

// Ordering options for enterprise administrator invitation connections
type EnterpriseAdministratorInvitationOrder struct {
	// The field to order enterprise administrator invitations by.
	Field EnterpriseAdministratorInvitationOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Enterprise billing information visible to enterprise billing managers and owners.
type EnterpriseBillingInfo struct {
	// The number of licenseable users/emails across the enterprise.
	AllLicensableUsersCount int64 `json:"allLicensableUsersCount"`
	// The number of data packs used by all organizations owned by the enterprise.
	AssetPacks int64 `json:"assetPacks"`
	// The bandwidth quota in GB for all organizations owned by the enterprise.
	BandwidthQuota float64 `json:"bandwidthQuota"`
	// The bandwidth usage in GB for all organizations owned by the enterprise.
	BandwidthUsage float64 `json:"bandwidthUsage"`
	// The bandwidth usage as a percentage of the bandwidth quota.
	BandwidthUsagePercentage int64 `json:"bandwidthUsagePercentage"`
	// The storage quota in GB for all organizations owned by the enterprise.
	StorageQuota float64 `json:"storageQuota"`
	// The storage usage in GB for all organizations owned by the enterprise.
	StorageUsage float64 `json:"storageUsage"`
	// The storage usage as a percentage of the storage quota.
	StorageUsagePercentage int64 `json:"storageUsagePercentage"`
	// The number of available licenses across all owned organizations based on the unique number of billable users.
	TotalAvailableLicenses int64 `json:"totalAvailableLicenses"`
	// The total number of licenses allocated.
	TotalLicenses int64 `json:"totalLicenses"`
}

// The connection type for Enterprise.
type EnterpriseConnection struct {
	// A list of edges.
	Edges []*EnterpriseEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Enterprise `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Enterprise `json:"node,omitempty"`
}

// The connection type for OrganizationInvitation.
type EnterpriseFailedInvitationConnection struct {
	// A list of edges.
	Edges []*EnterpriseFailedInvitationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// Identifies the total count of unique users in the connection.
	TotalUniqueUserCount int64 `json:"totalUniqueUserCount"`
}

// A failed invitation to be a member in an enterprise organization.
type EnterpriseFailedInvitationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

// An identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type EnterpriseIdentityProvider struct {
	// The digest algorithm used to sign SAML requests for the identity provider.
	DigestMethod *SamlDigestAlgorithm `json:"digestMethod,omitempty"`
	// The enterprise this identity provider belongs to.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// ExternalIdentities provisioned by this identity provider.
	ExternalIdentities ExternalIdentityConnection `json:"externalIdentities"`
	ID                 string                     `json:"id"`
	// The x509 certificate used by the identity provider to sign assertions and responses.
	IdpCertificate *string `json:"idpCertificate,omitempty"`
	// The Issuer Entity ID for the SAML identity provider.
	Issuer *string `json:"issuer,omitempty"`
	// Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
	RecoveryCodes []string `json:"recoveryCodes,omitempty"`
	// The signature algorithm used to sign SAML requests for the identity provider.
	SignatureMethod *SamlSignatureAlgorithm `json:"signatureMethod,omitempty"`
	// The URL endpoint for the identity provider's SAML SSO.
	SsoURL *string `json:"ssoUrl,omitempty"`
}

func (EnterpriseIdentityProvider) IsNode() {}

// ID of the object.
func (this EnterpriseIdentityProvider) GetID() string { return this.ID }

// The connection type for EnterpriseMember.
type EnterpriseMemberConnection struct {
	// A list of edges.
	Edges []*EnterpriseMemberEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []EnterpriseMember `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A User who is a member of an enterprise through one or more organizations.
type EnterpriseMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node EnterpriseMember `json:"node,omitempty"`
}

// Ordering options for enterprise member connections.
type EnterpriseMemberOrder struct {
	// The field to order enterprise members by.
	Field EnterpriseMemberOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Ordering options for enterprises.
type EnterpriseOrder struct {
	// The field to order enterprises by.
	Field EnterpriseOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// The connection type for Organization.
type EnterpriseOrganizationMembershipConnection struct {
	// A list of edges.
	Edges []*EnterpriseOrganizationMembershipEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Organization `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An enterprise organization that a user is a member of.
type EnterpriseOrganizationMembershipEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Organization `json:"node,omitempty"`
	// The role of the user in the enterprise membership.
	Role EnterpriseUserAccountMembershipRole `json:"role"`
}

// The connection type for User.
type EnterpriseOutsideCollaboratorConnection struct {
	// A list of edges.
	Edges []*EnterpriseOutsideCollaboratorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A User who is an outside collaborator of an enterprise through one or more organizations.
type EnterpriseOutsideCollaboratorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
	// The enterprise organization repositories this user is a member of.
	Repositories EnterpriseRepositoryInfoConnection `json:"repositories"`
}

// Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type EnterpriseOwnerInfo struct {
	// A list of all of the administrators for this enterprise.
	Admins EnterpriseAdministratorConnection `json:"admins"`
	// A list of users in the enterprise who currently have two-factor authentication disabled.
	AffiliatedUsersWithTwoFactorDisabled UserConnection `json:"affiliatedUsersWithTwoFactorDisabled"`
	// Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
	AffiliatedUsersWithTwoFactorDisabledExist bool `json:"affiliatedUsersWithTwoFactorDisabledExist"`
	// The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
	AllowPrivateRepositoryForkingSetting EnterpriseEnabledDisabledSettingValue `json:"allowPrivateRepositoryForkingSetting"`
	// A list of enterprise organizations configured with the provided private repository forking setting value.
	AllowPrivateRepositoryForkingSettingOrganizations OrganizationConnection `json:"allowPrivateRepositoryForkingSettingOrganizations"`
	// The value for the allow private repository forking policy on the enterprise.
	AllowPrivateRepositoryForkingSettingPolicyValue *EnterpriseAllowPrivateRepositoryForkingPolicyValue `json:"allowPrivateRepositoryForkingSettingPolicyValue,omitempty"`
	// The setting value for base repository permissions for organizations in this enterprise.
	DefaultRepositoryPermissionSetting EnterpriseDefaultRepositoryPermissionSettingValue `json:"defaultRepositoryPermissionSetting"`
	// A list of enterprise organizations configured with the provided base repository permission.
	DefaultRepositoryPermissionSettingOrganizations OrganizationConnection `json:"defaultRepositoryPermissionSettingOrganizations"`
	// A list of domains owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
	Domains VerifiableDomainConnection `json:"domains"`
	// Enterprise Server installations owned by the enterprise.
	EnterpriseServerInstallations EnterpriseServerInstallationConnection `json:"enterpriseServerInstallations"`
	// A list of failed invitations in the enterprise.
	FailedInvitations EnterpriseFailedInvitationConnection `json:"failedInvitations"`
	// The setting value for whether the enterprise has an IP allow list enabled.
	IPAllowListEnabledSetting IPAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting"`
	// The IP addresses that are allowed to access resources owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
	IPAllowListEntries IPAllowListEntryConnection `json:"ipAllowListEntries"`
	// The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
	IPAllowListForInstalledAppsEnabledSetting IPAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting"`
	// Whether or not the base repository permission is currently being updated.
	IsUpdatingDefaultRepositoryPermission bool `json:"isUpdatingDefaultRepositoryPermission"`
	// Whether the two-factor authentication requirement is currently being enforced.
	IsUpdatingTwoFactorRequirement bool `json:"isUpdatingTwoFactorRequirement"`
	// The setting value for whether organization members with admin permissions on a repository can change repository visibility.
	MembersCanChangeRepositoryVisibilitySetting EnterpriseEnabledDisabledSettingValue `json:"membersCanChangeRepositoryVisibilitySetting"`
	// A list of enterprise organizations configured with the provided can change repository visibility setting value.
	MembersCanChangeRepositoryVisibilitySettingOrganizations OrganizationConnection `json:"membersCanChangeRepositoryVisibilitySettingOrganizations"`
	// The setting value for whether members of organizations in the enterprise can create internal repositories.
	MembersCanCreateInternalRepositoriesSetting *bool `json:"membersCanCreateInternalRepositoriesSetting,omitempty"`
	// The setting value for whether members of organizations in the enterprise can create private repositories.
	MembersCanCreatePrivateRepositoriesSetting *bool `json:"membersCanCreatePrivateRepositoriesSetting,omitempty"`
	// The setting value for whether members of organizations in the enterprise can create public repositories.
	MembersCanCreatePublicRepositoriesSetting *bool `json:"membersCanCreatePublicRepositoriesSetting,omitempty"`
	// The setting value for whether members of organizations in the enterprise can create repositories.
	MembersCanCreateRepositoriesSetting *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"membersCanCreateRepositoriesSetting,omitempty"`
	// A list of enterprise organizations configured with the provided repository creation setting value.
	MembersCanCreateRepositoriesSettingOrganizations OrganizationConnection `json:"membersCanCreateRepositoriesSettingOrganizations"`
	// The setting value for whether members with admin permissions for repositories can delete issues.
	MembersCanDeleteIssuesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteIssuesSetting"`
	// A list of enterprise organizations configured with the provided members can delete issues setting value.
	MembersCanDeleteIssuesSettingOrganizations OrganizationConnection `json:"membersCanDeleteIssuesSettingOrganizations"`
	// The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
	MembersCanDeleteRepositoriesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteRepositoriesSetting"`
	// A list of enterprise organizations configured with the provided members can delete repositories setting value.
	MembersCanDeleteRepositoriesSettingOrganizations OrganizationConnection `json:"membersCanDeleteRepositoriesSettingOrganizations"`
	// The setting value for whether members of organizations in the enterprise can invite outside collaborators.
	MembersCanInviteCollaboratorsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanInviteCollaboratorsSetting"`
	// A list of enterprise organizations configured with the provided members can invite collaborators setting value.
	MembersCanInviteCollaboratorsSettingOrganizations OrganizationConnection `json:"membersCanInviteCollaboratorsSettingOrganizations"`
	// Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
	MembersCanMakePurchasesSetting EnterpriseMembersCanMakePurchasesSettingValue `json:"membersCanMakePurchasesSetting"`
	// The setting value for whether members with admin permissions for repositories can update protected branches.
	MembersCanUpdateProtectedBranchesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanUpdateProtectedBranchesSetting"`
	// A list of enterprise organizations configured with the provided members can update protected branches setting value.
	MembersCanUpdateProtectedBranchesSettingOrganizations OrganizationConnection `json:"membersCanUpdateProtectedBranchesSettingOrganizations"`
	// The setting value for whether members can view dependency insights.
	MembersCanViewDependencyInsightsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanViewDependencyInsightsSetting"`
	// A list of enterprise organizations configured with the provided members can view dependency insights setting value.
	MembersCanViewDependencyInsightsSettingOrganizations OrganizationConnection `json:"membersCanViewDependencyInsightsSettingOrganizations"`
	// Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting"`
	// The OIDC Identity Provider for the enterprise.
	OidcProvider *OIDCProvider `json:"oidcProvider,omitempty"`
	// The setting value for whether organization projects are enabled for organizations in this enterprise.
	OrganizationProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"organizationProjectsSetting"`
	// A list of enterprise organizations configured with the provided organization projects setting value.
	OrganizationProjectsSettingOrganizations OrganizationConnection `json:"organizationProjectsSettingOrganizations"`
	// A list of outside collaborators across the repositories in the enterprise.
	OutsideCollaborators EnterpriseOutsideCollaboratorConnection `json:"outsideCollaborators"`
	// A list of pending administrator invitations for the enterprise.
	PendingAdminInvitations EnterpriseAdministratorInvitationConnection `json:"pendingAdminInvitations"`
	// A list of pending collaborator invitations across the repositories in the enterprise.
	PendingCollaboratorInvitations RepositoryInvitationConnection `json:"pendingCollaboratorInvitations"`
	// A list of pending member invitations for organizations in the enterprise.
	PendingMemberInvitations EnterprisePendingMemberInvitationConnection `json:"pendingMemberInvitations"`
	// The setting value for whether repository projects are enabled in this enterprise.
	RepositoryProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"repositoryProjectsSetting"`
	// A list of enterprise organizations configured with the provided repository projects setting value.
	RepositoryProjectsSettingOrganizations OrganizationConnection `json:"repositoryProjectsSettingOrganizations"`
	// The SAML Identity Provider for the enterprise.
	SamlIdentityProvider *EnterpriseIdentityProvider `json:"samlIdentityProvider,omitempty"`
	// A list of enterprise organizations configured with the SAML single sign-on setting value.
	SamlIdentityProviderSettingOrganizations OrganizationConnection `json:"samlIdentityProviderSettingOrganizations"`
	// A list of members with a support entitlement.
	SupportEntitlements EnterpriseMemberConnection `json:"supportEntitlements"`
	// The setting value for whether team discussions are enabled for organizations in this enterprise.
	TeamDiscussionsSetting EnterpriseEnabledDisabledSettingValue `json:"teamDiscussionsSetting"`
	// A list of enterprise organizations configured with the provided team discussions setting value.
	TeamDiscussionsSettingOrganizations OrganizationConnection `json:"teamDiscussionsSettingOrganizations"`
	// The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
	TwoFactorRequiredSetting EnterpriseEnabledSettingValue `json:"twoFactorRequiredSetting"`
	// A list of enterprise organizations configured with the two-factor authentication setting value.
	TwoFactorRequiredSettingOrganizations OrganizationConnection `json:"twoFactorRequiredSettingOrganizations"`
}

// The connection type for OrganizationInvitation.
type EnterprisePendingMemberInvitationConnection struct {
	// A list of edges.
	Edges []*EnterprisePendingMemberInvitationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// Identifies the total count of unique users in the connection.
	TotalUniqueUserCount int64 `json:"totalUniqueUserCount"`
}

// An invitation to be a member in an enterprise organization.
type EnterprisePendingMemberInvitationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

// A subset of repository information queryable from an enterprise.
type EnterpriseRepositoryInfo struct {
	ID string `json:"id"`
	// Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate"`
	// The repository's name.
	Name string `json:"name"`
	// The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner"`
}

func (EnterpriseRepositoryInfo) IsNode() {}

// ID of the object.
func (this EnterpriseRepositoryInfo) GetID() string { return this.ID }

// The connection type for EnterpriseRepositoryInfo.
type EnterpriseRepositoryInfoConnection struct {
	// A list of edges.
	Edges []*EnterpriseRepositoryInfoEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseRepositoryInfo `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseRepositoryInfoEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseRepositoryInfo `json:"node,omitempty"`
}

// An Enterprise Server installation.
type EnterpriseServerInstallation struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The customer name to which the Enterprise Server installation belongs.
	CustomerName string `json:"customerName"`
	// The host name of the Enterprise Server installation.
	HostName string `json:"hostName"`
	ID       string `json:"id"`
	// Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
	IsConnected bool `json:"isConnected"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// User accounts on this Enterprise Server installation.
	UserAccounts EnterpriseServerUserAccountConnection `json:"userAccounts"`
	// User accounts uploads for the Enterprise Server installation.
	UserAccountsUploads EnterpriseServerUserAccountsUploadConnection `json:"userAccountsUploads"`
}

func (EnterpriseServerInstallation) IsNode() {}

// ID of the object.
func (this EnterpriseServerInstallation) GetID() string { return this.ID }

// The connection type for EnterpriseServerInstallation.
type EnterpriseServerInstallationConnection struct {
	// A list of edges.
	Edges []*EnterpriseServerInstallationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseServerInstallation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseServerInstallationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseServerInstallation `json:"node,omitempty"`
}

// The connection type for EnterpriseServerInstallation.
type EnterpriseServerInstallationMembershipConnection struct {
	// A list of edges.
	Edges []*EnterpriseServerInstallationMembershipEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseServerInstallation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An Enterprise Server installation that a user is a member of.
type EnterpriseServerInstallationMembershipEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseServerInstallation `json:"node,omitempty"`
	// The role of the user in the enterprise membership.
	Role EnterpriseUserAccountMembershipRole `json:"role"`
}

// Ordering options for Enterprise Server installation connections.
type EnterpriseServerInstallationOrder struct {
	// The field to order Enterprise Server installations by.
	Field EnterpriseServerInstallationOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A user account on an Enterprise Server installation.
type EnterpriseServerUserAccount struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// User emails belonging to this user account.
	Emails EnterpriseServerUserAccountEmailConnection `json:"emails"`
	// The Enterprise Server installation on which this user account exists.
	EnterpriseServerInstallation EnterpriseServerInstallation `json:"enterpriseServerInstallation"`
	ID                           string                       `json:"id"`
	// Whether the user account is a site administrator on the Enterprise Server installation.
	IsSiteAdmin bool `json:"isSiteAdmin"`
	// The login of the user account on the Enterprise Server installation.
	Login string `json:"login"`
	// The profile name of the user account on the Enterprise Server installation.
	ProfileName *string `json:"profileName,omitempty"`
	// The date and time when the user account was created on the Enterprise Server installation.
	RemoteCreatedAt string `json:"remoteCreatedAt"`
	// The ID of the user account on the Enterprise Server installation.
	RemoteUserID int64 `json:"remoteUserId"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (EnterpriseServerUserAccount) IsNode() {}

// ID of the object.
func (this EnterpriseServerUserAccount) GetID() string { return this.ID }

// The connection type for EnterpriseServerUserAccount.
type EnterpriseServerUserAccountConnection struct {
	// A list of edges.
	Edges []*EnterpriseServerUserAccountEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseServerUserAccount `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseServerUserAccountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseServerUserAccount `json:"node,omitempty"`
}

// An email belonging to a user account on an Enterprise Server installation.
type EnterpriseServerUserAccountEmail struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The email address.
	Email string `json:"email"`
	ID    string `json:"id"`
	// Indicates whether this is the primary email of the associated user account.
	IsPrimary bool `json:"isPrimary"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The user account to which the email belongs.
	UserAccount EnterpriseServerUserAccount `json:"userAccount"`
}

func (EnterpriseServerUserAccountEmail) IsNode() {}

// ID of the object.
func (this EnterpriseServerUserAccountEmail) GetID() string { return this.ID }

// The connection type for EnterpriseServerUserAccountEmail.
type EnterpriseServerUserAccountEmailConnection struct {
	// A list of edges.
	Edges []*EnterpriseServerUserAccountEmailEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseServerUserAccountEmail `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseServerUserAccountEmailEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseServerUserAccountEmail `json:"node,omitempty"`
}

// Ordering options for Enterprise Server user account email connections.
type EnterpriseServerUserAccountEmailOrder struct {
	// The field to order emails by.
	Field EnterpriseServerUserAccountEmailOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Ordering options for Enterprise Server user account connections.
type EnterpriseServerUserAccountOrder struct {
	// The field to order user accounts by.
	Field EnterpriseServerUserAccountOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A user accounts upload from an Enterprise Server installation.
type EnterpriseServerUserAccountsUpload struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The enterprise to which this upload belongs.
	Enterprise Enterprise `json:"enterprise"`
	// The Enterprise Server installation for which this upload was generated.
	EnterpriseServerInstallation EnterpriseServerInstallation `json:"enterpriseServerInstallation"`
	ID                           string                       `json:"id"`
	// The name of the file uploaded.
	Name string `json:"name"`
	// The synchronization state of the upload
	SyncState EnterpriseServerUserAccountsUploadSyncState `json:"syncState"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (EnterpriseServerUserAccountsUpload) IsNode() {}

// ID of the object.
func (this EnterpriseServerUserAccountsUpload) GetID() string { return this.ID }

// The connection type for EnterpriseServerUserAccountsUpload.
type EnterpriseServerUserAccountsUploadConnection struct {
	// A list of edges.
	Edges []*EnterpriseServerUserAccountsUploadEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*EnterpriseServerUserAccountsUpload `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnterpriseServerUserAccountsUploadEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *EnterpriseServerUserAccountsUpload `json:"node,omitempty"`
}

// Ordering options for Enterprise Server user accounts upload connections.
type EnterpriseServerUserAccountsUploadOrder struct {
	// The field to order user accounts uploads by.
	Field EnterpriseServerUserAccountsUploadOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type EnterpriseUserAccount struct {
	// A URL pointing to the enterprise user account's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The enterprise in which this user account exists.
	Enterprise Enterprise `json:"enterprise"`
	// A list of Enterprise Server installations this user is a member of.
	EnterpriseInstallations EnterpriseServerInstallationMembershipConnection `json:"enterpriseInstallations"`
	ID                      string                                           `json:"id"`
	// An identifier for the enterprise user account, a login or email address
	Login string `json:"login"`
	// The name of the enterprise user account
	Name *string `json:"name,omitempty"`
	// A list of enterprise organizations this user is a member of.
	Organizations EnterpriseOrganizationMembershipConnection `json:"organizations"`
	// The HTTP path for this user.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this user.
	URL string `json:"url"`
	// The user within the enterprise.
	User *User `json:"user,omitempty"`
}

func (EnterpriseUserAccount) IsActor() {}

// A URL pointing to the actor's public avatar.
func (this EnterpriseUserAccount) GetAvatarURL() string { return this.AvatarURL }

// The username of the actor.
func (this EnterpriseUserAccount) GetLogin() string { return this.Login }

// The HTTP path for this actor.
func (this EnterpriseUserAccount) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this actor.
func (this EnterpriseUserAccount) GetURL() string { return this.URL }

func (EnterpriseUserAccount) IsEnterpriseMember() {}

func (EnterpriseUserAccount) IsNode() {}

// ID of the object.
func (this EnterpriseUserAccount) GetID() string { return this.ID }

// An environment.
type Environment struct {
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The name of the environment
	Name string `json:"name"`
	// The protection rules defined for this environment
	ProtectionRules DeploymentProtectionRuleConnection `json:"protectionRules"`
}

func (Environment) IsNode() {}

// ID of the object.
func (this Environment) GetID() string { return this.ID }

// The connection type for Environment.
type EnvironmentConnection struct {
	// A list of edges.
	Edges []*EnvironmentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Environment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type EnvironmentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Environment `json:"node,omitempty"`
}

// Ordering options for environments
type Environments struct {
	// The field to order environments by.
	Field EnvironmentOrderField `json:"field"`
	// The direction in which to order environments by the specified field.
	Direction OrderDirection `json:"direction"`
}

// An external identity provisioned by SAML SSO or SCIM. If SAML is configured on the organization, the external identity is visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. If SAML is configured on the enterprise, the external identity is visible to (1) enterprise owners, (2) enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type ExternalIdentity struct {
	// The GUID for this identity
	GUID string `json:"guid"`
	ID   string `json:"id"`
	// Organization invitation for this SCIM-provisioned external identity
	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`
	// SAML Identity attributes
	SamlIdentity *ExternalIdentitySamlAttributes `json:"samlIdentity,omitempty"`
	// SCIM Identity attributes
	ScimIdentity *ExternalIdentityScimAttributes `json:"scimIdentity,omitempty"`
	// User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
	User *User `json:"user,omitempty"`
}

func (ExternalIdentity) IsNode() {}

// ID of the object.
func (this ExternalIdentity) GetID() string { return this.ID }

// An attribute for the External Identity attributes collection
type ExternalIdentityAttribute struct {
	// The attribute metadata as JSON
	Metadata *string `json:"metadata,omitempty"`
	// The attribute name
	Name string `json:"name"`
	// The attribute value
	Value string `json:"value"`
}

// The connection type for ExternalIdentity.
type ExternalIdentityConnection struct {
	// A list of edges.
	Edges []*ExternalIdentityEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ExternalIdentity `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ExternalIdentityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ExternalIdentity `json:"node,omitempty"`
}

// SAML attributes for the External Identity
type ExternalIdentitySamlAttributes struct {
	// SAML Identity attributes
	Attributes []*ExternalIdentityAttribute `json:"attributes"`
	// The emails associated with the SAML identity
	Emails []*UserEmailMetadata `json:"emails,omitempty"`
	// Family name of the SAML identity
	FamilyName *string `json:"familyName,omitempty"`
	// Given name of the SAML identity
	GivenName *string `json:"givenName,omitempty"`
	// The groups linked to this identity in IDP
	Groups []string `json:"groups,omitempty"`
	// The NameID of the SAML identity
	NameID *string `json:"nameId,omitempty"`
	// The userName of the SAML identity
	Username *string `json:"username,omitempty"`
}

// SCIM attributes for the External Identity
type ExternalIdentityScimAttributes struct {
	// The emails associated with the SCIM identity
	Emails []*UserEmailMetadata `json:"emails,omitempty"`
	// Family name of the SCIM identity
	FamilyName *string `json:"familyName,omitempty"`
	// Given name of the SCIM identity
	GivenName *string `json:"givenName,omitempty"`
	// The groups linked to this identity in IDP
	Groups []string `json:"groups,omitempty"`
	// The userName of the SCIM identity
	Username *string `json:"username,omitempty"`
}

// A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
type FileAddition struct {
	// The path in the repository where the file will be located
	Path string `json:"path"`
	// The base64 encoded contents of the file
	Contents string `json:"contents"`
}

// A description of a set of changes to a file tree to be made as part of
// a git commit, modeled as zero or more file `additions` and zero or more
// file `deletions`.
//
// Both fields are optional; omitting both will produce a commit with no
// file changes.
//
// `deletions` and `additions` describe changes to files identified
// by their path in the git tree using unix-style path separators, i.e.
// `/`.  The root of a git tree is an empty string, so paths are not
// slash-prefixed.
//
// `path` values must be unique across all `additions` and `deletions`
// provided.  Any duplication will result in a validation error.
//
// ### Encoding
//
// File contents must be provided in full for each `FileAddition`.
//
// The `contents` of a `FileAddition` must be encoded using RFC 4648
// compliant base64, i.e. correct padding is required and no characters
// outside the standard alphabet may be used.  Invalid base64
// encoding will be rejected with a validation error.
//
// The encoded contents may be binary.
//
// For text files, no assumptions are made about the character encoding of
// the file contents (after base64 decoding).  No charset transcoding or
// line-ending normalization will be performed; it is the client's
// responsibility to manage the character encoding of files they provide.
// However, for maximum compatibility we recommend using UTF-8 encoding
// and ensuring that all files in a repository use a consistent
// line-ending convention (`\n` or `\r\n`), and that all files end
// with a newline.
//
// ### Modeling file changes
//
// Each of the the five types of conceptual changes that can be made in a
// git commit can be described using the `FileChanges` type as follows:
//
// 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
//
//		{
//		  "additions" [
//		    {
//		      "path": "docs/README.txt",
//		      "contents": base64encode("hello world\n")
//		    }
//		  ]
//		}
//
//	 2. Existing file modification: change existing `docs/README.txt` to have new
//	    content `new content here\n`:
//
//	    {
//	    "additions" [
//	    {
//	    "path": "docs/README.txt",
//	    "contents": base64encode("new content here\n")
//	    }
//	    ]
//	    }
//
//	 3. Existing file deletion: remove existing file `docs/README.txt`.
//	    Note that the path is required to exist -- specifying a
//	    path that does not exist on the given branch will abort the
//	    commit and return an error.
//
//	    {
//	    "deletions" [
//	    {
//	    "path": "docs/README.txt"
//	    }
//	    ]
//	    }
//
//	 4. File rename with no changes: rename `docs/README.txt` with
//	    previous content `hello world\n` to the same content at
//	    `newdocs/README.txt`:
//
//	    {
//	    "deletions" [
//	    {
//	    "path": "docs/README.txt",
//	    }
//	    ],
//	    "additions" [
//	    {
//	    "path": "newdocs/README.txt",
//	    "contents": base64encode("hello world\n")
//	    }
//	    ]
//	    }
//
//	 5. File rename with changes: rename `docs/README.txt` with
//	    previous content `hello world\n` to a file at path
//	    `newdocs/README.txt` with content `new contents\n`:
//
//	    {
//	    "deletions" [
//	    {
//	    "path": "docs/README.txt",
//	    }
//	    ],
//	    "additions" [
//	    {
//	    "path": "newdocs/README.txt",
//	    "contents": base64encode("new contents\n")
//	    }
//	    ]
//	    }
type FileChanges struct {
	// Files to delete.
	Deletions []*FileDeletion `json:"deletions,omitempty"`
	// File to add or change.
	Additions []*FileAddition `json:"additions,omitempty"`
}

// A command to delete the file at the given path as part of a commit.
type FileDeletion struct {
	// The path to delete
	Path string `json:"path"`
}

// Autogenerated input type of FollowOrganization
type FollowOrganizationInput struct {
	// ID of the organization to follow.
	OrganizationID string `json:"organizationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of FollowOrganization
type FollowOrganizationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organization that was followed.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of FollowUser
type FollowUserInput struct {
	// ID of the user to follow.
	UserID string `json:"userId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of FollowUser
type FollowUserPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The user that was followed.
	User *User `json:"user,omitempty"`
}

// The connection type for User.
type FollowerConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// The connection type for User.
type FollowingConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A funding platform link for a repository.
type FundingLink struct {
	// The funding platform this link is for.
	Platform FundingPlatform `json:"platform"`
	// The configured URL for this funding link.
	URL string `json:"url"`
}

// A generic hovercard context with a message and icon
type GenericHovercardContext struct {
	// A string describing this context
	Message string `json:"message"`
	// An octicon to accompany this context
	Octicon string `json:"octicon"`
}

func (GenericHovercardContext) IsHovercardContext() {}

// A string describing this context
func (this GenericHovercardContext) GetMessage() string { return this.Message }

// An octicon to accompany this context
func (this GenericHovercardContext) GetOcticon() string { return this.Octicon }

// A Gist.
type Gist struct {
	// A list of comments associated with the gist
	Comments GistCommentConnection `json:"comments"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The gist description.
	Description *string `json:"description,omitempty"`
	// The files in this gist.
	Files []*GistFile `json:"files,omitempty"`
	// A list of forks associated with the gist
	Forks GistConnection `json:"forks"`
	ID    string         `json:"id"`
	// Identifies if the gist is a fork.
	IsFork bool `json:"isFork"`
	// Whether the gist is public or not.
	IsPublic bool `json:"isPublic"`
	// The gist name.
	Name string `json:"name"`
	// The gist owner.
	Owner RepositoryOwner `json:"owner,omitempty"`
	// Identifies when the gist was last pushed to.
	PushedAt *string `json:"pushedAt,omitempty"`
	// The HTML path to this resource.
	ResourcePath string `json:"resourcePath"`
	// Returns a count of how many stargazers there are on this object
	//
	StargazerCount int64 `json:"stargazerCount"`
	// A list of users who have starred this starrable.
	Stargazers StargazerConnection `json:"stargazers"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this Gist.
	URL string `json:"url"`
	// Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred"`
}

func (Gist) IsNode() {}

// ID of the object.
func (this Gist) GetID() string { return this.ID }

func (Gist) IsNotificationsSubject() {}

func (Gist) IsPinnableItem() {}

func (Gist) IsStarrable() {}

// Returns a count of how many stargazers there are on this object
func (this Gist) GetStargazerCount() int64 { return this.StargazerCount }

// A list of users who have starred this starrable.
func (this Gist) GetStargazers() StargazerConnection { return this.Stargazers }

// Returns a boolean indicating whether the viewing user has starred this starrable.
func (this Gist) GetViewerHasStarred() bool { return this.ViewerHasStarred }

func (Gist) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Gist) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Gist) GetURL() string { return this.URL }

// Represents a comment on an Gist.
type GistComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the gist.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// Identifies the comment body.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`
	// The associated gist.
	Gist Gist   `json:"gist"`
	ID   string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (GistComment) IsComment() {}

// The actor who authored the comment.
func (this GistComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this GistComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this GistComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this GistComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this GistComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this GistComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this GistComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this GistComment) GetEditor() Actor { return this.Editor }
func (this GistComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this GistComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this GistComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this GistComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this GistComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this GistComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this GistComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (GistComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this GistComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (GistComment) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this GistComment) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this GistComment) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this GistComment) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (GistComment) IsNode() {}

// ID of the object.

func (GistComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this GistComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (GistComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this GistComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The connection type for GistComment.
type GistCommentConnection struct {
	// A list of edges.
	Edges []*GistCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*GistComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type GistCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *GistComment `json:"node,omitempty"`
}

// The connection type for Gist.
type GistConnection struct {
	// A list of edges.
	Edges []*GistEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Gist `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type GistEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Gist `json:"node,omitempty"`
}

// A file in a gist.
type GistFile struct {
	// The file name encoded to remove characters that are invalid in URL paths.
	EncodedName *string `json:"encodedName,omitempty"`
	// The gist file encoding.
	Encoding *string `json:"encoding,omitempty"`
	// The file extension from the file name.
	Extension *string `json:"extension,omitempty"`
	// Indicates if this file is an image.
	IsImage bool `json:"isImage"`
	// Whether the file's contents were truncated.
	IsTruncated bool `json:"isTruncated"`
	// The programming language this file is written in.
	Language *Language `json:"language,omitempty"`
	// The gist file name.
	Name *string `json:"name,omitempty"`
	// The gist file size in bytes.
	Size *int64 `json:"size,omitempty"`
	// UTF8 text data or null if the file is binary
	Text *string `json:"text,omitempty"`
}

// Ordering options for gist connections
type GistOrder struct {
	// The field to order repositories by.
	Field GistOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Represents an actor in a Git commit (ie. an author or committer).
type GitActor struct {
	// A URL pointing to the author's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// The timestamp of the Git action (authoring or committing).
	Date *string `json:"date,omitempty"`
	// The email in the Git commit.
	Email *string `json:"email,omitempty"`
	// The name in the Git commit.
	Name *string `json:"name,omitempty"`
	// The GitHub user corresponding to the email field. Null if no such user exists.
	User *User `json:"user,omitempty"`
}

// The connection type for GitActor.
type GitActorConnection struct {
	// A list of edges.
	Edges []*GitActorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*GitActor `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type GitActorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *GitActor `json:"node,omitempty"`
}

// Represents information about the GitHub instance.
type GitHubMetadata struct {
	// Returns a String that's a SHA of `github-services`
	GitHubServicesSha string `json:"gitHubServicesSha"`
	// IP addresses that users connect to for git operations
	GitIPAddresses []string `json:"gitIpAddresses,omitempty"`
	// IP addresses that GitHub Enterprise Importer uses for outbound connections
	GithubEnterpriseImporterIPAddresses []string `json:"githubEnterpriseImporterIpAddresses,omitempty"`
	// IP addresses that service hooks are sent from
	HookIPAddresses []string `json:"hookIpAddresses,omitempty"`
	// IP addresses that the importer connects from
	ImporterIPAddresses []string `json:"importerIpAddresses,omitempty"`
	// Whether or not users are verified
	IsPasswordAuthenticationVerifiable bool `json:"isPasswordAuthenticationVerifiable"`
	// IP addresses for GitHub Pages' A records
	PagesIPAddresses []string `json:"pagesIpAddresses,omitempty"`
}

// Represents a GPG signature on a Commit or Tag.
type GpgSignature struct {
	// Email used to sign this object.
	Email string `json:"email"`
	// True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid"`
	// Hex-encoded ID of the key that signed this object.
	KeyID *string `json:"keyId,omitempty"`
	// Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload"`
	// ASCII-armored signature header from object.
	Signature string `json:"signature"`
	// GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`
	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state"`
	// True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub"`
}

func (GpgSignature) IsGitSignature() {}

// Email used to sign this object.
func (this GpgSignature) GetEmail() string { return this.Email }

// True if the signature is valid and verified by GitHub.
func (this GpgSignature) GetIsValid() bool { return this.IsValid }

// Payload for GPG signing object. Raw ODB object without the signature header.
func (this GpgSignature) GetPayload() string { return this.Payload }

// ASCII-armored signature header from object.
func (this GpgSignature) GetSignature() string { return this.Signature }

// GitHub user corresponding to the email signing this commit.
func (this GpgSignature) GetSigner() *User { return this.Signer }

// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
func (this GpgSignature) GetState() GitSignatureState { return this.State }

// True if the signature was made with GitHub's signing key.
func (this GpgSignature) GetWasSignedByGitHub() bool { return this.WasSignedByGitHub }

// Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
type GrantEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	EnterpriseID string `json:"enterpriseId"`
	// The login of the user to grant the migrator role
	Login string `json:"login"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
type GrantEnterpriseOrganizationsMigratorRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organizations that had the migrator role applied to for the given user.
	Organizations *OrganizationConnection `json:"organizations,omitempty"`
}

// Autogenerated input type of GrantMigratorRole
type GrantMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to.
	OrganizationID string `json:"organizationId"`
	// The user login or Team slug to grant the migrator role.
	Actor string `json:"actor"`
	// Specifies the type of the actor, can be either USER or TEAM.
	ActorType ActorType `json:"actorType"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of GrantMigratorRole
type GrantMigratorRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Represents a 'head_ref_deleted' event on a given pull request.
type HeadRefDeletedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the Ref associated with the `head_ref_deleted` event.
	HeadRef *Ref `json:"headRef,omitempty"`
	// Identifies the name of the Ref associated with the `head_ref_deleted` event.
	HeadRefName string `json:"headRefName"`
	ID          string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (HeadRefDeletedEvent) IsNode() {}

// ID of the object.
func (this HeadRefDeletedEvent) GetID() string { return this.ID }

func (HeadRefDeletedEvent) IsPullRequestTimelineItem() {}

func (HeadRefDeletedEvent) IsPullRequestTimelineItems() {}

// Represents a 'head_ref_force_pushed' event on a given pull request.
type HeadRefForcePushedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the after commit SHA for the 'head_ref_force_pushed' event.
	AfterCommit *Commit `json:"afterCommit,omitempty"`
	// Identifies the before commit SHA for the 'head_ref_force_pushed' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (HeadRefForcePushedEvent) IsNode() {}

// ID of the object.
func (this HeadRefForcePushedEvent) GetID() string { return this.ID }

func (HeadRefForcePushedEvent) IsPullRequestTimelineItem() {}

func (HeadRefForcePushedEvent) IsPullRequestTimelineItems() {}

// Represents a 'head_ref_restored' event on a given pull request.
type HeadRefRestoredEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
}

func (HeadRefRestoredEvent) IsNode() {}

// ID of the object.
func (this HeadRefRestoredEvent) GetID() string { return this.ID }

func (HeadRefRestoredEvent) IsPullRequestTimelineItem() {}

func (HeadRefRestoredEvent) IsPullRequestTimelineItems() {}

// Detail needed to display a hovercard for a user
type Hovercard struct {
	// Each of the contexts for this hovercard
	Contexts []HovercardContext `json:"contexts"`
}

// Autogenerated input type of InviteEnterpriseAdmin
type InviteEnterpriseAdminInput struct {
	// The ID of the enterprise to which you want to invite an administrator.
	EnterpriseID string `json:"enterpriseId"`
	// The login of a user to invite as an administrator.
	Invitee *string `json:"invitee,omitempty"`
	// The email of the person to invite as an administrator.
	Email *string `json:"email,omitempty"`
	// The role of the administrator.
	Role *EnterpriseAdministratorRole `json:"role,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of InviteEnterpriseAdmin
type InviteEnterpriseAdminPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The created enterprise administrator invitation.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
}

// An IP address or range of addresses that is allowed to access an owner's resources.
type IPAllowListEntry struct {
	// A single IP address or range of IP addresses in CIDR notation.
	AllowListValue string `json:"allowListValue"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the entry is currently active.
	IsActive bool `json:"isActive"`
	// The name of the IP allow list entry.
	Name *string `json:"name,omitempty"`
	// The owner of the IP allow list entry.
	Owner IPAllowListOwner `json:"owner"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (IPAllowListEntry) IsNode() {}

// ID of the object.
func (this IPAllowListEntry) GetID() string { return this.ID }

// The connection type for IpAllowListEntry.
type IPAllowListEntryConnection struct {
	// A list of edges.
	Edges []*IPAllowListEntryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*IPAllowListEntry `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type IPAllowListEntryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *IPAllowListEntry `json:"node,omitempty"`
}

// Ordering options for IP allow list entry connections.
type IPAllowListEntryOrder struct {
	// The field to order IP allow list entries by.
	Field IPAllowListEntryOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type Issue struct {
	// Reason that the conversation was locked.
	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
	// A list of Users assigned to this object.
	Assignees UserConnection `json:"assignees"`
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// Identifies the body of the issue.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The http path for this issue body
	BodyResourcePath string `json:"bodyResourcePath"`
	// Identifies the body of the issue rendered to text.
	BodyText string `json:"bodyText"`
	// The http URL for this issue body
	BodyURL string `json:"bodyUrl"`
	// Indicates if the object is closed (definition of closed may depend on type)
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// A list of comments associated with the Issue.
	Comments IssueCommentConnection `json:"comments"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`
	// Identifies the primary key from the database as a BigInt.
	FullDatabaseID *string `json:"fullDatabaseId,omitempty"`
	// The hovercard information for this issue
	Hovercard Hovercard `json:"hovercard"`
	ID        string    `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Indicates whether or not this issue is currently pinned to the repository issues list
	IsPinned *bool `json:"isPinned,omitempty"`
	// Is this issue read by the viewer
	IsReadByViewer *bool `json:"isReadByViewer,omitempty"`
	// A list of labels associated with the object.
	Labels *LabelConnection `json:"labels,omitempty"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Branches linked to this issue.
	LinkedBranches LinkedBranchConnection `json:"linkedBranches"`
	// `true` if the object is locked
	Locked bool `json:"locked"`
	// Identifies the milestone associated with the issue.
	Milestone *Milestone `json:"milestone,omitempty"`
	// Identifies the issue number.
	Number int64 `json:"number"`
	// A list of Users that are participating in the Issue conversation.
	Participants UserConnection `json:"participants"`
	// List of project cards associated with this issue.
	ProjectCards ProjectCardConnection `json:"projectCards"`
	// List of project items associated with this issue.
	ProjectItems ProjectV2ItemConnection `json:"projectItems"`
	// Find a project by number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// A list of projects under the owner.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path for this issue
	ResourcePath string `json:"resourcePath"`
	// Identifies the state of the issue.
	State IssueState `json:"state"`
	// Identifies the reason for the issue state.
	StateReason *IssueStateReason `json:"stateReason,omitempty"`
	// A list of events, comments, commits, etc. associated with the issue.
	Timeline IssueTimelineConnection `json:"timeline"`
	// A list of events, comments, commits, etc. associated with the issue.
	TimelineItems IssueTimelineItemsConnection `json:"timelineItems"`
	// Identifies the issue title.
	Title string `json:"title"`
	// Identifies the issue title rendered to HTML.
	TitleHTML string `json:"titleHTML"`
	// A list of issues that track this issue
	TrackedInIssues IssueConnection `json:"trackedInIssues"`
	// A list of issues tracked inside the current issue
	TrackedIssues IssueConnection `json:"trackedIssues"`
	// The number of tracked issues for this issue
	TrackedIssuesCount int64 `json:"trackedIssuesCount"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this issue
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
	// Identifies the viewer's thread subscription form action.
	ViewerThreadSubscriptionFormAction *ThreadSubscriptionFormAction `json:"viewerThreadSubscriptionFormAction,omitempty"`
	// Identifies the viewer's thread subscription status.
	ViewerThreadSubscriptionStatus *ThreadSubscriptionState `json:"viewerThreadSubscriptionStatus,omitempty"`
}

func (Issue) IsAssignable() {}

// A list of Users assigned to this object.
func (this Issue) GetAssignees() UserConnection { return this.Assignees }

func (Issue) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this Issue) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this Issue) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this Issue) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this Issue) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (Issue) IsComment() {}

// The actor who authored the comment.
func (this Issue) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this Issue) GetAuthorAssociation() CommentAuthorAssociation { return this.AuthorAssociation }

// The body as Markdown.
func (this Issue) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this Issue) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this Issue) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this Issue) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this Issue) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this Issue) GetEditor() Actor { return this.Editor }
func (this Issue) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this Issue) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this Issue) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this Issue) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this Issue) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this Issue) GetUserContentEdits() *UserContentEditConnection { return this.UserContentEdits }

// Did the viewer author this comment.
func (this Issue) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (Issue) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this Issue) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (Issue) IsIssueOrPullRequest() {}

func (Issue) IsLabelable() {}

// A list of labels associated with the object.
func (this Issue) GetLabels() *LabelConnection { return this.Labels }

func (Issue) IsLockable() {}

// Reason that the conversation was locked.
func (this Issue) GetActiveLockReason() *LockReason { return this.ActiveLockReason }

// `true` if the object is locked
func (this Issue) GetLocked() bool { return this.Locked }

func (Issue) IsMilestoneItem() {}

func (Issue) IsNode() {}

// ID of the object.

func (Issue) IsNotificationsSubject() {}

func (Issue) IsProjectCardItem() {}

func (Issue) IsProjectV2ItemContent() {}

func (Issue) IsProjectV2Owner() {}

// Find a project by number.
func (this Issue) GetProjectV2() *ProjectV2 { return this.ProjectV2 }

// A list of projects under the owner.
func (this Issue) GetProjectsV2() ProjectV2Connection { return this.ProjectsV2 }

func (Issue) IsReactable() {}

// Identifies the primary key from the database.
func (this Issue) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this Issue) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this Issue) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this Issue) GetViewerCanReact() bool { return this.ViewerCanReact }

func (Issue) IsReferencedSubject() {}

func (Issue) IsRenamedTitleSubject() {}

func (Issue) IsRepositoryNode() {}

// The repository associated with this node.
func (this Issue) GetRepository() Repository { return this.Repository }

func (Issue) IsSearchResultItem() {}

func (Issue) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this Issue) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this Issue) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (Issue) IsSubscribableThread() {}

// Identifies the viewer's thread subscription form action.
func (this Issue) GetViewerThreadSubscriptionFormAction() *ThreadSubscriptionFormAction {
	return this.ViewerThreadSubscriptionFormAction
}

// Identifies the viewer's thread subscription status.
func (this Issue) GetViewerThreadSubscriptionStatus() *ThreadSubscriptionState {
	return this.ViewerThreadSubscriptionStatus
}

func (Issue) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Issue) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Issue) GetURL() string { return this.URL }

func (Issue) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this Issue) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (Issue) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this Issue) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// Represents a comment on an Issue.
type IssueComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The body as Markdown.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`
	// Identifies the primary key from the database as a BigInt.
	FullDatabaseID *string `json:"fullDatabaseId,omitempty"`
	ID             string  `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// Identifies the issue associated with the comment.
	Issue Issue `json:"issue"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// Returns the pull request associated with the comment, if this comment was made on a
	// pull request.
	//
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path for this issue comment
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this issue comment
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (IssueComment) IsComment() {}

// The actor who authored the comment.
func (this IssueComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this IssueComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this IssueComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this IssueComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this IssueComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this IssueComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this IssueComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this IssueComment) GetEditor() Actor { return this.Editor }
func (this IssueComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this IssueComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this IssueComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this IssueComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this IssueComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this IssueComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this IssueComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (IssueComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this IssueComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (IssueComment) IsIssueTimelineItem() {}

func (IssueComment) IsIssueTimelineItems() {}

func (IssueComment) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this IssueComment) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this IssueComment) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this IssueComment) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (IssueComment) IsNode() {}

// ID of the object.

func (IssueComment) IsPullRequestTimelineItem() {}

func (IssueComment) IsPullRequestTimelineItems() {}

func (IssueComment) IsReactable() {}

// Identifies the primary key from the database.
func (this IssueComment) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this IssueComment) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this IssueComment) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this IssueComment) GetViewerCanReact() bool { return this.ViewerCanReact }

func (IssueComment) IsRepositoryNode() {}

// The repository associated with this node.
func (this IssueComment) GetRepository() Repository { return this.Repository }

func (IssueComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this IssueComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (IssueComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this IssueComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The connection type for IssueComment.
type IssueCommentConnection struct {
	// A list of edges.
	Edges []*IssueCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*IssueComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type IssueCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *IssueComment `json:"node,omitempty"`
}

// Ways in which lists of issue comments can be ordered upon return.
type IssueCommentOrder struct {
	// The field in which to order issue comments by.
	Field IssueCommentOrderField `json:"field"`
	// The direction in which to order issue comments by the specified field.
	Direction OrderDirection `json:"direction"`
}

// The connection type for Issue.
type IssueConnection struct {
	// A list of edges.
	Edges []*IssueEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Issue `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// This aggregates issues opened by a user within one repository.
type IssueContributionsByRepository struct {
	// The issue contributions.
	Contributions CreatedIssueContributionConnection `json:"contributions"`
	// The repository in which the issues were opened.
	Repository Repository `json:"repository"`
}

// An edge in a connection.
type IssueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Issue `json:"node,omitempty"`
}

// Ways in which to filter lists of issues.
type IssueFilters struct {
	// List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
	Assignee *string `json:"assignee,omitempty"`
	// List issues created by given name.
	CreatedBy *string `json:"createdBy,omitempty"`
	// List issues where the list of label names exist on the issue.
	Labels []string `json:"labels,omitempty"`
	// List issues where the given name is mentioned in the issue.
	Mentioned *string `json:"mentioned,omitempty"`
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	Milestone *string `json:"milestone,omitempty"`
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	MilestoneNumber *string `json:"milestoneNumber,omitempty"`
	// List issues that have been updated at or after the given date.
	Since *string `json:"since,omitempty"`
	// List issues filtered by the list of states given.
	States []IssueState `json:"states,omitempty"`
	// List issues subscribed to by viewer.
	ViewerSubscribed *bool `json:"viewerSubscribed,omitempty"`
}

// Ways in which lists of issues can be ordered upon return.
type IssueOrder struct {
	// The field in which to order issues by.
	Field IssueOrderField `json:"field"`
	// The direction in which to order issues by the specified field.
	Direction OrderDirection `json:"direction"`
}

// A repository issue template.
type IssueTemplate struct {
	// The template purpose.
	About *string `json:"about,omitempty"`
	// The suggested assignees.
	Assignees UserConnection `json:"assignees"`
	// The suggested issue body.
	Body *string `json:"body,omitempty"`
	// The template filename.
	Filename string `json:"filename"`
	// The suggested issue labels
	Labels *LabelConnection `json:"labels,omitempty"`
	// The template name.
	Name string `json:"name"`
	// The suggested issue title.
	Title *string `json:"title,omitempty"`
}

// The connection type for IssueTimelineItem.
type IssueTimelineConnection struct {
	// A list of edges.
	Edges []*IssueTimelineItemEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []IssueTimelineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type IssueTimelineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node IssueTimelineItem `json:"node,omitempty"`
}

// The connection type for IssueTimelineItems.
type IssueTimelineItemsConnection struct {
	// A list of edges.
	Edges []*IssueTimelineItemsEdge `json:"edges,omitempty"`
	// Identifies the count of items after applying `before` and `after` filters.
	FilteredCount int64 `json:"filteredCount"`
	// A list of nodes.
	Nodes []IssueTimelineItems `json:"nodes,omitempty"`
	// Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
	PageCount int64 `json:"pageCount"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// Identifies the date and time when the timeline was last updated.
	UpdatedAt string `json:"updatedAt"`
}

// An edge in a connection.
type IssueTimelineItemsEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node IssueTimelineItems `json:"node,omitempty"`
}

// Represents a user signing up for a GitHub account.
type JoinedGitHubContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (JoinedGitHubContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this JoinedGitHubContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this JoinedGitHubContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this JoinedGitHubContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this JoinedGitHubContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this JoinedGitHubContribution) GetUser() User { return this.User }

// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type Label struct {
	// Identifies the label color.
	Color string `json:"color"`
	// Identifies the date and time when the label was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// A brief description of this label.
	Description *string `json:"description,omitempty"`
	ID          string  `json:"id"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// A list of issues associated with this label.
	Issues IssueConnection `json:"issues"`
	// Identifies the label name.
	Name string `json:"name"`
	// A list of pull requests associated with this label.
	PullRequests PullRequestConnection `json:"pullRequests"`
	// The repository associated with this label.
	Repository Repository `json:"repository"`
	// The HTTP path for this label.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// The HTTP URL for this label.
	URL string `json:"url"`
}

func (Label) IsNode() {}

// ID of the object.
func (this Label) GetID() string { return this.ID }

// The connection type for Label.
type LabelConnection struct {
	// A list of edges.
	Edges []*LabelEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Label `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type LabelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Label `json:"node,omitempty"`
}

// Ways in which lists of labels can be ordered upon return.
type LabelOrder struct {
	// The field in which to order labels by.
	Field LabelOrderField `json:"field"`
	// The direction in which to order labels by the specified field.
	Direction OrderDirection `json:"direction"`
}

// Represents a 'labeled' event on a given issue or pull request.
type LabeledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the label associated with the 'labeled' event.
	Label Label `json:"label"`
	// Identifies the `Labelable` associated with the event.
	Labelable Labelable `json:"labelable"`
}

func (LabeledEvent) IsIssueTimelineItem() {}

func (LabeledEvent) IsIssueTimelineItems() {}

func (LabeledEvent) IsNode() {}

// ID of the object.
func (this LabeledEvent) GetID() string { return this.ID }

func (LabeledEvent) IsPullRequestTimelineItem() {}

func (LabeledEvent) IsPullRequestTimelineItems() {}

// Represents a given language found in repositories.
type Language struct {
	// The color defined for the current language.
	Color *string `json:"color,omitempty"`
	ID    string  `json:"id"`
	// The name of the current language.
	Name string `json:"name"`
}

func (Language) IsNode() {}

// ID of the object.
func (this Language) GetID() string { return this.ID }

// A list of languages associated with the parent.
type LanguageConnection struct {
	// A list of edges.
	Edges []*LanguageEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Language `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// The total size in bytes of files written in that language.
	TotalSize int64 `json:"totalSize"`
}

// Represents the language of a repository.
type LanguageEdge struct {
	Cursor string   `json:"cursor"`
	Node   Language `json:"node"`
	// The number of bytes of code written in the language.
	Size int64 `json:"size"`
}

// Ordering options for language connections.
type LanguageOrder struct {
	// The field to order languages by.
	Field LanguageOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A repository's open source license
type License struct {
	// The full text of the license
	Body string `json:"body"`
	// The conditions set by the license
	Conditions []*LicenseRule `json:"conditions"`
	// A human-readable description of the license
	Description *string `json:"description,omitempty"`
	// Whether the license should be featured
	Featured bool `json:"featured"`
	// Whether the license should be displayed in license pickers
	Hidden bool   `json:"hidden"`
	ID     string `json:"id"`
	// Instructions on how to implement the license
	Implementation *string `json:"implementation,omitempty"`
	// The lowercased SPDX ID of the license
	Key string `json:"key"`
	// The limitations set by the license
	Limitations []*LicenseRule `json:"limitations"`
	// The license full name specified by <https://spdx.org/licenses>
	Name string `json:"name"`
	// Customary short name if applicable (e.g, GPLv3)
	Nickname *string `json:"nickname,omitempty"`
	// The permissions set by the license
	Permissions []*LicenseRule `json:"permissions"`
	// Whether the license is a pseudo-license placeholder (e.g., other, no-license)
	PseudoLicense bool `json:"pseudoLicense"`
	// Short identifier specified by <https://spdx.org/licenses>
	SpdxID *string `json:"spdxId,omitempty"`
	// URL to the license on <https://choosealicense.com>
	URL *string `json:"url,omitempty"`
}

func (License) IsNode() {}

// ID of the object.
func (this License) GetID() string { return this.ID }

// Describes a License's conditions, permissions, and limitations
type LicenseRule struct {
	// A description of the rule
	Description string `json:"description"`
	// The machine-readable rule key
	Key string `json:"key"`
	// The human-readable rule label
	Label string `json:"label"`
}

// Autogenerated input type of LinkProjectV2ToRepository
type LinkProjectV2ToRepositoryInput struct {
	// The ID of the project to link to the repository.
	ProjectID string `json:"projectId"`
	// The ID of the repository to link to the project.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of LinkProjectV2ToRepository
type LinkProjectV2ToRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository the project is linked to.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of LinkProjectV2ToTeam
type LinkProjectV2ToTeamInput struct {
	// The ID of the project to link to the team.
	ProjectID string `json:"projectId"`
	// The ID of the team to link to the project.
	TeamID string `json:"teamId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of LinkProjectV2ToTeam
type LinkProjectV2ToTeamPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The team the project is linked to
	Team *Team `json:"team,omitempty"`
}

// Autogenerated input type of LinkRepositoryToProject
type LinkRepositoryToProjectInput struct {
	// The ID of the Project to link to a Repository
	ProjectID string `json:"projectId"`
	// The ID of the Repository to link to a Project.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of LinkRepositoryToProject
type LinkRepositoryToProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The linked Project.
	Project *Project `json:"project,omitempty"`
	// The linked Repository.
	Repository *Repository `json:"repository,omitempty"`
}

// A branch linked to an issue.
type LinkedBranch struct {
	ID string `json:"id"`
	// The branch's ref.
	Ref *Ref `json:"ref,omitempty"`
}

func (LinkedBranch) IsNode() {}

// ID of the object.
func (this LinkedBranch) GetID() string { return this.ID }

// The connection type for LinkedBranch.
type LinkedBranchConnection struct {
	// A list of edges.
	Edges []*LinkedBranchEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*LinkedBranch `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type LinkedBranchEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *LinkedBranch `json:"node,omitempty"`
}

// Autogenerated input type of LockLockable
type LockLockableInput struct {
	// ID of the item to be locked.
	LockableID string `json:"lockableId"`
	// A reason for why the item will be locked.
	LockReason *LockReason `json:"lockReason,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of LockLockable
type LockLockablePayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item that was locked.
	LockedRecord Lockable `json:"lockedRecord,omitempty"`
}

// Represents a 'locked' event on a given issue or pull request.
type LockedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Reason that the conversation was locked (optional).
	LockReason *LockReason `json:"lockReason,omitempty"`
	// Object that was locked.
	Lockable Lockable `json:"lockable"`
}

func (LockedEvent) IsIssueTimelineItem() {}

func (LockedEvent) IsIssueTimelineItems() {}

func (LockedEvent) IsNode() {}

// ID of the object.
func (this LockedEvent) GetID() string { return this.ID }

func (LockedEvent) IsPullRequestTimelineItem() {}

func (LockedEvent) IsPullRequestTimelineItems() {}

// A placeholder user for attribution of imported data on GitHub.
type Mannequin struct {
	// A URL pointing to the GitHub App's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// The user that has claimed the data attributed to this mannequin.
	Claimant *User `json:"claimant,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The mannequin's email on the source instance.
	Email *string `json:"email,omitempty"`
	ID    string  `json:"id"`
	// The username of the actor.
	Login string `json:"login"`
	// The HTML path to this resource.
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The URL to this resource.
	URL string `json:"url"`
}

func (Mannequin) IsActor() {}

// A URL pointing to the actor's public avatar.
func (this Mannequin) GetAvatarURL() string { return this.AvatarURL }

// The username of the actor.
func (this Mannequin) GetLogin() string { return this.Login }

// The HTTP path for this actor.
func (this Mannequin) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this actor.
func (this Mannequin) GetURL() string { return this.URL }

func (Mannequin) IsAssignee() {}

func (Mannequin) IsClaimable() {}

func (Mannequin) IsNode() {}

// ID of the object.
func (this Mannequin) GetID() string { return this.ID }

func (Mannequin) IsReactor() {}

func (Mannequin) IsRequestedReviewer() {}

func (Mannequin) IsUniformResourceLocatable() {}

// The HTML path to this resource.

// The URL to this resource.

// The connection type for Mannequin.
type MannequinConnection struct {
	// A list of edges.
	Edges []*MannequinEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Mannequin `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a mannequin.
type MannequinEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Mannequin `json:"node,omitempty"`
}

// Ordering options for mannequins.
type MannequinOrder struct {
	// The field to order mannequins by.
	Field MannequinOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Autogenerated input type of MarkDiscussionCommentAsAnswer
type MarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to mark as an answer.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkDiscussionCommentAsAnswer
type MarkDiscussionCommentAsAnswerPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that includes the chosen comment.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of MarkFileAsViewed
type MarkFileAsViewedInput struct {
	// The Node ID of the pull request.
	PullRequestID string `json:"pullRequestId"`
	// The path of the file to mark as viewed
	Path string `json:"path"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkFileAsViewed
type MarkFileAsViewedPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of MarkNotificationAsDone
type MarkNotificationAsDoneInput struct {
	// The NotificationThread id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationAsDone
type MarkNotificationAsDonePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of MarkNotificationAsRead
type MarkNotificationAsReadInput struct {
	// The NotificationThread id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationAsRead
type MarkNotificationAsReadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of MarkNotificationAsUndone
type MarkNotificationAsUndoneInput struct {
	// The NotificationThread id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationAsUndone
type MarkNotificationAsUndonePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of MarkNotificationAsUnread
type MarkNotificationAsUnreadInput struct {
	// The NotificationThread id.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationAsUnread
type MarkNotificationAsUnreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of MarkNotificationSubjectAsRead
type MarkNotificationSubjectAsReadInput struct {
	// The id of the notification subject to mark as read.
	SubjectID string `json:"subjectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationSubjectAsRead
type MarkNotificationSubjectAsReadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
	// The user that the saved notification belongs to.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of MarkNotificationsAsDone
type MarkNotificationsAsDoneInput struct {
	// The NotificationThread IDs that will be marked as done.
	Ids []string `json:"ids"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationsAsDone
type MarkNotificationsAsDonePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of MarkNotificationsAsRead
type MarkNotificationsAsReadInput struct {
	// The NotificationThread IDs that will be marked as read.
	Ids []string `json:"ids"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationsAsRead
type MarkNotificationsAsReadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of MarkNotificationsAsUndone
type MarkNotificationsAsUndoneInput struct {
	// The NotificationThread IDs to be marked as undone.
	Ids []string `json:"ids"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationsAsUndone
type MarkNotificationsAsUndonePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of MarkNotificationsAsUnread
type MarkNotificationsAsUnreadInput struct {
	// The NotificationThread IDs that will be marked as unread.
	Ids []string `json:"ids"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkNotificationsAsUnread
type MarkNotificationsAsUnreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Autogenerated input type of MarkProjectV2AsTemplate
type MarkProjectV2AsTemplateInput struct {
	// The ID of the Project to mark as a template.
	ProjectID string `json:"projectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkProjectV2AsTemplate
type MarkProjectV2AsTemplatePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of MarkPullRequestReadyForReview
type MarkPullRequestReadyForReviewInput struct {
	// ID of the pull request to be marked as ready for review.
	PullRequestID string `json:"pullRequestId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MarkPullRequestReadyForReview
type MarkPullRequestReadyForReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that is ready for review.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Represents a 'marked_as_duplicate' event on a given issue or pull request.
type MarkedAsDuplicateEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// The authoritative issue or pull request which has been duplicated by another.
	Canonical IssueOrPullRequest `json:"canonical,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The issue or pull request which has been marked as a duplicate of another.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
	ID        string             `json:"id"`
	// Canonical and duplicate belong to different repositories.
	IsCrossRepository bool `json:"isCrossRepository"`
}

func (MarkedAsDuplicateEvent) IsIssueTimelineItems() {}

func (MarkedAsDuplicateEvent) IsNode() {}

// ID of the object.
func (this MarkedAsDuplicateEvent) GetID() string { return this.ID }

func (MarkedAsDuplicateEvent) IsPullRequestTimelineItems() {}

// A public description of a Marketplace category.
type MarketplaceCategory struct {
	// The category's description.
	Description *string `json:"description,omitempty"`
	// The technical description of how apps listed in this category work with GitHub.
	HowItWorks *string `json:"howItWorks,omitempty"`
	ID         string  `json:"id"`
	// The category's name.
	Name string `json:"name"`
	// How many Marketplace listings have this as their primary category.
	PrimaryListingCount int64 `json:"primaryListingCount"`
	// The HTTP path for this Marketplace category.
	ResourcePath string `json:"resourcePath"`
	// How many Marketplace listings have this as their secondary category.
	SecondaryListingCount int64 `json:"secondaryListingCount"`
	// The short name of the category used in its URL.
	Slug string `json:"slug"`
	// The HTTP URL for this Marketplace category.
	URL string `json:"url"`
}

func (MarketplaceCategory) IsNode() {}

// ID of the object.
func (this MarketplaceCategory) GetID() string { return this.ID }

// A listing in the GitHub integration marketplace.
type MarketplaceListing struct {
	// The GitHub App this listing represents.
	App *App `json:"app,omitempty"`
	// URL to the listing owner's company site.
	CompanyURL *string `json:"companyUrl,omitempty"`
	// The HTTP path for configuring access to the listing's integration or OAuth app
	ConfigurationResourcePath string `json:"configurationResourcePath"`
	// The HTTP URL for configuring access to the listing's integration or OAuth app
	ConfigurationURL string `json:"configurationUrl"`
	// URL to the listing's documentation.
	DocumentationURL *string `json:"documentationUrl,omitempty"`
	// The listing's detailed description.
	ExtendedDescription *string `json:"extendedDescription,omitempty"`
	// The listing's detailed description rendered to HTML.
	ExtendedDescriptionHTML string `json:"extendedDescriptionHTML"`
	// The listing's introductory description.
	FullDescription string `json:"fullDescription"`
	// The listing's introductory description rendered to HTML.
	FullDescriptionHTML string `json:"fullDescriptionHTML"`
	// Does this listing have any plans with a free trial?
	HasPublishedFreeTrialPlans bool `json:"hasPublishedFreeTrialPlans"`
	// Does this listing have a terms of service link?
	HasTermsOfService bool `json:"hasTermsOfService"`
	// Whether the creator of the app is a verified org
	HasVerifiedOwner bool `json:"hasVerifiedOwner"`
	// A technical description of how this app works with GitHub.
	HowItWorks *string `json:"howItWorks,omitempty"`
	// The listing's technical description rendered to HTML.
	HowItWorksHTML string `json:"howItWorksHTML"`
	ID             string `json:"id"`
	// URL to install the product to the viewer's account or organization.
	InstallationURL *string `json:"installationUrl,omitempty"`
	// Whether this listing's app has been installed for the current viewer
	InstalledForViewer bool `json:"installedForViewer"`
	// Whether this listing has been removed from the Marketplace.
	IsArchived bool `json:"isArchived"`
	// Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
	IsDraft bool `json:"isDraft"`
	// Whether the product this listing represents is available as part of a paid plan.
	IsPaid bool `json:"isPaid"`
	// Whether this listing has been approved for display in the Marketplace.
	IsPublic bool `json:"isPublic"`
	// Whether this listing has been rejected by GitHub for display in the Marketplace.
	IsRejected bool `json:"isRejected"`
	// Whether this listing has been approved for unverified display in the Marketplace.
	IsUnverified bool `json:"isUnverified"`
	// Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
	IsUnverifiedPending bool `json:"isUnverifiedPending"`
	// Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
	IsVerificationPendingFromDraft bool `json:"isVerificationPendingFromDraft"`
	// Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
	IsVerificationPendingFromUnverified bool `json:"isVerificationPendingFromUnverified"`
	// Whether this listing has been approved for verified display in the Marketplace.
	IsVerified bool `json:"isVerified"`
	// The hex color code, without the leading '#', for the logo background.
	LogoBackgroundColor string `json:"logoBackgroundColor"`
	// URL for the listing's logo image.
	LogoURL *string `json:"logoUrl,omitempty"`
	// The listing's full name.
	Name string `json:"name"`
	// The listing's very short description without a trailing period or ampersands.
	NormalizedShortDescription string `json:"normalizedShortDescription"`
	// URL to the listing's detailed pricing.
	PricingURL *string `json:"pricingUrl,omitempty"`
	// The category that best describes the listing.
	PrimaryCategory MarketplaceCategory `json:"primaryCategory"`
	// URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
	PrivacyPolicyURL string `json:"privacyPolicyUrl"`
	// The HTTP path for the Marketplace listing.
	ResourcePath string `json:"resourcePath"`
	// The URLs for the listing's screenshots.
	ScreenshotUrls []*string `json:"screenshotUrls"`
	// An alternate category that describes the listing.
	SecondaryCategory *MarketplaceCategory `json:"secondaryCategory,omitempty"`
	// The listing's very short description.
	ShortDescription string `json:"shortDescription"`
	// The short name of the listing used in its URL.
	Slug string `json:"slug"`
	// URL to the listing's status page.
	StatusURL *string `json:"statusUrl,omitempty"`
	// An email address for support for this listing's app.
	SupportEmail *string `json:"supportEmail,omitempty"`
	// Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
	SupportURL string `json:"supportUrl"`
	// URL to the listing's terms of service.
	TermsOfServiceURL *string `json:"termsOfServiceUrl,omitempty"`
	// The HTTP URL for the Marketplace listing.
	URL string `json:"url"`
	// Can the current viewer add plans for this Marketplace listing.
	ViewerCanAddPlans bool `json:"viewerCanAddPlans"`
	// Can the current viewer approve this Marketplace listing.
	ViewerCanApprove bool `json:"viewerCanApprove"`
	// Can the current viewer delist this Marketplace listing.
	ViewerCanDelist bool `json:"viewerCanDelist"`
	// Can the current viewer edit this Marketplace listing.
	ViewerCanEdit bool `json:"viewerCanEdit"`
	// Can the current viewer edit the primary and secondary category of this
	// Marketplace listing.
	//
	ViewerCanEditCategories bool `json:"viewerCanEditCategories"`
	// Can the current viewer edit the plans for this Marketplace listing.
	ViewerCanEditPlans bool `json:"viewerCanEditPlans"`
	// Can the current viewer return this Marketplace listing to draft state
	// so it becomes editable again.
	//
	ViewerCanRedraft bool `json:"viewerCanRedraft"`
	// Can the current viewer reject this Marketplace listing by returning it to
	// an editable draft state or rejecting it entirely.
	//
	ViewerCanReject bool `json:"viewerCanReject"`
	// Can the current viewer request this listing be reviewed for display in
	// the Marketplace as verified.
	//
	ViewerCanRequestApproval bool `json:"viewerCanRequestApproval"`
	// Indicates whether the current user has an active subscription to this Marketplace listing.
	//
	ViewerHasPurchased bool `json:"viewerHasPurchased"`
	// Indicates if the current user has purchased a subscription to this Marketplace listing
	// for all of the organizations the user owns.
	//
	ViewerHasPurchasedForAllOrganizations bool `json:"viewerHasPurchasedForAllOrganizations"`
	// Does the current viewer role allow them to administer this Marketplace listing.
	//
	ViewerIsListingAdmin bool `json:"viewerIsListingAdmin"`
}

func (MarketplaceListing) IsNode() {}

// ID of the object.
func (this MarketplaceListing) GetID() string { return this.ID }

func (MarketplaceListing) IsSearchResultItem() {}

// Look up Marketplace Listings
type MarketplaceListingConnection struct {
	// A list of edges.
	Edges []*MarketplaceListingEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*MarketplaceListing `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type MarketplaceListingEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *MarketplaceListing `json:"node,omitempty"`
}

// Audit log entry for a members_can_delete_repos.clear event.
type MembersCanDeleteReposClearAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (MembersCanDeleteReposClearAuditEntry) IsAuditEntry() {}

// The action name
func (this MembersCanDeleteReposClearAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this MembersCanDeleteReposClearAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this MembersCanDeleteReposClearAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this MembersCanDeleteReposClearAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this MembersCanDeleteReposClearAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this MembersCanDeleteReposClearAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this MembersCanDeleteReposClearAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this MembersCanDeleteReposClearAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this MembersCanDeleteReposClearAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this MembersCanDeleteReposClearAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this MembersCanDeleteReposClearAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this MembersCanDeleteReposClearAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this MembersCanDeleteReposClearAuditEntry) GetUserURL() *string { return this.UserURL }

func (MembersCanDeleteReposClearAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this MembersCanDeleteReposClearAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this MembersCanDeleteReposClearAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this MembersCanDeleteReposClearAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (MembersCanDeleteReposClearAuditEntry) IsNode() {}

// ID of the object.
func (this MembersCanDeleteReposClearAuditEntry) GetID() string { return this.ID }

func (MembersCanDeleteReposClearAuditEntry) IsOrganizationAuditEntry() {}

func (MembersCanDeleteReposClearAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this MembersCanDeleteReposClearAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this MembersCanDeleteReposClearAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this MembersCanDeleteReposClearAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this MembersCanDeleteReposClearAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a members_can_delete_repos.disable event.
type MembersCanDeleteReposDisableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (MembersCanDeleteReposDisableAuditEntry) IsAuditEntry() {}

// The action name
func (this MembersCanDeleteReposDisableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this MembersCanDeleteReposDisableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this MembersCanDeleteReposDisableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this MembersCanDeleteReposDisableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this MembersCanDeleteReposDisableAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this MembersCanDeleteReposDisableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this MembersCanDeleteReposDisableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this MembersCanDeleteReposDisableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this MembersCanDeleteReposDisableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this MembersCanDeleteReposDisableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this MembersCanDeleteReposDisableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this MembersCanDeleteReposDisableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this MembersCanDeleteReposDisableAuditEntry) GetUserURL() *string { return this.UserURL }

func (MembersCanDeleteReposDisableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this MembersCanDeleteReposDisableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this MembersCanDeleteReposDisableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this MembersCanDeleteReposDisableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (MembersCanDeleteReposDisableAuditEntry) IsNode() {}

// ID of the object.
func (this MembersCanDeleteReposDisableAuditEntry) GetID() string { return this.ID }

func (MembersCanDeleteReposDisableAuditEntry) IsOrganizationAuditEntry() {}

func (MembersCanDeleteReposDisableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this MembersCanDeleteReposDisableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this MembersCanDeleteReposDisableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this MembersCanDeleteReposDisableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this MembersCanDeleteReposDisableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a members_can_delete_repos.enable event.
type MembersCanDeleteReposEnableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (MembersCanDeleteReposEnableAuditEntry) IsAuditEntry() {}

// The action name
func (this MembersCanDeleteReposEnableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this MembersCanDeleteReposEnableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this MembersCanDeleteReposEnableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this MembersCanDeleteReposEnableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this MembersCanDeleteReposEnableAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this MembersCanDeleteReposEnableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this MembersCanDeleteReposEnableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this MembersCanDeleteReposEnableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this MembersCanDeleteReposEnableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this MembersCanDeleteReposEnableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this MembersCanDeleteReposEnableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this MembersCanDeleteReposEnableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this MembersCanDeleteReposEnableAuditEntry) GetUserURL() *string { return this.UserURL }

func (MembersCanDeleteReposEnableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this MembersCanDeleteReposEnableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this MembersCanDeleteReposEnableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this MembersCanDeleteReposEnableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (MembersCanDeleteReposEnableAuditEntry) IsNode() {}

// ID of the object.
func (this MembersCanDeleteReposEnableAuditEntry) GetID() string { return this.ID }

func (MembersCanDeleteReposEnableAuditEntry) IsOrganizationAuditEntry() {}

func (MembersCanDeleteReposEnableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this MembersCanDeleteReposEnableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this MembersCanDeleteReposEnableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this MembersCanDeleteReposEnableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this MembersCanDeleteReposEnableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Represents a 'mentioned' event on a given issue or pull request.
type MentionedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
}

func (MentionedEvent) IsIssueTimelineItems() {}

func (MentionedEvent) IsNode() {}

// ID of the object.
func (this MentionedEvent) GetID() string { return this.ID }

func (MentionedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of MergeBranch
type MergeBranchInput struct {
	// The Node ID of the Repository containing the base branch that will be modified.
	RepositoryID string `json:"repositoryId"`
	// The name of the base branch that the provided head will be merged into.
	Base string `json:"base"`
	// The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
	Head string `json:"head"`
	// Message to use for the merge commit. If omitted, a default will be used.
	CommitMessage *string `json:"commitMessage,omitempty"`
	// The email address to associate with this commit.
	AuthorEmail *string `json:"authorEmail,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MergeBranch
type MergeBranchPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The resulting merge Commit.
	MergeCommit *Commit `json:"mergeCommit,omitempty"`
}

// Autogenerated input type of MergePullRequest
type MergePullRequestInput struct {
	// ID of the pull request to be merged.
	PullRequestID string `json:"pullRequestId"`
	// Commit headline to use for the merge commit; if omitted, a default message will be used.
	CommitHeadline *string `json:"commitHeadline,omitempty"`
	// Commit body to use for the merge commit; if omitted, a default message will be used
	CommitBody *string `json:"commitBody,omitempty"`
	// OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
	// The merge method to use. If omitted, defaults to 'MERGE'
	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
	// The email address to associate with this merge.
	AuthorEmail *string `json:"authorEmail,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MergePullRequest
type MergePullRequestPayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that was merged.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// The queue of pull request entries to be merged into a protected branch in a repository.
type MergeQueue struct {
	// The configuration for this merge queue
	Configuration *MergeQueueConfiguration `json:"configuration,omitempty"`
	// The entries in the queue
	Entries *MergeQueueEntryConnection `json:"entries,omitempty"`
	ID      string                     `json:"id"`
	// The estimated time in seconds until a newly added entry would be merged
	NextEntryEstimatedTimeToMerge *int64 `json:"nextEntryEstimatedTimeToMerge,omitempty"`
	// The repository this merge queue belongs to
	Repository *Repository `json:"repository,omitempty"`
	// The HTTP path for this merge queue
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this merge queue
	URL string `json:"url"`
}

func (MergeQueue) IsNode() {}

// ID of the object.
func (this MergeQueue) GetID() string { return this.ID }

// Configuration for a MergeQueue
type MergeQueueConfiguration struct {
	// The amount of time in minutes to wait for a check response before considering it a failure.
	CheckResponseTimeout *int64 `json:"checkResponseTimeout,omitempty"`
	// The maximum number of entries to build at once.
	MaximumEntriesToBuild *int64 `json:"maximumEntriesToBuild,omitempty"`
	// The maximum number of entries to merge at once.
	MaximumEntriesToMerge *int64 `json:"maximumEntriesToMerge,omitempty"`
	// The merge method to use for this queue.
	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
	// The strategy to use when merging entries.
	MergingStrategy *MergeQueueMergingStrategy `json:"mergingStrategy,omitempty"`
	// The minimum number of entries required to merge at once.
	MinimumEntriesToMerge *int64 `json:"minimumEntriesToMerge,omitempty"`
	// The amount of time in minutes to wait before ignoring the minumum number of entries in the queue requirement and merging a collection of entries
	MinimumEntriesToMergeWaitTime *int64 `json:"minimumEntriesToMergeWaitTime,omitempty"`
}

// Entries in a MergeQueue
type MergeQueueEntry struct {
	// The base commit for this entry
	BaseCommit *Commit `json:"baseCommit,omitempty"`
	// The date and time this entry was added to the merge queue
	EnqueuedAt string `json:"enqueuedAt"`
	// The actor that enqueued this entry
	Enqueuer Actor `json:"enqueuer"`
	// The estimated time in seconds until this entry will be merged
	EstimatedTimeToMerge *int64 `json:"estimatedTimeToMerge,omitempty"`
	// The head commit for this entry
	HeadCommit *Commit `json:"headCommit,omitempty"`
	ID         string  `json:"id"`
	// Whether this pull request should jump the queue
	Jump bool `json:"jump"`
	// The merge queue that this entry belongs to
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`
	// The position of this entry in the queue
	Position int64 `json:"position"`
	// The pull request that will be added to a merge group
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// Does this pull request need to be deployed on its own
	Solo bool `json:"solo"`
	// The state of this entry in the queue
	State MergeQueueEntryState `json:"state"`
}

func (MergeQueueEntry) IsNode() {}

// ID of the object.
func (this MergeQueueEntry) GetID() string { return this.ID }

// The connection type for MergeQueueEntry.
type MergeQueueEntryConnection struct {
	// A list of edges.
	Edges []*MergeQueueEntryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*MergeQueueEntry `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type MergeQueueEntryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *MergeQueueEntry `json:"node,omitempty"`
}

// Represents a 'merged' event on a given pull request.
type MergedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the commit associated with the `merge` event.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the Ref associated with the `merge` event.
	MergeRef *Ref `json:"mergeRef,omitempty"`
	// Identifies the name of the Ref associated with the `merge` event.
	MergeRefName string `json:"mergeRefName"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// The HTTP path for this merged event.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this merged event.
	URL string `json:"url"`
}

func (MergedEvent) IsNode() {}

// ID of the object.
func (this MergedEvent) GetID() string { return this.ID }

func (MergedEvent) IsPullRequestTimelineItem() {}

func (MergedEvent) IsPullRequestTimelineItems() {}

func (MergedEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this MergedEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this MergedEvent) GetURL() string { return this.URL }

// A GitHub Enterprise Importer (GEI) migration source.
type MigrationSource struct {
	ID string `json:"id"`
	// The migration source name.
	Name string `json:"name"`
	// The migration source type.
	Type MigrationSourceType `json:"type"`
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	URL string `json:"url"`
}

func (MigrationSource) IsNode() {}

// ID of the object.
func (this MigrationSource) GetID() string { return this.ID }

// Represents a Milestone object on a given repository.
type Milestone struct {
	// Indicates if the object is closed (definition of closed may depend on type)
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the actor who created the milestone.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the description of the milestone.
	Description *string `json:"description,omitempty"`
	// Identifies the due date of the milestone.
	DueOn *string `json:"dueOn,omitempty"`
	ID    string  `json:"id"`
	// A list of issues associated with the milestone.
	Issues IssueConnection `json:"issues"`
	// Identifies the number of the milestone.
	Number int64 `json:"number"`
	// Identifies the percentage complete for the milestone
	ProgressPercentage float64 `json:"progressPercentage"`
	// A list of pull requests associated with the milestone.
	PullRequests PullRequestConnection `json:"pullRequests"`
	// The repository associated with this milestone.
	Repository Repository `json:"repository"`
	// The HTTP path for this milestone
	ResourcePath string `json:"resourcePath"`
	// Identifies the state of the milestone.
	State MilestoneState `json:"state"`
	// Identifies the title of the milestone.
	Title string `json:"title"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this milestone
	URL string `json:"url"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
}

func (Milestone) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this Milestone) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this Milestone) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this Milestone) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this Milestone) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (Milestone) IsNode() {}

// ID of the object.
func (this Milestone) GetID() string { return this.ID }

func (Milestone) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Milestone) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Milestone) GetURL() string { return this.URL }

// The connection type for Milestone.
type MilestoneConnection struct {
	// A list of edges.
	Edges []*MilestoneEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Milestone `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type MilestoneEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Milestone `json:"node,omitempty"`
}

// Ordering options for milestone connections.
type MilestoneOrder struct {
	// The field to order milestones by.
	Field MilestoneOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Represents a 'milestoned' event on a given issue or pull request.
type MilestonedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the milestone title associated with the 'milestoned' event.
	MilestoneTitle string `json:"milestoneTitle"`
	// Object referenced by event.
	Subject MilestoneItem `json:"subject"`
}

func (MilestonedEvent) IsIssueTimelineItem() {}

func (MilestonedEvent) IsIssueTimelineItems() {}

func (MilestonedEvent) IsNode() {}

// ID of the object.
func (this MilestonedEvent) GetID() string { return this.ID }

func (MilestonedEvent) IsPullRequestTimelineItem() {}

func (MilestonedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of MinimizeComment
type MinimizeCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID string `json:"subjectId"`
	// The classification of comment
	Classifier ReportedContentClassifiers `json:"classifier"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MinimizeComment
type MinimizeCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The comment that was minimized.
	MinimizedComment Minimizable `json:"minimizedComment,omitempty"`
}

// Autogenerated input type of MoveProjectCard
type MoveProjectCardInput struct {
	// The id of the card to move.
	CardID string `json:"cardId"`
	// The id of the column to move it into.
	ColumnID string `json:"columnId"`
	// Place the new card after the card with this id. Pass null to place it at the top.
	AfterCardID *string `json:"afterCardId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MoveProjectCard
type MoveProjectCardPayload struct {
	// The new edge of the moved card.
	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of MoveProjectColumn
type MoveProjectColumnInput struct {
	// The id of the column to move.
	ColumnID string `json:"columnId"`
	// Place the new column after the column with this id. Pass null to place it at the front.
	AfterColumnID *string `json:"afterColumnId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of MoveProjectColumn
type MoveProjectColumnPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new edge of the moved column.
	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`
}

// Represents a 'moved_columns_in_project' event on a given issue or pull request.
type MovedColumnsInProjectEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
}

func (MovedColumnsInProjectEvent) IsIssueTimelineItems() {}

func (MovedColumnsInProjectEvent) IsNode() {}

// ID of the object.
func (this MovedColumnsInProjectEvent) GetID() string { return this.ID }

func (MovedColumnsInProjectEvent) IsPullRequestTimelineItems() {}

// Represents a notification thread for the viewer.
type NotificationThread struct {
	ID string `json:"id"`
	// Archived state of the notification.
	IsArchived bool `json:"isArchived"`
	// Done state of the notification.
	IsDone bool `json:"isDone"`
	// Whether a notification has been saved
	IsSaved bool `json:"isSaved"`
	// Whether a notification has been starred
	IsStarred bool `json:"isStarred"`
	// Unread state of the notification.
	IsUnread bool `json:"isUnread"`
	// The last time that notifications were read for this thread.
	LastReadAt *string `json:"lastReadAt,omitempty"`
	// The last time that notifications were updated for this thread.
	LastSummarizedAt string `json:"lastSummarizedAt"`
	// The last time that a notification was received on this thread for the current user
	LastUpdatedAt string `json:"lastUpdatedAt"`
	// The notification's list.
	List NotificationsList `json:"list"`
	// The notification's list id
	ListID string `json:"listId"`
	// The notification's list type
	ListType string `json:"listType"`
	// The oldest unread author internal anchor
	OldestUnreadItemAnchor *string `json:"oldestUnreadItemAnchor,omitempty"`
	// The reason a notification was received.
	Reason *NotificationReason `json:"reason,omitempty"`
	// The last 3 recent participants.
	RecentParticipants []*User `json:"recentParticipants"`
	// The notification's subject.
	Subject NotificationsSubject `json:"subject"`
	// Subscription status for the thread
	SubscriptionStatus NotificationThreadSubscriptionState `json:"subscriptionStatus"`
	// The notification's rollup summary id
	SummaryID string `json:"summaryId"`
	// The author of the item being used to summarize the thread.
	SummaryItemAuthor *User `json:"summaryItemAuthor,omitempty"`
	// The body text of the item being used to summarize the thread.
	SummaryItemBody *string `json:"summaryItemBody,omitempty"`
	// The notification's thread id
	ThreadID string `json:"threadId"`
	// The notification's thread type
	ThreadType string `json:"threadType"`
	// The notification's title
	Title string `json:"title"`
	// The number of unread items.
	UnreadItemsCount int64 `json:"unreadItemsCount"`
	// The HTTP URL for the notification thread's subject
	URL string `json:"url"`
}

func (NotificationThread) IsNode() {}

// ID of the object.
func (this NotificationThread) GetID() string { return this.ID }

// A list of notification threads.
type NotificationThreadConnection struct {
	// A list of edges.
	Edges []*NotificationThreadEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*NotificationThread `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type NotificationThreadEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *NotificationThread `json:"node,omitempty"`
}

// Ways in which to filter lists of notification threads.
type NotificationThreadFilters struct {
	// Only return notifications where the status is in the list.
	Statuses []NotificationStatus `json:"statuses,omitempty"`
	// Only return notification threads where the reason is in the list
	Reasons []NotificationReason `json:"reasons,omitempty"`
	// Only return notification threads where the list is in the given list
	ListIds []string `json:"listIds,omitempty"`
	// Only return starred notifications. All other filters will be ignored.
	StarredOnly *bool `json:"starredOnly,omitempty"`
	// Only return saved notifications. All other filters will be ignored.
	SavedOnly *bool `json:"savedOnly,omitempty"`
	// Only return matching thread types
	ThreadTypes []string `json:"threadTypes,omitempty"`
}

// An OIDC identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type OIDCProvider struct {
	// The enterprise this identity provider belongs to.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// ExternalIdentities provisioned by this identity provider.
	ExternalIdentities ExternalIdentityConnection `json:"externalIdentities"`
	ID                 string                     `json:"id"`
	// The OIDC identity provider type
	ProviderType OIDCProviderType `json:"providerType"`
	// The id of the tenant this provider is attached to
	TenantID string `json:"tenantId"`
}

func (OIDCProvider) IsNode() {}

// ID of the object.
func (this OIDCProvider) GetID() string { return this.ID }

// Audit log entry for a oauth_application.create event.
type OauthApplicationCreateAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The application URL of the OAuth application.
	ApplicationURL *string `json:"applicationUrl,omitempty"`
	// The callback URL of the OAuth application.
	CallbackURL *string `json:"callbackUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The rate limit of the OAuth application.
	RateLimit *int64 `json:"rateLimit,omitempty"`
	// The state of the OAuth application.
	State *OauthApplicationCreateAuditEntryState `json:"state,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OauthApplicationCreateAuditEntry) IsAuditEntry() {}

// The action name
func (this OauthApplicationCreateAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OauthApplicationCreateAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OauthApplicationCreateAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OauthApplicationCreateAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OauthApplicationCreateAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OauthApplicationCreateAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OauthApplicationCreateAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OauthApplicationCreateAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OauthApplicationCreateAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OauthApplicationCreateAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OauthApplicationCreateAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OauthApplicationCreateAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OauthApplicationCreateAuditEntry) GetUserURL() *string { return this.UserURL }

func (OauthApplicationCreateAuditEntry) IsNode() {}

// ID of the object.
func (this OauthApplicationCreateAuditEntry) GetID() string { return this.ID }

func (OauthApplicationCreateAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OauthApplicationCreateAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OauthApplicationCreateAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OauthApplicationCreateAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OauthApplicationCreateAuditEntry) IsOrganizationAuditEntry() {}

func (OauthApplicationCreateAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OauthApplicationCreateAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OauthApplicationCreateAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OauthApplicationCreateAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OauthApplicationCreateAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.add_billing_manager
type OrgAddBillingManagerAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The email address used to invite a billing manager for the organization.
	InvitationEmail *string `json:"invitationEmail,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgAddBillingManagerAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgAddBillingManagerAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgAddBillingManagerAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgAddBillingManagerAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgAddBillingManagerAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgAddBillingManagerAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgAddBillingManagerAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgAddBillingManagerAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgAddBillingManagerAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgAddBillingManagerAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgAddBillingManagerAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgAddBillingManagerAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgAddBillingManagerAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgAddBillingManagerAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgAddBillingManagerAuditEntry) IsNode() {}

// ID of the object.
func (this OrgAddBillingManagerAuditEntry) GetID() string { return this.ID }

func (OrgAddBillingManagerAuditEntry) IsOrganizationAuditEntry() {}

func (OrgAddBillingManagerAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgAddBillingManagerAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgAddBillingManagerAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgAddBillingManagerAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgAddBillingManagerAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.add_member
type OrgAddMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The permission level of the member added to the organization.
	Permission *OrgAddMemberAuditEntryPermission `json:"permission,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgAddMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgAddMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgAddMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgAddMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgAddMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgAddMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgAddMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgAddMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgAddMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgAddMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgAddMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgAddMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgAddMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgAddMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgAddMemberAuditEntry) IsNode() {}

// ID of the object.
func (this OrgAddMemberAuditEntry) GetID() string { return this.ID }

func (OrgAddMemberAuditEntry) IsOrganizationAuditEntry() {}

func (OrgAddMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgAddMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgAddMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgAddMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgAddMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.block_user
type OrgBlockUserAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The blocked user.
	BlockedUser *User `json:"blockedUser,omitempty"`
	// The username of the blocked user.
	BlockedUserName *string `json:"blockedUserName,omitempty"`
	// The HTTP path for the blocked user.
	BlockedUserResourcePath *string `json:"blockedUserResourcePath,omitempty"`
	// The HTTP URL for the blocked user.
	BlockedUserURL *string `json:"blockedUserUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgBlockUserAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgBlockUserAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgBlockUserAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgBlockUserAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgBlockUserAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgBlockUserAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgBlockUserAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgBlockUserAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgBlockUserAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgBlockUserAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgBlockUserAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgBlockUserAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgBlockUserAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgBlockUserAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgBlockUserAuditEntry) IsNode() {}

// ID of the object.
func (this OrgBlockUserAuditEntry) GetID() string { return this.ID }

func (OrgBlockUserAuditEntry) IsOrganizationAuditEntry() {}

func (OrgBlockUserAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgBlockUserAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgBlockUserAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgBlockUserAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgBlockUserAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.config.disable_collaborators_only event.
type OrgConfigDisableCollaboratorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgConfigDisableCollaboratorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgConfigDisableCollaboratorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetID() string { return this.ID }

func (OrgConfigDisableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (OrgConfigDisableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.config.enable_collaborators_only event.
type OrgConfigEnableCollaboratorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgConfigEnableCollaboratorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgConfigEnableCollaboratorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetID() string { return this.ID }

func (OrgConfigEnableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (OrgConfigEnableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.create event.
type OrgCreateAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The billing plan for the Organization.
	BillingPlan *OrgCreateAuditEntryBillingPlan `json:"billingPlan,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgCreateAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgCreateAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgCreateAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgCreateAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgCreateAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgCreateAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgCreateAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgCreateAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgCreateAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgCreateAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgCreateAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgCreateAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgCreateAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgCreateAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgCreateAuditEntry) IsNode() {}

// ID of the object.
func (this OrgCreateAuditEntry) GetID() string { return this.ID }

func (OrgCreateAuditEntry) IsOrganizationAuditEntry() {}

func (OrgCreateAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgCreateAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgCreateAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgCreateAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgCreateAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.disable_oauth_app_restrictions event.
type OrgDisableOauthAppRestrictionsAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgDisableOauthAppRestrictionsAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgDisableOauthAppRestrictionsAuditEntry) IsNode() {}

// ID of the object.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetID() string { return this.ID }

func (OrgDisableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntry() {}

func (OrgDisableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.disable_saml event.
type OrgDisableSamlAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The SAML provider's digest algorithm URL.
	DigestMethodURL *string `json:"digestMethodUrl,omitempty"`
	ID              string  `json:"id"`
	// The SAML provider's issuer URL.
	IssuerURL *string `json:"issuerUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The SAML provider's signature algorithm URL.
	SignatureMethodURL *string `json:"signatureMethodUrl,omitempty"`
	// The SAML provider's single sign-on URL.
	SingleSignOnURL *string `json:"singleSignOnUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgDisableSamlAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgDisableSamlAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgDisableSamlAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgDisableSamlAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgDisableSamlAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgDisableSamlAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgDisableSamlAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgDisableSamlAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgDisableSamlAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgDisableSamlAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgDisableSamlAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgDisableSamlAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgDisableSamlAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgDisableSamlAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgDisableSamlAuditEntry) IsNode() {}

// ID of the object.
func (this OrgDisableSamlAuditEntry) GetID() string { return this.ID }

func (OrgDisableSamlAuditEntry) IsOrganizationAuditEntry() {}

func (OrgDisableSamlAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgDisableSamlAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgDisableSamlAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgDisableSamlAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgDisableSamlAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.disable_two_factor_requirement event.
type OrgDisableTwoFactorRequirementAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgDisableTwoFactorRequirementAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgDisableTwoFactorRequirementAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgDisableTwoFactorRequirementAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgDisableTwoFactorRequirementAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgDisableTwoFactorRequirementAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgDisableTwoFactorRequirementAuditEntry) IsNode() {}

// ID of the object.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetID() string { return this.ID }

func (OrgDisableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntry() {}

func (OrgDisableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.enable_oauth_app_restrictions event.
type OrgEnableOauthAppRestrictionsAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgEnableOauthAppRestrictionsAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgEnableOauthAppRestrictionsAuditEntry) IsNode() {}

// ID of the object.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetID() string { return this.ID }

func (OrgEnableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntry() {}

func (OrgEnableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.enable_saml event.
type OrgEnableSamlAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The SAML provider's digest algorithm URL.
	DigestMethodURL *string `json:"digestMethodUrl,omitempty"`
	ID              string  `json:"id"`
	// The SAML provider's issuer URL.
	IssuerURL *string `json:"issuerUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The SAML provider's signature algorithm URL.
	SignatureMethodURL *string `json:"signatureMethodUrl,omitempty"`
	// The SAML provider's single sign-on URL.
	SingleSignOnURL *string `json:"singleSignOnUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgEnableSamlAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgEnableSamlAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgEnableSamlAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgEnableSamlAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgEnableSamlAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgEnableSamlAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgEnableSamlAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgEnableSamlAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgEnableSamlAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgEnableSamlAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgEnableSamlAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgEnableSamlAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgEnableSamlAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgEnableSamlAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgEnableSamlAuditEntry) IsNode() {}

// ID of the object.
func (this OrgEnableSamlAuditEntry) GetID() string { return this.ID }

func (OrgEnableSamlAuditEntry) IsOrganizationAuditEntry() {}

func (OrgEnableSamlAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgEnableSamlAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgEnableSamlAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgEnableSamlAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgEnableSamlAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.enable_two_factor_requirement event.
type OrgEnableTwoFactorRequirementAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgEnableTwoFactorRequirementAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgEnableTwoFactorRequirementAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgEnableTwoFactorRequirementAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgEnableTwoFactorRequirementAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgEnableTwoFactorRequirementAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgEnableTwoFactorRequirementAuditEntry) IsNode() {}

// ID of the object.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetID() string { return this.ID }

func (OrgEnableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntry() {}

func (OrgEnableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Ordering options for an organization's enterprise owner connections.
type OrgEnterpriseOwnerOrder struct {
	// The field to order enterprise owners by.
	Field OrgEnterpriseOwnerOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Audit log entry for a org.invite_member event.
type OrgInviteMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The email address of the organization invitation.
	Email *string `json:"email,omitempty"`
	ID    string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The organization invitation.
	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgInviteMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgInviteMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgInviteMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgInviteMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgInviteMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgInviteMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgInviteMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgInviteMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgInviteMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgInviteMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgInviteMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgInviteMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgInviteMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgInviteMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgInviteMemberAuditEntry) IsNode() {}

// ID of the object.
func (this OrgInviteMemberAuditEntry) GetID() string { return this.ID }

func (OrgInviteMemberAuditEntry) IsOrganizationAuditEntry() {}

func (OrgInviteMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgInviteMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgInviteMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgInviteMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgInviteMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.invite_to_business event.
type OrgInviteToBusinessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgInviteToBusinessAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgInviteToBusinessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgInviteToBusinessAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgInviteToBusinessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgInviteToBusinessAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgInviteToBusinessAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgInviteToBusinessAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgInviteToBusinessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgInviteToBusinessAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgInviteToBusinessAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgInviteToBusinessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgInviteToBusinessAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgInviteToBusinessAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgInviteToBusinessAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgInviteToBusinessAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this OrgInviteToBusinessAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this OrgInviteToBusinessAuditEntry) GetEnterpriseSlug() *string { return this.EnterpriseSlug }

// The HTTP URL for this enterprise.
func (this OrgInviteToBusinessAuditEntry) GetEnterpriseURL() *string { return this.EnterpriseURL }

func (OrgInviteToBusinessAuditEntry) IsNode() {}

// ID of the object.
func (this OrgInviteToBusinessAuditEntry) GetID() string { return this.ID }

func (OrgInviteToBusinessAuditEntry) IsOrganizationAuditEntry() {}

func (OrgInviteToBusinessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgInviteToBusinessAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgInviteToBusinessAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgInviteToBusinessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgInviteToBusinessAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.oauth_app_access_approved event.
type OrgOauthAppAccessApprovedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgOauthAppAccessApprovedAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgOauthAppAccessApprovedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgOauthAppAccessApprovedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgOauthAppAccessApprovedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgOauthAppAccessApprovedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgOauthAppAccessApprovedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgOauthAppAccessApprovedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgOauthAppAccessApprovedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgOauthAppAccessApprovedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgOauthAppAccessApprovedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgOauthAppAccessApprovedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgOauthAppAccessApprovedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgOauthAppAccessApprovedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgOauthAppAccessApprovedAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgOauthAppAccessApprovedAuditEntry) IsNode() {}

// ID of the object.
func (this OrgOauthAppAccessApprovedAuditEntry) GetID() string { return this.ID }

func (OrgOauthAppAccessApprovedAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OrgOauthAppAccessApprovedAuditEntry) IsOrganizationAuditEntry() {}

func (OrgOauthAppAccessApprovedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgOauthAppAccessApprovedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgOauthAppAccessApprovedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgOauthAppAccessApprovedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgOauthAppAccessApprovedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.oauth_app_access_blocked event.
type OrgOauthAppAccessBlockedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgOauthAppAccessBlockedAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgOauthAppAccessBlockedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgOauthAppAccessBlockedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgOauthAppAccessBlockedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgOauthAppAccessBlockedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgOauthAppAccessBlockedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgOauthAppAccessBlockedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgOauthAppAccessBlockedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgOauthAppAccessBlockedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgOauthAppAccessBlockedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgOauthAppAccessBlockedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgOauthAppAccessBlockedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgOauthAppAccessBlockedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgOauthAppAccessBlockedAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgOauthAppAccessBlockedAuditEntry) IsNode() {}

// ID of the object.
func (this OrgOauthAppAccessBlockedAuditEntry) GetID() string { return this.ID }

func (OrgOauthAppAccessBlockedAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OrgOauthAppAccessBlockedAuditEntry) IsOrganizationAuditEntry() {}

func (OrgOauthAppAccessBlockedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgOauthAppAccessBlockedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgOauthAppAccessBlockedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgOauthAppAccessBlockedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgOauthAppAccessBlockedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.oauth_app_access_denied event.
type OrgOauthAppAccessDeniedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgOauthAppAccessDeniedAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgOauthAppAccessDeniedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgOauthAppAccessDeniedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgOauthAppAccessDeniedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgOauthAppAccessDeniedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgOauthAppAccessDeniedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgOauthAppAccessDeniedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgOauthAppAccessDeniedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgOauthAppAccessDeniedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgOauthAppAccessDeniedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgOauthAppAccessDeniedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgOauthAppAccessDeniedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgOauthAppAccessDeniedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgOauthAppAccessDeniedAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgOauthAppAccessDeniedAuditEntry) IsNode() {}

// ID of the object.
func (this OrgOauthAppAccessDeniedAuditEntry) GetID() string { return this.ID }

func (OrgOauthAppAccessDeniedAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OrgOauthAppAccessDeniedAuditEntry) IsOrganizationAuditEntry() {}

func (OrgOauthAppAccessDeniedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgOauthAppAccessDeniedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgOauthAppAccessDeniedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgOauthAppAccessDeniedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgOauthAppAccessDeniedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.oauth_app_access_requested event.
type OrgOauthAppAccessRequestedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgOauthAppAccessRequestedAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgOauthAppAccessRequestedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgOauthAppAccessRequestedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgOauthAppAccessRequestedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgOauthAppAccessRequestedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgOauthAppAccessRequestedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgOauthAppAccessRequestedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgOauthAppAccessRequestedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgOauthAppAccessRequestedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgOauthAppAccessRequestedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgOauthAppAccessRequestedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgOauthAppAccessRequestedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgOauthAppAccessRequestedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgOauthAppAccessRequestedAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgOauthAppAccessRequestedAuditEntry) IsNode() {}

// ID of the object.
func (this OrgOauthAppAccessRequestedAuditEntry) GetID() string { return this.ID }

func (OrgOauthAppAccessRequestedAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OrgOauthAppAccessRequestedAuditEntry) IsOrganizationAuditEntry() {}

func (OrgOauthAppAccessRequestedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgOauthAppAccessRequestedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgOauthAppAccessRequestedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgOauthAppAccessRequestedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgOauthAppAccessRequestedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.oauth_app_access_unblocked event.
type OrgOauthAppAccessUnblockedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The name of the OAuth application.
	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
	// The HTTP path for the OAuth application
	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
	// The HTTP URL for the OAuth application
	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgOauthAppAccessUnblockedAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgOauthAppAccessUnblockedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgOauthAppAccessUnblockedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgOauthAppAccessUnblockedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgOauthAppAccessUnblockedAuditEntry) IsNode() {}

// ID of the object.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetID() string { return this.ID }

func (OrgOauthAppAccessUnblockedAuditEntry) IsOauthApplicationAuditEntryData() {}

// The name of the OAuth application.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationName() *string {
	return this.OauthApplicationName
}

// The HTTP path for the OAuth application
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationResourcePath() *string {
	return this.OauthApplicationResourcePath
}

// The HTTP URL for the OAuth application
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationURL() *string {
	return this.OauthApplicationURL
}

func (OrgOauthAppAccessUnblockedAuditEntry) IsOrganizationAuditEntry() {}

func (OrgOauthAppAccessUnblockedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.remove_billing_manager event.
type OrgRemoveBillingManagerAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The reason for the billing manager being removed.
	Reason *OrgRemoveBillingManagerAuditEntryReason `json:"reason,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgRemoveBillingManagerAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgRemoveBillingManagerAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgRemoveBillingManagerAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgRemoveBillingManagerAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgRemoveBillingManagerAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgRemoveBillingManagerAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgRemoveBillingManagerAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgRemoveBillingManagerAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgRemoveBillingManagerAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgRemoveBillingManagerAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgRemoveBillingManagerAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgRemoveBillingManagerAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgRemoveBillingManagerAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgRemoveBillingManagerAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgRemoveBillingManagerAuditEntry) IsNode() {}

// ID of the object.
func (this OrgRemoveBillingManagerAuditEntry) GetID() string { return this.ID }

func (OrgRemoveBillingManagerAuditEntry) IsOrganizationAuditEntry() {}

func (OrgRemoveBillingManagerAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgRemoveBillingManagerAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgRemoveBillingManagerAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgRemoveBillingManagerAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgRemoveBillingManagerAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.remove_member event.
type OrgRemoveMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The types of membership the member has with the organization.
	MembershipTypes []OrgRemoveMemberAuditEntryMembershipType `json:"membershipTypes,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The reason for the member being removed.
	Reason *OrgRemoveMemberAuditEntryReason `json:"reason,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgRemoveMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgRemoveMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgRemoveMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgRemoveMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgRemoveMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgRemoveMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgRemoveMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgRemoveMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgRemoveMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgRemoveMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgRemoveMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgRemoveMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgRemoveMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgRemoveMemberAuditEntry) IsNode() {}

// ID of the object.
func (this OrgRemoveMemberAuditEntry) GetID() string { return this.ID }

func (OrgRemoveMemberAuditEntry) IsOrganizationAuditEntry() {}

func (OrgRemoveMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgRemoveMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgRemoveMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgRemoveMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgRemoveMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.remove_outside_collaborator event.
type OrgRemoveOutsideCollaboratorAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The types of membership the outside collaborator has with the organization.
	MembershipTypes []OrgRemoveOutsideCollaboratorAuditEntryMembershipType `json:"membershipTypes,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The reason for the outside collaborator being removed from the Organization.
	Reason *OrgRemoveOutsideCollaboratorAuditEntryReason `json:"reason,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgRemoveOutsideCollaboratorAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgRemoveOutsideCollaboratorAuditEntry) IsNode() {}

// ID of the object.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetID() string { return this.ID }

func (OrgRemoveOutsideCollaboratorAuditEntry) IsOrganizationAuditEntry() {}

func (OrgRemoveOutsideCollaboratorAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.restore_member event.
type OrgRestoreMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The number of custom email routings for the restored member.
	RestoredCustomEmailRoutingsCount *int64 `json:"restoredCustomEmailRoutingsCount,omitempty"`
	// The number of issue assignments for the restored member.
	RestoredIssueAssignmentsCount *int64 `json:"restoredIssueAssignmentsCount,omitempty"`
	// Restored organization membership objects.
	RestoredMemberships []OrgRestoreMemberAuditEntryMembership `json:"restoredMemberships,omitempty"`
	// The number of restored memberships.
	RestoredMembershipsCount *int64 `json:"restoredMembershipsCount,omitempty"`
	// The number of repositories of the restored member.
	RestoredRepositoriesCount *int64 `json:"restoredRepositoriesCount,omitempty"`
	// The number of starred repositories for the restored member.
	RestoredRepositoryStarsCount *int64 `json:"restoredRepositoryStarsCount,omitempty"`
	// The number of watched repositories for the restored member.
	RestoredRepositoryWatchesCount *int64 `json:"restoredRepositoryWatchesCount,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgRestoreMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgRestoreMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgRestoreMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgRestoreMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgRestoreMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgRestoreMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgRestoreMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgRestoreMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgRestoreMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgRestoreMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgRestoreMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgRestoreMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgRestoreMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgRestoreMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgRestoreMemberAuditEntry) IsNode() {}

// ID of the object.
func (this OrgRestoreMemberAuditEntry) GetID() string { return this.ID }

func (OrgRestoreMemberAuditEntry) IsOrganizationAuditEntry() {}

func (OrgRestoreMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgRestoreMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgRestoreMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgRestoreMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgRestoreMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Metadata for an organization membership for org.restore_member actions
type OrgRestoreMemberMembershipOrganizationAuditEntryData struct {
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
}

func (OrgRestoreMemberMembershipOrganizationAuditEntryData) IsOrgRestoreMemberAuditEntryMembership() {
}

func (OrgRestoreMemberMembershipOrganizationAuditEntryData) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Metadata for a repository membership for org.restore_member actions
type OrgRestoreMemberMembershipRepositoryAuditEntryData struct {
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
}

func (OrgRestoreMemberMembershipRepositoryAuditEntryData) IsOrgRestoreMemberAuditEntryMembership() {}

func (OrgRestoreMemberMembershipRepositoryAuditEntryData) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Metadata for a team membership for org.restore_member actions
type OrgRestoreMemberMembershipTeamAuditEntryData struct {
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
}

func (OrgRestoreMemberMembershipTeamAuditEntryData) IsOrgRestoreMemberAuditEntryMembership() {}

func (OrgRestoreMemberMembershipTeamAuditEntryData) IsTeamAuditEntryData() {}

// The team associated with the action
func (this OrgRestoreMemberMembershipTeamAuditEntryData) GetTeam() *Team { return this.Team }

// The name of the team
func (this OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamResourcePath() *string {
	return this.TeamResourcePath
}

// The HTTP URL for this team
func (this OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamURL() *string { return this.TeamURL }

// Audit log entry for a org.unblock_user
type OrgUnblockUserAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The user being unblocked by the organization.
	BlockedUser *User `json:"blockedUser,omitempty"`
	// The username of the blocked user.
	BlockedUserName *string `json:"blockedUserName,omitempty"`
	// The HTTP path for the blocked user.
	BlockedUserResourcePath *string `json:"blockedUserResourcePath,omitempty"`
	// The HTTP URL for the blocked user.
	BlockedUserURL *string `json:"blockedUserUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgUnblockUserAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgUnblockUserAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgUnblockUserAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgUnblockUserAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgUnblockUserAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgUnblockUserAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgUnblockUserAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgUnblockUserAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgUnblockUserAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgUnblockUserAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgUnblockUserAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgUnblockUserAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgUnblockUserAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgUnblockUserAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgUnblockUserAuditEntry) IsNode() {}

// ID of the object.
func (this OrgUnblockUserAuditEntry) GetID() string { return this.ID }

func (OrgUnblockUserAuditEntry) IsOrganizationAuditEntry() {}

func (OrgUnblockUserAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgUnblockUserAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgUnblockUserAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgUnblockUserAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgUnblockUserAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.update_default_repository_permission
type OrgUpdateDefaultRepositoryPermissionAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The new base repository permission level for the organization.
	Permission *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permission,omitempty"`
	// The former base repository permission level for the organization.
	PermissionWas *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permissionWas,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgUpdateDefaultRepositoryPermissionAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorURL() *string {
	return this.ActorURL
}

// The time the action was initiated
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgUpdateDefaultRepositoryPermissionAuditEntry) IsNode() {}

// ID of the object.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetID() string { return this.ID }

func (OrgUpdateDefaultRepositoryPermissionAuditEntry) IsOrganizationAuditEntry() {}

func (OrgUpdateDefaultRepositoryPermissionAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.update_member event.
type OrgUpdateMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The new member permission level for the organization.
	Permission *OrgUpdateMemberAuditEntryPermission `json:"permission,omitempty"`
	// The former member permission level for the organization.
	PermissionWas *OrgUpdateMemberAuditEntryPermission `json:"permissionWas,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgUpdateMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgUpdateMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this OrgUpdateMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this OrgUpdateMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this OrgUpdateMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this OrgUpdateMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this OrgUpdateMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this OrgUpdateMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this OrgUpdateMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this OrgUpdateMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this OrgUpdateMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgUpdateMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this OrgUpdateMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this OrgUpdateMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (OrgUpdateMemberAuditEntry) IsNode() {}

// ID of the object.
func (this OrgUpdateMemberAuditEntry) GetID() string { return this.ID }

func (OrgUpdateMemberAuditEntry) IsOrganizationAuditEntry() {}

func (OrgUpdateMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgUpdateMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this OrgUpdateMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this OrgUpdateMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgUpdateMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

// Audit log entry for a org.update_member_repository_creation_permission event.
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// Can members create repositories in the organization.
	CanCreateRepositories *bool `json:"canCreateRepositories,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The permission for visibility level of repositories for this organization.
	Visibility *OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility `json:"visibility,omitempty"`
}

func (OrgUpdateMemberRepositoryCreationPermissionAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetAction() string {
	return this.Action
}

// The user who initiated the action
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorIP() *string {
	return this.ActorIP
}

// A readable representation of the actor's location
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorURL() *string {
	return this.ActorURL
}

// The time the action was initiated
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserURL() *string {
	return this.UserURL
}

func (OrgUpdateMemberRepositoryCreationPermissionAuditEntry) IsNode() {}

// ID of the object.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetID() string { return this.ID }

func (OrgUpdateMemberRepositoryCreationPermissionAuditEntry) IsOrganizationAuditEntry() {}

func (OrgUpdateMemberRepositoryCreationPermissionAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a org.update_member_repository_invitation_permission event.
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// Can outside collaborators be invited to repositories in the organization.
	CanInviteOutsideCollaboratorsToRepositories *bool `json:"canInviteOutsideCollaboratorsToRepositories,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) IsAuditEntry() {}

// The action name
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetAction() string {
	return this.Action
}

// The user who initiated the action
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorIP() *string {
	return this.ActorIP
}

// A readable representation of the actor's location
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorURL() *string {
	return this.ActorURL
}

// The time the action was initiated
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserURL() *string {
	return this.UserURL
}

func (OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) IsNode() {}

// ID of the object.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetID() string { return this.ID }

func (OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) IsOrganizationAuditEntry() {}

func (OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// An account on GitHub, with one or more owners, that has repositories, members and teams.
type Organization struct {
	// The text of the announcement
	Announcement *string `json:"announcement,omitempty"`
	// The expiration date of the announcement, if any
	AnnouncementExpiresAt *string `json:"announcementExpiresAt,omitempty"`
	// Whether the announcement can be dismissed by the user
	AnnouncementUserDismissible *bool `json:"announcementUserDismissible,omitempty"`
	// Determine if this repository owner has any items that can be pinned to their profile.
	AnyPinnableItems bool `json:"anyPinnableItems"`
	// Identifies the date and time when the organization was archived.
	ArchivedAt *string `json:"archivedAt,omitempty"`
	// Audit log entries of the organization
	AuditLog OrganizationAuditEntryConnection `json:"auditLog"`
	// A URL pointing to the organization's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The organization's public profile description.
	Description *string `json:"description,omitempty"`
	// The organization's public profile description rendered to HTML.
	DescriptionHTML *string `json:"descriptionHTML,omitempty"`
	// A list of domains owned by the organization.
	Domains *VerifiableDomainConnection `json:"domains,omitempty"`
	// The organization's public email.
	Email *string `json:"email,omitempty"`
	// A list of owners of the organization's enterprise account.
	EnterpriseOwners OrganizationEnterpriseOwnerConnection `json:"enterpriseOwners"`
	// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
	EstimatedNextSponsorsPayoutInCents int64 `json:"estimatedNextSponsorsPayoutInCents"`
	// True if this user/organization has a GitHub Sponsors listing.
	HasSponsorsListing bool   `json:"hasSponsorsListing"`
	ID                 string `json:"id"`
	// The interaction ability settings for this organization.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
	// The setting value for whether the organization has an IP allow list enabled.
	IPAllowListEnabledSetting IPAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting"`
	// The IP addresses that are allowed to access resources owned by the organization.
	IPAllowListEntries IPAllowListEntryConnection `json:"ipAllowListEntries"`
	// The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
	IPAllowListForInstalledAppsEnabledSetting IPAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting"`
	// Whether the given account is sponsoring this user/organization.
	IsSponsoredBy bool `json:"isSponsoredBy"`
	// True if the viewer is sponsored by this user/organization.
	IsSponsoringViewer bool `json:"isSponsoringViewer"`
	// Whether the organization has verified its profile email and website.
	IsVerified bool `json:"isVerified"`
	// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
	ItemShowcase ProfileItemShowcase `json:"itemShowcase"`
	// The organization's public profile location.
	Location *string `json:"location,omitempty"`
	// The organization's login name.
	Login string `json:"login"`
	// A list of all mannequins for this organization.
	Mannequins MannequinConnection `json:"mannequins"`
	// Get the status messages members of this entity have set that are either public or visible only to the organization.
	MemberStatuses UserStatusConnection `json:"memberStatuses"`
	// Members can fork private repositories in this organization
	MembersCanForkPrivateRepositories bool `json:"membersCanForkPrivateRepositories"`
	// A list of users who are members of this organization.
	MembersWithRole OrganizationMemberConnection `json:"membersWithRole"`
	// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
	MonthlyEstimatedSponsorsIncomeInCents int64 `json:"monthlyEstimatedSponsorsIncomeInCents"`
	// The organization's public profile name.
	Name *string `json:"name,omitempty"`
	// The HTTP path creating a new team
	NewTeamResourcePath string `json:"newTeamResourcePath"`
	// The HTTP URL creating a new team
	NewTeamURL string `json:"newTeamUrl"`
	// Indicates if email notification delivery for this organization is restricted to verified or approved domains.
	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting"`
	// The billing email for the organization.
	OrganizationBillingEmail *string `json:"organizationBillingEmail,omitempty"`
	// A list of packages under the owner.
	Packages PackageConnection `json:"packages"`
	// A list of users who have been invited to join this organization.
	PendingMembers UserConnection `json:"pendingMembers"`
	// A list of repositories and gists this profile owner can pin to their profile.
	PinnableItems PinnableItemConnection `json:"pinnableItems"`
	// A list of repositories and gists this profile owner has pinned to their profile
	PinnedItems PinnableItemConnection `json:"pinnedItems"`
	// Returns how many more items this profile owner can pin to their profile.
	PinnedItemsRemaining int64 `json:"pinnedItemsRemaining"`
	// Find project by number.
	Project *Project `json:"project,omitempty"`
	// Find a project by number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// A list of projects under the owner.
	Projects ProjectConnection `json:"projects"`
	// The HTTP path listing organization's projects
	ProjectsResourcePath string `json:"projectsResourcePath"`
	// The HTTP URL listing organization's projects
	ProjectsURL string `json:"projectsUrl"`
	// A list of projects under the owner.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// Recent projects that this user has modified in the context of the owner.
	RecentProjects ProjectV2Connection `json:"recentProjects"`
	// A list of repositories that the user owns.
	Repositories RepositoryConnection `json:"repositories"`
	// Find Repository.
	Repository *Repository `json:"repository,omitempty"`
	// Discussion comments this user has authored.
	RepositoryDiscussionComments DiscussionCommentConnection `json:"repositoryDiscussionComments"`
	// Discussions this user has started.
	RepositoryDiscussions DiscussionConnection `json:"repositoryDiscussions"`
	// A list of all repository migrations for this organization.
	RepositoryMigrations RepositoryMigrationConnection `json:"repositoryMigrations"`
	// When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
	RequiresTwoFactorAuthentication *bool `json:"requiresTwoFactorAuthentication,omitempty"`
	// The HTTP path for this organization.
	ResourcePath string `json:"resourcePath"`
	// Returns a single ruleset from the current organization by ID.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
	// A list of rulesets for this organization.
	Rulesets *RepositoryRulesetConnection `json:"rulesets,omitempty"`
	// The Organization's SAML identity provider. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
	SamlIdentityProvider *OrganizationIdentityProvider `json:"samlIdentityProvider,omitempty"`
	// List of users and organizations this entity is sponsoring.
	Sponsoring SponsorConnection `json:"sponsoring"`
	// List of sponsors for this user or organization.
	Sponsors SponsorConnection `json:"sponsors"`
	// Events involving this sponsorable, such as new sponsorships.
	SponsorsActivities SponsorsActivityConnection `json:"sponsorsActivities"`
	// The GitHub Sponsors listing for this user or organization.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
	// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`
	// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`
	// List of sponsorship updates sent from this sponsorable to sponsors.
	SponsorshipNewsletters SponsorshipNewsletterConnection `json:"sponsorshipNewsletters"`
	// The sponsorships where this user or organization is the maintainer receiving the funds.
	SponsorshipsAsMaintainer SponsorshipConnection `json:"sponsorshipsAsMaintainer"`
	// The sponsorships where this user or organization is the funder.
	SponsorshipsAsSponsor SponsorshipConnection `json:"sponsorshipsAsSponsor"`
	// Find an organization's team by its slug.
	Team *Team `json:"team,omitempty"`
	// A list of teams in this organization.
	Teams TeamConnection `json:"teams"`
	// The HTTP path listing organization's teams
	TeamsResourcePath string `json:"teamsResourcePath"`
	// The HTTP URL listing organization's teams
	TeamsURL string `json:"teamsUrl"`
	// The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
	TotalSponsorshipAmountAsSponsorInCents *int64 `json:"totalSponsorshipAmountAsSponsorInCents,omitempty"`
	// The organization's Twitter username.
	TwitterUsername *string `json:"twitterUsername,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this organization.
	URL string `json:"url"`
	// Organization is adminable by the viewer.
	ViewerCanAdminister bool `json:"viewerCanAdminister"`
	// Can the viewer pin repositories and gists to the profile?
	ViewerCanChangePinnedItems bool `json:"viewerCanChangePinnedItems"`
	// Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects"`
	// Viewer can create repositories on this organization
	ViewerCanCreateRepositories bool `json:"viewerCanCreateRepositories"`
	// Viewer can create teams on this organization.
	ViewerCanCreateTeams bool `json:"viewerCanCreateTeams"`
	// Whether or not the viewer is able to sponsor this user/organization.
	ViewerCanSponsor bool `json:"viewerCanSponsor"`
	// Viewer is an active member of this organization.
	ViewerIsAMember bool `json:"viewerIsAMember"`
	// Whether or not this Organization is followed by the viewer.
	ViewerIsFollowing bool `json:"viewerIsFollowing"`
	// True if the viewer is sponsoring this user/organization.
	ViewerIsSponsoring bool `json:"viewerIsSponsoring"`
	// Whether contributors are required to sign off on web-based commits for repositories in this organization.
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired"`
	// The organization's public profile URL.
	WebsiteURL *string `json:"websiteUrl,omitempty"`
}

func (Organization) IsActor() {}

// A URL pointing to the actor's public avatar.
func (this Organization) GetAvatarURL() string { return this.AvatarURL }

// The username of the actor.
func (this Organization) GetLogin() string { return this.Login }

// The HTTP path for this actor.
func (this Organization) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this actor.
func (this Organization) GetURL() string { return this.URL }

func (Organization) IsAnnouncementBanner() {}

// The text of the announcement
func (this Organization) GetAnnouncement() *string { return this.Announcement }

// The expiration date of the announcement, if any
func (this Organization) GetAnnouncementExpiresAt() *string { return this.AnnouncementExpiresAt }

// Whether the announcement can be dismissed by the user
func (this Organization) GetAnnouncementUserDismissible() *bool {
	return this.AnnouncementUserDismissible
}

func (Organization) IsAssignee() {}

func (Organization) IsAuditEntryActor() {}

func (Organization) IsIPAllowListOwner() {}

func (Organization) IsMemberStatusable() {}

// Get the status messages members of this entity have set that are either public or visible only to the organization.
func (this Organization) GetMemberStatuses() UserStatusConnection { return this.MemberStatuses }

func (Organization) IsNode() {}

// ID of the object.
func (this Organization) GetID() string { return this.ID }

func (Organization) IsNotificationsList() {}

func (Organization) IsOrganizationOrUser() {}

func (Organization) IsPackageOwner() {}

// A list of packages under the owner.
func (this Organization) GetPackages() PackageConnection { return this.Packages }

func (Organization) IsPermissionGranter() {}

func (Organization) IsProfileOwner() {}

// Determine if this repository owner has any items that can be pinned to their profile.
func (this Organization) GetAnyPinnableItems() bool { return this.AnyPinnableItems }

// The public profile email.
func (this Organization) GetEmail() *string { return this.Email }

// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
func (this Organization) GetItemShowcase() ProfileItemShowcase { return this.ItemShowcase }

// The public profile location.
func (this Organization) GetLocation() *string { return this.Location }

// The username used to login.

// The public profile name.
func (this Organization) GetName() *string { return this.Name }

// A list of repositories and gists this profile owner can pin to their profile.
func (this Organization) GetPinnableItems() PinnableItemConnection { return this.PinnableItems }

// A list of repositories and gists this profile owner has pinned to their profile
func (this Organization) GetPinnedItems() PinnableItemConnection { return this.PinnedItems }

// Returns how many more items this profile owner can pin to their profile.
func (this Organization) GetPinnedItemsRemaining() int64 { return this.PinnedItemsRemaining }

// Can the viewer pin repositories and gists to the profile?
func (this Organization) GetViewerCanChangePinnedItems() bool { return this.ViewerCanChangePinnedItems }

// The public profile website URL.
func (this Organization) GetWebsiteURL() *string { return this.WebsiteURL }

func (Organization) IsProjectOwner() {}

// Find project by number.
func (this Organization) GetProject() *Project { return this.Project }

// A list of projects under the owner.
func (this Organization) GetProjects() ProjectConnection { return this.Projects }

// The HTTP path listing owners projects
func (this Organization) GetProjectsResourcePath() string { return this.ProjectsResourcePath }

// The HTTP URL listing owners projects
func (this Organization) GetProjectsURL() string { return this.ProjectsURL }

// Can the current viewer create new projects on this owner.
func (this Organization) GetViewerCanCreateProjects() bool { return this.ViewerCanCreateProjects }

func (Organization) IsProjectV2Owner() {}

// Find a project by number.
func (this Organization) GetProjectV2() *ProjectV2 { return this.ProjectV2 }

// A list of projects under the owner.
func (this Organization) GetProjectsV2() ProjectV2Connection { return this.ProjectsV2 }

func (Organization) IsProjectV2Recent() {}

// Recent projects that this user has modified in the context of the owner.
func (this Organization) GetRecentProjects() ProjectV2Connection { return this.RecentProjects }

func (Organization) IsReactor() {}

func (Organization) IsRepositoryDiscussionAuthor() {}

// Discussions this user has started.
func (this Organization) GetRepositoryDiscussions() DiscussionConnection {
	return this.RepositoryDiscussions
}

func (Organization) IsRepositoryDiscussionCommentAuthor() {}

// Discussion comments this user has authored.
func (this Organization) GetRepositoryDiscussionComments() DiscussionCommentConnection {
	return this.RepositoryDiscussionComments
}

func (Organization) IsRepositoryOwner() {}

// A URL pointing to the owner's public avatar.

// The username used to login.

// A list of repositories that the user owns.
func (this Organization) GetRepositories() RepositoryConnection { return this.Repositories }

// Find Repository.
func (this Organization) GetRepository() *Repository { return this.Repository }

// The HTTP URL for the owner.

// The HTTP URL for the owner.

func (Organization) IsRuleSource() {}

func (Organization) IsSearchResultItem() {}

func (Organization) IsSponsor() {}

func (Organization) IsSponsorable() {}

// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
func (this Organization) GetEstimatedNextSponsorsPayoutInCents() int64 {
	return this.EstimatedNextSponsorsPayoutInCents
}

// True if this user/organization has a GitHub Sponsors listing.
func (this Organization) GetHasSponsorsListing() bool { return this.HasSponsorsListing }

// Whether the given account is sponsoring this user/organization.
func (this Organization) GetIsSponsoredBy() bool { return this.IsSponsoredBy }

// True if the viewer is sponsored by this user/organization.
func (this Organization) GetIsSponsoringViewer() bool { return this.IsSponsoringViewer }

// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
func (this Organization) GetMonthlyEstimatedSponsorsIncomeInCents() int64 {
	return this.MonthlyEstimatedSponsorsIncomeInCents
}

// List of users and organizations this entity is sponsoring.
func (this Organization) GetSponsoring() SponsorConnection { return this.Sponsoring }

// List of sponsors for this user or organization.
func (this Organization) GetSponsors() SponsorConnection { return this.Sponsors }

// Events involving this sponsorable, such as new sponsorships.
func (this Organization) GetSponsorsActivities() SponsorsActivityConnection {
	return this.SponsorsActivities
}

// The GitHub Sponsors listing for this user or organization.
func (this Organization) GetSponsorsListing() *SponsorsListing { return this.SponsorsListing }

// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
func (this Organization) GetSponsorshipForViewerAsSponsor() *Sponsorship {
	return this.SponsorshipForViewerAsSponsor
}

// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
func (this Organization) GetSponsorshipForViewerAsSponsorable() *Sponsorship {
	return this.SponsorshipForViewerAsSponsorable
}

// List of sponsorship updates sent from this sponsorable to sponsors.
func (this Organization) GetSponsorshipNewsletters() SponsorshipNewsletterConnection {
	return this.SponsorshipNewsletters
}

// The sponsorships where this user or organization is the maintainer receiving the funds.
func (this Organization) GetSponsorshipsAsMaintainer() SponsorshipConnection {
	return this.SponsorshipsAsMaintainer
}

// The sponsorships where this user or organization is the funder.
func (this Organization) GetSponsorshipsAsSponsor() SponsorshipConnection {
	return this.SponsorshipsAsSponsor
}

// The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
func (this Organization) GetTotalSponsorshipAmountAsSponsorInCents() *int64 {
	return this.TotalSponsorshipAmountAsSponsorInCents
}

// Whether or not the viewer is able to sponsor this user/organization.
func (this Organization) GetViewerCanSponsor() bool { return this.ViewerCanSponsor }

// True if the viewer is sponsoring this user/organization.
func (this Organization) GetViewerIsSponsoring() bool { return this.ViewerIsSponsoring }

func (Organization) IsSponsorableItem() {}

func (Organization) IsUniformResourceLocatable() {}

// The HTML path to this resource.

// The URL to this resource.

func (Organization) IsVerifiableDomainOwner() {}

// The connection type for OrganizationAuditEntry.
type OrganizationAuditEntryConnection struct {
	// A list of edges.
	Edges []*OrganizationAuditEntryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []OrganizationAuditEntry `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type OrganizationAuditEntryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node OrganizationAuditEntry `json:"node,omitempty"`
}

// A list of organizations managed by an enterprise.
type OrganizationConnection struct {
	// A list of edges.
	Edges []*OrganizationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Organization `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type OrganizationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Organization `json:"node,omitempty"`
}

// The connection type for User.
type OrganizationEnterpriseOwnerConnection struct {
	// A list of edges.
	Edges []*OrganizationEnterpriseOwnerEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An enterprise owner in the context of an organization that is part of the enterprise.
type OrganizationEnterpriseOwnerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
	// The role of the owner with respect to the organization.
	OrganizationRole RoleInOrganization `json:"organizationRole"`
}

// An Identity Provider configured to provision SAML and SCIM identities for Organizations. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
type OrganizationIdentityProvider struct {
	// The digest algorithm used to sign SAML requests for the Identity Provider.
	DigestMethod *string `json:"digestMethod,omitempty"`
	// External Identities provisioned by this Identity Provider
	ExternalIdentities ExternalIdentityConnection `json:"externalIdentities"`
	ID                 string                     `json:"id"`
	// The x509 certificate used by the Identity Provider to sign assertions and responses.
	IdpCertificate *string `json:"idpCertificate,omitempty"`
	// The Issuer Entity ID for the SAML Identity Provider
	Issuer *string `json:"issuer,omitempty"`
	// Organization this Identity Provider belongs to
	Organization *Organization `json:"organization,omitempty"`
	// The signature algorithm used to sign SAML requests for the Identity Provider.
	SignatureMethod *string `json:"signatureMethod,omitempty"`
	// The URL endpoint for the Identity Provider's SAML SSO.
	SsoURL *string `json:"ssoUrl,omitempty"`
}

func (OrganizationIdentityProvider) IsNode() {}

// ID of the object.
func (this OrganizationIdentityProvider) GetID() string { return this.ID }

// An Invitation for a user to an organization.
type OrganizationInvitation struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The email address of the user invited to the organization.
	Email *string `json:"email,omitempty"`
	ID    string  `json:"id"`
	// The source of the invitation.
	InvitationSource OrganizationInvitationSource `json:"invitationSource"`
	// The type of invitation that was sent (e.g. email, user).
	InvitationType OrganizationInvitationType `json:"invitationType"`
	// The user who was invited to the organization.
	Invitee *User `json:"invitee,omitempty"`
	// The user who created the invitation.
	Inviter User `json:"inviter"`
	// The organization the invite is for
	Organization Organization `json:"organization"`
	// The user's pending role in the organization (e.g. member, owner).
	Role OrganizationInvitationRole `json:"role"`
}

func (OrganizationInvitation) IsNode() {}

// ID of the object.
func (this OrganizationInvitation) GetID() string { return this.ID }

// The connection type for OrganizationInvitation.
type OrganizationInvitationConnection struct {
	// A list of edges.
	Edges []*OrganizationInvitationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type OrganizationInvitationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

// The connection type for User.
type OrganizationMemberConnection struct {
	// A list of edges.
	Edges []*OrganizationMemberEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user within an organization.
type OrganizationMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
	HasTwoFactorEnabled *bool `json:"hasTwoFactorEnabled,omitempty"`
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
	// The role this user has in the organization.
	Role *OrganizationMemberRole `json:"role,omitempty"`
}

// A GitHub Enterprise Importer (GEI) organization migration.
type OrganizationMigration struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *string `json:"databaseId,omitempty"`
	// The reason the organization migration failed.
	FailureReason *string `json:"failureReason,omitempty"`
	ID            string  `json:"id"`
	// The remaining amount of repos to be migrated.
	RemainingRepositoriesCount *int64 `json:"remainingRepositoriesCount,omitempty"`
	// The name of the source organization to be migrated.
	SourceOrgName string `json:"sourceOrgName"`
	// The URL of the source organization to migrate.
	SourceOrgURL string `json:"sourceOrgUrl"`
	// The migration state.
	State OrganizationMigrationState `json:"state"`
	// The name of the target organization.
	TargetOrgName string `json:"targetOrgName"`
	// The total amount of repositories to be migrated.
	TotalRepositoriesCount *int64 `json:"totalRepositoriesCount,omitempty"`
}

func (OrganizationMigration) IsNode() {}

// ID of the object.
func (this OrganizationMigration) GetID() string { return this.ID }

// Ordering options for organization connections.
type OrganizationOrder struct {
	// The field to order organizations by.
	Field OrganizationOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An organization teams hovercard context
type OrganizationTeamsHovercardContext struct {
	// A string describing this context
	Message string `json:"message"`
	// An octicon to accompany this context
	Octicon string `json:"octicon"`
	// Teams in this organization the user is a member of that are relevant
	RelevantTeams TeamConnection `json:"relevantTeams"`
	// The path for the full team list for this user
	TeamsResourcePath string `json:"teamsResourcePath"`
	// The URL for the full team list for this user
	TeamsURL string `json:"teamsUrl"`
	// The total number of teams the user is on in the organization
	TotalTeamCount int64 `json:"totalTeamCount"`
}

func (OrganizationTeamsHovercardContext) IsHovercardContext() {}

// A string describing this context
func (this OrganizationTeamsHovercardContext) GetMessage() string { return this.Message }

// An octicon to accompany this context
func (this OrganizationTeamsHovercardContext) GetOcticon() string { return this.Octicon }

// An organization list hovercard context
type OrganizationsHovercardContext struct {
	// A string describing this context
	Message string `json:"message"`
	// An octicon to accompany this context
	Octicon string `json:"octicon"`
	// Organizations this user is a member of that are relevant
	RelevantOrganizations OrganizationConnection `json:"relevantOrganizations"`
	// The total number of organizations this user is in
	TotalOrganizationCount int64 `json:"totalOrganizationCount"`
}

func (OrganizationsHovercardContext) IsHovercardContext() {}

// A string describing this context
func (this OrganizationsHovercardContext) GetMessage() string { return this.Message }

// An octicon to accompany this context
func (this OrganizationsHovercardContext) GetOcticon() string { return this.Octicon }

// Information for an uploaded package.
type Package struct {
	ID string `json:"id"`
	// Find the latest version for the package.
	LatestVersion *PackageVersion `json:"latestVersion,omitempty"`
	// Identifies the name of the package.
	Name string `json:"name"`
	// Identifies the type of the package.
	PackageType PackageType `json:"packageType"`
	// The repository this package belongs to.
	Repository *Repository `json:"repository,omitempty"`
	// Statistics about package activity.
	Statistics *PackageStatistics `json:"statistics,omitempty"`
	// Find package version by version string.
	Version *PackageVersion `json:"version,omitempty"`
	// list of versions for this package
	Versions PackageVersionConnection `json:"versions"`
}

func (Package) IsNode() {}

// ID of the object.
func (this Package) GetID() string { return this.ID }

// The connection type for Package.
type PackageConnection struct {
	// A list of edges.
	Edges []*PackageEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Package `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PackageEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Package `json:"node,omitempty"`
}

// A file in a package version.
type PackageFile struct {
	ID string `json:"id"`
	// MD5 hash of the file.
	Md5 *string `json:"md5,omitempty"`
	// Name of the file.
	Name string `json:"name"`
	// The package version this file belongs to.
	PackageVersion *PackageVersion `json:"packageVersion,omitempty"`
	// SHA1 hash of the file.
	Sha1 *string `json:"sha1,omitempty"`
	// SHA256 hash of the file.
	Sha256 *string `json:"sha256,omitempty"`
	// Size of the file in bytes.
	Size *int64 `json:"size,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// URL to download the asset.
	URL *string `json:"url,omitempty"`
}

func (PackageFile) IsNode() {}

// ID of the object.
func (this PackageFile) GetID() string { return this.ID }

// The connection type for PackageFile.
type PackageFileConnection struct {
	// A list of edges.
	Edges []*PackageFileEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PackageFile `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PackageFileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PackageFile `json:"node,omitempty"`
}

// Ways in which lists of package files can be ordered upon return.
type PackageFileOrder struct {
	// The field in which to order package files by.
	Field *PackageFileOrderField `json:"field,omitempty"`
	// The direction in which to order package files by the specified field.
	Direction *OrderDirection `json:"direction,omitempty"`
}

// Ways in which lists of packages can be ordered upon return.
type PackageOrder struct {
	// The field in which to order packages by.
	Field *PackageOrderField `json:"field,omitempty"`
	// The direction in which to order packages by the specified field.
	Direction *OrderDirection `json:"direction,omitempty"`
}

// Represents a object that contains package activity statistics such as downloads.
type PackageStatistics struct {
	// Number of times the package was downloaded since it was created.
	DownloadsTotalCount int64 `json:"downloadsTotalCount"`
}

// A version tag contains the mapping between a tag name and a version.
type PackageTag struct {
	ID string `json:"id"`
	// Identifies the tag name of the version.
	Name string `json:"name"`
	// Version that the tag is associated with.
	Version *PackageVersion `json:"version,omitempty"`
}

func (PackageTag) IsNode() {}

// ID of the object.
func (this PackageTag) GetID() string { return this.ID }

// Information about a specific package version.
type PackageVersion struct {
	// List of files associated with this package version
	Files PackageFileConnection `json:"files"`
	ID    string                `json:"id"`
	// The package associated with this version.
	Package *Package `json:"package,omitempty"`
	// The platform this version was built for.
	Platform *string `json:"platform,omitempty"`
	// Whether or not this version is a pre-release.
	PreRelease bool `json:"preRelease"`
	// The README of this package version.
	Readme *string `json:"readme,omitempty"`
	// The release associated with this package version.
	Release *Release `json:"release,omitempty"`
	// Statistics about package activity.
	Statistics *PackageVersionStatistics `json:"statistics,omitempty"`
	// The package version summary.
	Summary *string `json:"summary,omitempty"`
	// The version string.
	Version string `json:"version"`
}

func (PackageVersion) IsNode() {}

// ID of the object.
func (this PackageVersion) GetID() string { return this.ID }

// The connection type for PackageVersion.
type PackageVersionConnection struct {
	// A list of edges.
	Edges []*PackageVersionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PackageVersion `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PackageVersionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PackageVersion `json:"node,omitempty"`
}

// Ways in which lists of package versions can be ordered upon return.
type PackageVersionOrder struct {
	// The field in which to order package versions by.
	Field *PackageVersionOrderField `json:"field,omitempty"`
	// The direction in which to order package versions by the specified field.
	Direction *OrderDirection `json:"direction,omitempty"`
}

// Represents a object that contains package version activity statistics such as downloads.
type PackageVersionStatistics struct {
	// Number of times the package was downloaded since it was created.
	DownloadsTotalCount int64 `json:"downloadsTotalCount"`
}

// Information about pagination in a connection.
type PageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
}

// A level of permission and source for a user's access to a repository.
type PermissionSource struct {
	// The organization the repository belongs to.
	Organization Organization `json:"organization"`
	// The level of access this source has granted to the user.
	Permission DefaultRepositoryPermissionField `json:"permission"`
	// The name of the role this source has granted to the user.
	RoleName *string `json:"roleName,omitempty"`
	// The source of this permission.
	Source PermissionGranter `json:"source"`
}

// Autogenerated input type of PinIssue
type PinIssueInput struct {
	// The ID of the issue to be pinned
	IssueID string `json:"issueId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of PinIssue
type PinIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was pinned
	Issue *Issue `json:"issue,omitempty"`
}

// The connection type for PinnableItem.
type PinnableItemConnection struct {
	// A list of edges.
	Edges []*PinnableItemEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []PinnableItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PinnableItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node PinnableItem `json:"node,omitempty"`
}

// A Pinned Discussion is a discussion pinned to a repository's index page.
type PinnedDiscussion struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The discussion that was pinned.
	Discussion Discussion `json:"discussion"`
	// Color stops of the chosen gradient
	GradientStopColors []string `json:"gradientStopColors"`
	ID                 string   `json:"id"`
	// Background texture pattern
	Pattern PinnedDiscussionPattern `json:"pattern"`
	// The actor that pinned this discussion.
	PinnedBy Actor `json:"pinnedBy"`
	// Preconfigured background gradient option
	PreconfiguredGradient *PinnedDiscussionGradient `json:"preconfiguredGradient,omitempty"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (PinnedDiscussion) IsNode() {}

// ID of the object.
func (this PinnedDiscussion) GetID() string { return this.ID }

func (PinnedDiscussion) IsRepositoryNode() {}

// The repository associated with this node.
func (this PinnedDiscussion) GetRepository() Repository { return this.Repository }

// The connection type for PinnedDiscussion.
type PinnedDiscussionConnection struct {
	// A list of edges.
	Edges []*PinnedDiscussionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PinnedDiscussion `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PinnedDiscussionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PinnedDiscussion `json:"node,omitempty"`
}

// Represents a 'pinned' event on a given issue or pull request.
type PinnedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the issue associated with the event.
	Issue Issue `json:"issue"`
}

func (PinnedEvent) IsIssueTimelineItems() {}

func (PinnedEvent) IsNode() {}

// ID of the object.
func (this PinnedEvent) GetID() string { return this.ID }

func (PinnedEvent) IsPullRequestTimelineItems() {}

// A Pinned Issue is a issue pinned to a repository's index page.
type PinnedIssue struct {
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// Identifies the primary key from the database as a BigInt.
	FullDatabaseID *string `json:"fullDatabaseId,omitempty"`
	ID             string  `json:"id"`
	// The issue that was pinned.
	Issue Issue `json:"issue"`
	// The actor that pinned this issue.
	PinnedBy Actor `json:"pinnedBy"`
	// The repository that this issue was pinned to.
	Repository Repository `json:"repository"`
}

func (PinnedIssue) IsNode() {}

// ID of the object.
func (this PinnedIssue) GetID() string { return this.ID }

// The connection type for PinnedIssue.
type PinnedIssueConnection struct {
	// A list of edges.
	Edges []*PinnedIssueEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PinnedIssue `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PinnedIssueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PinnedIssue `json:"node,omitempty"`
}

// Audit log entry for a private_repository_forking.disable event.
type PrivateRepositoryForkingDisableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (PrivateRepositoryForkingDisableAuditEntry) IsAuditEntry() {}

// The action name
func (this PrivateRepositoryForkingDisableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this PrivateRepositoryForkingDisableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this PrivateRepositoryForkingDisableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this PrivateRepositoryForkingDisableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this PrivateRepositoryForkingDisableAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this PrivateRepositoryForkingDisableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this PrivateRepositoryForkingDisableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this PrivateRepositoryForkingDisableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this PrivateRepositoryForkingDisableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this PrivateRepositoryForkingDisableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this PrivateRepositoryForkingDisableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this PrivateRepositoryForkingDisableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this PrivateRepositoryForkingDisableAuditEntry) GetUserURL() *string { return this.UserURL }

func (PrivateRepositoryForkingDisableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (PrivateRepositoryForkingDisableAuditEntry) IsNode() {}

// ID of the object.
func (this PrivateRepositoryForkingDisableAuditEntry) GetID() string { return this.ID }

func (PrivateRepositoryForkingDisableAuditEntry) IsOrganizationAuditEntry() {}

func (PrivateRepositoryForkingDisableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this PrivateRepositoryForkingDisableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this PrivateRepositoryForkingDisableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this PrivateRepositoryForkingDisableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this PrivateRepositoryForkingDisableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (PrivateRepositoryForkingDisableAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this PrivateRepositoryForkingDisableAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this PrivateRepositoryForkingDisableAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this PrivateRepositoryForkingDisableAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this PrivateRepositoryForkingDisableAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a private_repository_forking.enable event.
type PrivateRepositoryForkingEnableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (PrivateRepositoryForkingEnableAuditEntry) IsAuditEntry() {}

// The action name
func (this PrivateRepositoryForkingEnableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this PrivateRepositoryForkingEnableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this PrivateRepositoryForkingEnableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this PrivateRepositoryForkingEnableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this PrivateRepositoryForkingEnableAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this PrivateRepositoryForkingEnableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this PrivateRepositoryForkingEnableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this PrivateRepositoryForkingEnableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this PrivateRepositoryForkingEnableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this PrivateRepositoryForkingEnableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this PrivateRepositoryForkingEnableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this PrivateRepositoryForkingEnableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this PrivateRepositoryForkingEnableAuditEntry) GetUserURL() *string { return this.UserURL }

func (PrivateRepositoryForkingEnableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (PrivateRepositoryForkingEnableAuditEntry) IsNode() {}

// ID of the object.
func (this PrivateRepositoryForkingEnableAuditEntry) GetID() string { return this.ID }

func (PrivateRepositoryForkingEnableAuditEntry) IsOrganizationAuditEntry() {}

func (PrivateRepositoryForkingEnableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this PrivateRepositoryForkingEnableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this PrivateRepositoryForkingEnableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this PrivateRepositoryForkingEnableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this PrivateRepositoryForkingEnableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (PrivateRepositoryForkingEnableAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this PrivateRepositoryForkingEnableAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this PrivateRepositoryForkingEnableAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this PrivateRepositoryForkingEnableAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this PrivateRepositoryForkingEnableAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
type ProfileItemShowcase struct {
	// Whether or not the owner has pinned any repositories or gists.
	HasPinnedItems bool `json:"hasPinnedItems"`
	// The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
	Items PinnableItemConnection `json:"items"`
}

// Projects manage issues, pull requests and notes within a project owner.
type Project struct {
	// The project's description body.
	Body *string `json:"body,omitempty"`
	// The projects description body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Indicates if the object is closed (definition of closed may depend on type)
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// List of columns in the project
	Columns ProjectColumnConnection `json:"columns"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who originally created the project.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The project's name.
	Name string `json:"name"`
	// The project's number.
	Number int64 `json:"number"`
	// The project's owner. Currently limited to repositories, organizations, and users.
	Owner ProjectOwner `json:"owner"`
	// List of pending cards in this project
	PendingCards ProjectCardConnection `json:"pendingCards"`
	// Project progress details.
	Progress ProjectProgress `json:"progress"`
	// The HTTP path for this project
	ResourcePath string `json:"resourcePath"`
	// Whether the project is open or closed.
	State ProjectState `json:"state"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this project
	URL string `json:"url"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
}

func (Project) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this Project) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this Project) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this Project) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this Project) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (Project) IsNode() {}

// ID of the object.
func (this Project) GetID() string { return this.ID }

func (Project) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this Project) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

// A card in a project.
type ProjectCard struct {
	// The project column this card is associated under. A card may only belong to one
	// project column at a time. The column field will be null if the card is created
	// in a pending state and has yet to be associated with a column. Once cards are
	// associated with a column, they will not become pending in the future.
	//
	Column *ProjectColumn `json:"column,omitempty"`
	// The card content item
	Content ProjectCardItem `json:"content,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created this card
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// Whether the card is archived
	IsArchived bool `json:"isArchived"`
	// The card note
	Note *string `json:"note,omitempty"`
	// The project that contains this card.
	Project Project `json:"project"`
	// The HTTP path for this card
	ResourcePath string `json:"resourcePath"`
	// The state of ProjectCard
	State *ProjectCardState `json:"state,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this card
	URL string `json:"url"`
}

func (ProjectCard) IsNode() {}

// ID of the object.
func (this ProjectCard) GetID() string { return this.ID }

// The connection type for ProjectCard.
type ProjectCardConnection struct {
	// A list of edges.
	Edges []*ProjectCardEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectCard `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectCardEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectCard `json:"node,omitempty"`
}

// A column inside a project.
type ProjectColumn struct {
	// List of cards in the column
	Cards ProjectCardConnection `json:"cards"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The project column's name.
	Name string `json:"name"`
	// The project that contains this column.
	Project Project `json:"project"`
	// The semantic purpose of the column
	Purpose *ProjectColumnPurpose `json:"purpose,omitempty"`
	// The HTTP path for this project column
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this project column
	URL string `json:"url"`
}

func (ProjectColumn) IsNode() {}

// ID of the object.
func (this ProjectColumn) GetID() string { return this.ID }

// The connection type for ProjectColumn.
type ProjectColumnConnection struct {
	// A list of edges.
	Edges []*ProjectColumnEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectColumn `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectColumnEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectColumn `json:"node,omitempty"`
}

// A list of projects associated with the owner.
type ProjectConnection struct {
	// A list of edges.
	Edges []*ProjectEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Project `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Project `json:"node,omitempty"`
}

// Ways in which lists of projects can be ordered upon return.
type ProjectOrder struct {
	// The field in which to order projects by.
	Field ProjectOrderField `json:"field"`
	// The direction in which to order projects by the specified field.
	Direction OrderDirection `json:"direction"`
}

// Project progress stats.
type ProjectProgress struct {
	// The number of done cards.
	DoneCount int64 `json:"doneCount"`
	// The percentage of done cards.
	DonePercentage float64 `json:"donePercentage"`
	// Whether progress tracking is enabled and cards with purpose exist for this project
	Enabled bool `json:"enabled"`
	// The number of in-progress cards.
	InProgressCount int64 `json:"inProgressCount"`
	// The percentage of in-progress cards.
	InProgressPercentage float64 `json:"inProgressPercentage"`
	// The number of to do cards.
	TodoCount int64 `json:"todoCount"`
	// The percentage of to do cards.
	TodoPercentage float64 `json:"todoPercentage"`
}

// New projects that manage issues, pull requests and drafts using tables and boards.
type ProjectV2 struct {
	// Returns true if the project is closed.
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who originally created the project.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// A field of the project
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`
	// List of fields and their constraints in the project
	Fields ProjectV2FieldConfigurationConnection `json:"fields"`
	ID     string                                `json:"id"`
	// List of items in the project
	Items ProjectV2ItemConnection `json:"items"`
	// The project's number.
	Number int64 `json:"number"`
	// The project's owner. Currently limited to organizations and users.
	Owner ProjectV2Owner `json:"owner"`
	// Returns true if the project is public.
	Public bool `json:"public"`
	// The project's readme.
	Readme *string `json:"readme,omitempty"`
	// The repositories the project is linked to.
	Repositories RepositoryConnection `json:"repositories"`
	// The HTTP path for this project
	ResourcePath string `json:"resourcePath"`
	// The project's short description.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// The teams the project is linked to.
	Teams TeamConnection `json:"teams"`
	// Returns true if this project is a template.
	Template bool `json:"template"`
	// The project's name.
	Title string `json:"title"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this project
	URL string `json:"url"`
	// A view of the project
	View *ProjectV2View `json:"view,omitempty"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// List of views in the project
	Views ProjectV2ViewConnection `json:"views"`
	// A workflow of the project
	Workflow *ProjectV2Workflow `json:"workflow,omitempty"`
	// List of the workflows in the project
	Workflows ProjectV2WorkflowConnection `json:"workflows"`
}

func (ProjectV2) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this ProjectV2) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this ProjectV2) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this ProjectV2) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this ProjectV2) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (ProjectV2) IsNode() {}

// ID of the object.
func (this ProjectV2) GetID() string { return this.ID }

func (ProjectV2) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this ProjectV2) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

// The connection type for ProjectV2Actor.
type ProjectV2ActorConnection struct {
	// A list of edges.
	Edges []*ProjectV2ActorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []ProjectV2Actor `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2ActorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node ProjectV2Actor `json:"node,omitempty"`
}

// A collaborator to update on a project. Only one of the userId or teamId should be provided.
type ProjectV2Collaborator struct {
	// The ID of the user as a collaborator.
	UserID *string `json:"userId,omitempty"`
	// The ID of the team as a collaborator.
	TeamID *string `json:"teamId,omitempty"`
	// The role to grant the collaborator
	Role ProjectV2Roles `json:"role"`
}

// The connection type for ProjectV2.
type ProjectV2Connection struct {
	// A list of edges.
	Edges []*ProjectV2Edge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2 `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2Edge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2 `json:"node,omitempty"`
}

// A field inside a project.
type ProjectV2Field struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The field's type.
	DataType ProjectV2FieldType `json:"dataType"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The project field's name.
	Name string `json:"name"`
	// The project that contains this field.
	Project ProjectV2 `json:"project"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2Field) IsNode() {}

// ID of the object.
func (this ProjectV2Field) GetID() string { return this.ID }

func (ProjectV2Field) IsProjectV2FieldCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2Field) GetCreatedAt() string { return this.CreatedAt }

// The field's type.
func (this ProjectV2Field) GetDataType() ProjectV2FieldType { return this.DataType }

// Identifies the primary key from the database.
func (this ProjectV2Field) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field's name.
func (this ProjectV2Field) GetName() string { return this.Name }

// The project that contains this field.
func (this ProjectV2Field) GetProject() ProjectV2 { return this.Project }

// Identifies the date and time when the object was last updated.
func (this ProjectV2Field) GetUpdatedAt() string { return this.UpdatedAt }

func (ProjectV2Field) IsProjectV2FieldConfiguration() {}

// The connection type for ProjectV2FieldConfiguration.
type ProjectV2FieldConfigurationConnection struct {
	// A list of edges.
	Edges []*ProjectV2FieldConfigurationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []ProjectV2FieldConfiguration `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2FieldConfigurationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node ProjectV2FieldConfiguration `json:"node,omitempty"`
}

// The connection type for ProjectV2Field.
type ProjectV2FieldConnection struct {
	// A list of edges.
	Edges []*ProjectV2FieldEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2Field `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2FieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2Field `json:"node,omitempty"`
}

// Ordering options for project v2 field connections
type ProjectV2FieldOrder struct {
	// The field to order the project v2 fields by.
	Field ProjectV2FieldOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
type ProjectV2FieldValue struct {
	// The text to set on the field.
	Text *string `json:"text,omitempty"`
	// The number to set on the field.
	Number *float64 `json:"number,omitempty"`
	// The ISO 8601 date to set on the field.
	Date *time.Time `json:"date,omitempty"`
	// The id of the single select option to set on the field.
	SingleSelectOptionID *string `json:"singleSelectOptionId,omitempty"`
	// The id of the iteration to set on the field.
	IterationID *string `json:"iterationId,omitempty"`
}

// Ways in which to filter lists of projects.
type ProjectV2Filters struct {
	// List project v2 filtered by the state given.
	State *ProjectV2State `json:"state,omitempty"`
}

// An item within a Project.
type ProjectV2Item struct {
	// The content of the referenced draft issue, issue, or pull request
	Content ProjectV2ItemContent `json:"content,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The field value of the first project field which matches the 'name' argument that is set on the item.
	FieldValueByName ProjectV2ItemFieldValue `json:"fieldValueByName,omitempty"`
	// The field values that are set on the item.
	FieldValues ProjectV2ItemFieldValueConnection `json:"fieldValues"`
	ID          string                            `json:"id"`
	// Whether the item is archived.
	IsArchived bool `json:"isArchived"`
	// The project that contains this item.
	Project ProjectV2 `json:"project"`
	// The type of the item.
	Type ProjectV2ItemType `json:"type"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2Item) IsNode() {}

// ID of the object.
func (this ProjectV2Item) GetID() string { return this.ID }

// The connection type for ProjectV2Item.
type ProjectV2ItemConnection struct {
	// A list of edges.
	Edges []*ProjectV2ItemEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2Item `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2ItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2Item `json:"node,omitempty"`
}

// The value of a date field in a Project item.
type ProjectV2ItemFieldDateValue struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// Date value for the field
	Date *time.Time `json:"date,omitempty"`
	// The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	ID    string                      `json:"id"`
	// The project item that contains this value.
	Item ProjectV2Item `json:"item"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2ItemFieldDateValue) IsNode() {}

// ID of the object.
func (this ProjectV2ItemFieldDateValue) GetID() string { return this.ID }

func (ProjectV2ItemFieldDateValue) IsProjectV2ItemFieldValue() {}

func (ProjectV2ItemFieldDateValue) IsProjectV2ItemFieldValueCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2ItemFieldDateValue) GetCreatedAt() string { return this.CreatedAt }

// The actor who created the item.
func (this ProjectV2ItemFieldDateValue) GetCreator() Actor { return this.Creator }

// Identifies the primary key from the database.
func (this ProjectV2ItemFieldDateValue) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field that contains this value.
func (this ProjectV2ItemFieldDateValue) GetField() ProjectV2FieldConfiguration { return this.Field }

// The project item that contains this value.
func (this ProjectV2ItemFieldDateValue) GetItem() ProjectV2Item { return this.Item }

// Identifies the date and time when the object was last updated.
func (this ProjectV2ItemFieldDateValue) GetUpdatedAt() string { return this.UpdatedAt }

// The value of an iteration field in a Project item.
type ProjectV2ItemFieldIterationValue struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The duration of the iteration in days.
	Duration int64 `json:"duration"`
	// The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	ID    string                      `json:"id"`
	// The project item that contains this value.
	Item ProjectV2Item `json:"item"`
	// The ID of the iteration.
	IterationID string `json:"iterationId"`
	// The start date of the iteration.
	StartDate time.Time `json:"startDate"`
	// The title of the iteration.
	Title string `json:"title"`
	// The title of the iteration, with HTML.
	TitleHTML string `json:"titleHTML"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2ItemFieldIterationValue) IsNode() {}

// ID of the object.
func (this ProjectV2ItemFieldIterationValue) GetID() string { return this.ID }

func (ProjectV2ItemFieldIterationValue) IsProjectV2ItemFieldValue() {}

func (ProjectV2ItemFieldIterationValue) IsProjectV2ItemFieldValueCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2ItemFieldIterationValue) GetCreatedAt() string { return this.CreatedAt }

// The actor who created the item.
func (this ProjectV2ItemFieldIterationValue) GetCreator() Actor { return this.Creator }

// Identifies the primary key from the database.
func (this ProjectV2ItemFieldIterationValue) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field that contains this value.
func (this ProjectV2ItemFieldIterationValue) GetField() ProjectV2FieldConfiguration {
	return this.Field
}

// The project item that contains this value.
func (this ProjectV2ItemFieldIterationValue) GetItem() ProjectV2Item { return this.Item }

// Identifies the date and time when the object was last updated.
func (this ProjectV2ItemFieldIterationValue) GetUpdatedAt() string { return this.UpdatedAt }

// The value of the labels field in a Project item.
type ProjectV2ItemFieldLabelValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// Labels value of a field
	Labels *LabelConnection `json:"labels,omitempty"`
}

func (ProjectV2ItemFieldLabelValue) IsProjectV2ItemFieldValue() {}

// The value of a milestone field in a Project item.
type ProjectV2ItemFieldMilestoneValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// Milestone value of a field
	Milestone *Milestone `json:"milestone,omitempty"`
}

func (ProjectV2ItemFieldMilestoneValue) IsProjectV2ItemFieldValue() {}

// The value of a number field in a Project item.
type ProjectV2ItemFieldNumberValue struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	ID    string                      `json:"id"`
	// The project item that contains this value.
	Item ProjectV2Item `json:"item"`
	// Number as a float(8)
	Number *float64 `json:"number,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2ItemFieldNumberValue) IsNode() {}

// ID of the object.
func (this ProjectV2ItemFieldNumberValue) GetID() string { return this.ID }

func (ProjectV2ItemFieldNumberValue) IsProjectV2ItemFieldValue() {}

func (ProjectV2ItemFieldNumberValue) IsProjectV2ItemFieldValueCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2ItemFieldNumberValue) GetCreatedAt() string { return this.CreatedAt }

// The actor who created the item.
func (this ProjectV2ItemFieldNumberValue) GetCreator() Actor { return this.Creator }

// Identifies the primary key from the database.
func (this ProjectV2ItemFieldNumberValue) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field that contains this value.
func (this ProjectV2ItemFieldNumberValue) GetField() ProjectV2FieldConfiguration { return this.Field }

// The project item that contains this value.
func (this ProjectV2ItemFieldNumberValue) GetItem() ProjectV2Item { return this.Item }

// Identifies the date and time when the object was last updated.
func (this ProjectV2ItemFieldNumberValue) GetUpdatedAt() string { return this.UpdatedAt }

// The value of a pull request field in a Project item.
type ProjectV2ItemFieldPullRequestValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// The pull requests for this field
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
}

func (ProjectV2ItemFieldPullRequestValue) IsProjectV2ItemFieldValue() {}

// The value of a repository field in a Project item.
type ProjectV2ItemFieldRepositoryValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// The repository for this field.
	Repository *Repository `json:"repository,omitempty"`
}

func (ProjectV2ItemFieldRepositoryValue) IsProjectV2ItemFieldValue() {}

// The value of a reviewers field in a Project item.
type ProjectV2ItemFieldReviewerValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// The reviewers for this field.
	Reviewers *RequestedReviewerConnection `json:"reviewers,omitempty"`
}

func (ProjectV2ItemFieldReviewerValue) IsProjectV2ItemFieldValue() {}

// The value of a single select field in a Project item.
type ProjectV2ItemFieldSingleSelectValue struct {
	// The color applied to the selected single-select option.
	Color ProjectV2SingleSelectFieldOptionColor `json:"color"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// A plain-text description of the selected single-select option, such as what the option means.
	Description *string `json:"description,omitempty"`
	// The description of the selected single-select option, including HTML tags.
	DescriptionHTML *string `json:"descriptionHTML,omitempty"`
	// The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	ID    string                      `json:"id"`
	// The project item that contains this value.
	Item ProjectV2Item `json:"item"`
	// The name of the selected single select option.
	Name *string `json:"name,omitempty"`
	// The html name of the selected single select option.
	NameHTML *string `json:"nameHTML,omitempty"`
	// The id of the selected single select option.
	OptionID *string `json:"optionId,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2ItemFieldSingleSelectValue) IsNode() {}

// ID of the object.
func (this ProjectV2ItemFieldSingleSelectValue) GetID() string { return this.ID }

func (ProjectV2ItemFieldSingleSelectValue) IsProjectV2ItemFieldValue() {}

func (ProjectV2ItemFieldSingleSelectValue) IsProjectV2ItemFieldValueCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2ItemFieldSingleSelectValue) GetCreatedAt() string { return this.CreatedAt }

// The actor who created the item.
func (this ProjectV2ItemFieldSingleSelectValue) GetCreator() Actor { return this.Creator }

// Identifies the primary key from the database.
func (this ProjectV2ItemFieldSingleSelectValue) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field that contains this value.
func (this ProjectV2ItemFieldSingleSelectValue) GetField() ProjectV2FieldConfiguration {
	return this.Field
}

// The project item that contains this value.
func (this ProjectV2ItemFieldSingleSelectValue) GetItem() ProjectV2Item { return this.Item }

// Identifies the date and time when the object was last updated.
func (this ProjectV2ItemFieldSingleSelectValue) GetUpdatedAt() string { return this.UpdatedAt }

// The value of a text field in a Project item.
type ProjectV2ItemFieldTextValue struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created the item.
	Creator Actor `json:"creator,omitempty"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	ID    string                      `json:"id"`
	// The project item that contains this value.
	Item ProjectV2Item `json:"item"`
	// Text value of a field
	Text *string `json:"text,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2ItemFieldTextValue) IsNode() {}

// ID of the object.
func (this ProjectV2ItemFieldTextValue) GetID() string { return this.ID }

func (ProjectV2ItemFieldTextValue) IsProjectV2ItemFieldValue() {}

func (ProjectV2ItemFieldTextValue) IsProjectV2ItemFieldValueCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2ItemFieldTextValue) GetCreatedAt() string { return this.CreatedAt }

// The actor who created the item.
func (this ProjectV2ItemFieldTextValue) GetCreator() Actor { return this.Creator }

// Identifies the primary key from the database.
func (this ProjectV2ItemFieldTextValue) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field that contains this value.
func (this ProjectV2ItemFieldTextValue) GetField() ProjectV2FieldConfiguration { return this.Field }

// The project item that contains this value.
func (this ProjectV2ItemFieldTextValue) GetItem() ProjectV2Item { return this.Item }

// Identifies the date and time when the object was last updated.
func (this ProjectV2ItemFieldTextValue) GetUpdatedAt() string { return this.UpdatedAt }

// The value of a user field in a Project item.
type ProjectV2ItemFieldUserValue struct {
	// The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field"`
	// The users for this field
	Users *UserConnection `json:"users,omitempty"`
}

func (ProjectV2ItemFieldUserValue) IsProjectV2ItemFieldValue() {}

// The connection type for ProjectV2ItemFieldValue.
type ProjectV2ItemFieldValueConnection struct {
	// A list of edges.
	Edges []*ProjectV2ItemFieldValueEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []ProjectV2ItemFieldValue `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2ItemFieldValueEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node ProjectV2ItemFieldValue `json:"node,omitempty"`
}

// Ordering options for project v2 item field value connections
type ProjectV2ItemFieldValueOrder struct {
	// The field to order the project v2 item field values by.
	Field ProjectV2ItemFieldValueOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Ordering options for project v2 item connections
type ProjectV2ItemOrder struct {
	// The field to order the project v2 items by.
	Field ProjectV2ItemOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An iteration field inside a project.
type ProjectV2IterationField struct {
	// Iteration configuration settings
	Configuration ProjectV2IterationFieldConfiguration `json:"configuration"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The field's type.
	DataType ProjectV2FieldType `json:"dataType"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The project field's name.
	Name string `json:"name"`
	// The project that contains this field.
	Project ProjectV2 `json:"project"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2IterationField) IsNode() {}

// ID of the object.
func (this ProjectV2IterationField) GetID() string { return this.ID }

func (ProjectV2IterationField) IsProjectV2FieldCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2IterationField) GetCreatedAt() string { return this.CreatedAt }

// The field's type.
func (this ProjectV2IterationField) GetDataType() ProjectV2FieldType { return this.DataType }

// Identifies the primary key from the database.
func (this ProjectV2IterationField) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field's name.
func (this ProjectV2IterationField) GetName() string { return this.Name }

// The project that contains this field.
func (this ProjectV2IterationField) GetProject() ProjectV2 { return this.Project }

// Identifies the date and time when the object was last updated.
func (this ProjectV2IterationField) GetUpdatedAt() string { return this.UpdatedAt }

func (ProjectV2IterationField) IsProjectV2FieldConfiguration() {}

// Iteration field configuration for a project.
type ProjectV2IterationFieldConfiguration struct {
	// The iteration's completed iterations
	CompletedIterations []*ProjectV2IterationFieldIteration `json:"completedIterations"`
	// The iteration's duration in days
	Duration int64 `json:"duration"`
	// The iteration's iterations
	Iterations []*ProjectV2IterationFieldIteration `json:"iterations"`
	// The iteration's start day of the week
	StartDay int64 `json:"startDay"`
}

// Iteration field iteration settings for a project.
type ProjectV2IterationFieldIteration struct {
	// The iteration's duration in days
	Duration int64 `json:"duration"`
	// The iteration's ID.
	ID string `json:"id"`
	// The iteration's start date
	StartDate time.Time `json:"startDate"`
	// The iteration's title.
	Title string `json:"title"`
	// The iteration's html title.
	TitleHTML string `json:"titleHTML"`
}

// Ways in which lists of projects can be ordered upon return.
type ProjectV2Order struct {
	// The field in which to order projects by.
	Field ProjectV2OrderField `json:"field"`
	// The direction in which to order projects by the specified field.
	Direction OrderDirection `json:"direction"`
}

// A single select field inside a project.
type ProjectV2SingleSelectField struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The field's type.
	DataType ProjectV2FieldType `json:"dataType"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The project field's name.
	Name string `json:"name"`
	// Options for the single select field
	Options []*ProjectV2SingleSelectFieldOption `json:"options"`
	// The project that contains this field.
	Project ProjectV2 `json:"project"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2SingleSelectField) IsNode() {}

// ID of the object.
func (this ProjectV2SingleSelectField) GetID() string { return this.ID }

func (ProjectV2SingleSelectField) IsProjectV2FieldCommon() {}

// Identifies the date and time when the object was created.
func (this ProjectV2SingleSelectField) GetCreatedAt() string { return this.CreatedAt }

// The field's type.
func (this ProjectV2SingleSelectField) GetDataType() ProjectV2FieldType { return this.DataType }

// Identifies the primary key from the database.
func (this ProjectV2SingleSelectField) GetDatabaseID() *int64 { return this.DatabaseID }

// The project field's name.
func (this ProjectV2SingleSelectField) GetName() string { return this.Name }

// The project that contains this field.
func (this ProjectV2SingleSelectField) GetProject() ProjectV2 { return this.Project }

// Identifies the date and time when the object was last updated.
func (this ProjectV2SingleSelectField) GetUpdatedAt() string { return this.UpdatedAt }

func (ProjectV2SingleSelectField) IsProjectV2FieldConfiguration() {}

// Single select field option for a configuration for a project.
type ProjectV2SingleSelectFieldOption struct {
	// The option's display color.
	Color ProjectV2SingleSelectFieldOptionColor `json:"color"`
	// The option's plain-text description.
	Description string `json:"description"`
	// The option's description, possibly containing HTML.
	DescriptionHTML string `json:"descriptionHTML"`
	// The option's ID.
	ID string `json:"id"`
	// The option's name.
	Name string `json:"name"`
	// The option's html name.
	NameHTML string `json:"nameHTML"`
}

// Represents a single select field option
type ProjectV2SingleSelectFieldOptionInput struct {
	// The name of the option
	Name string `json:"name"`
	// The display color of the option
	Color ProjectV2SingleSelectFieldOptionColor `json:"color"`
	// The description text of the option
	Description string `json:"description"`
}

// Represents a sort by field and direction.
type ProjectV2SortBy struct {
	// The direction of the sorting. Possible values are ASC and DESC.
	Direction OrderDirection `json:"direction"`
	// The field by which items are sorted.
	Field ProjectV2Field `json:"field"`
}

// The connection type for ProjectV2SortBy.
type ProjectV2SortByConnection struct {
	// A list of edges.
	Edges []*ProjectV2SortByEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2SortBy `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2SortByEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2SortBy `json:"node,omitempty"`
}

// Represents a sort by field and direction.
type ProjectV2SortByField struct {
	// The direction of the sorting. Possible values are ASC and DESC.
	Direction OrderDirection `json:"direction"`
	// The field by which items are sorted.
	Field ProjectV2FieldConfiguration `json:"field"`
}

// The connection type for ProjectV2SortByField.
type ProjectV2SortByFieldConnection struct {
	// A list of edges.
	Edges []*ProjectV2SortByFieldEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2SortByField `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2SortByFieldEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2SortByField `json:"node,omitempty"`
}

// A view within a ProjectV2.
type ProjectV2View struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The view's visible fields.
	Fields *ProjectV2FieldConfigurationConnection `json:"fields,omitempty"`
	// The project view's filter.
	Filter *string `json:"filter,omitempty"`
	// The view's group-by field.
	GroupBy *ProjectV2FieldConnection `json:"groupBy,omitempty"`
	// The view's group-by field.
	GroupByFields *ProjectV2FieldConfigurationConnection `json:"groupByFields,omitempty"`
	ID            string                                 `json:"id"`
	// The project view's layout.
	Layout ProjectV2ViewLayout `json:"layout"`
	// The project view's name.
	Name string `json:"name"`
	// The project view's number.
	Number int64 `json:"number"`
	// The project that contains this view.
	Project ProjectV2 `json:"project"`
	// The view's sort-by config.
	SortBy *ProjectV2SortByConnection `json:"sortBy,omitempty"`
	// The view's sort-by config.
	SortByFields *ProjectV2SortByFieldConnection `json:"sortByFields,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The view's vertical-group-by field.
	VerticalGroupBy *ProjectV2FieldConnection `json:"verticalGroupBy,omitempty"`
	// The view's vertical-group-by field.
	VerticalGroupByFields *ProjectV2FieldConfigurationConnection `json:"verticalGroupByFields,omitempty"`
	// The view's visible fields.
	VisibleFields *ProjectV2FieldConnection `json:"visibleFields,omitempty"`
}

func (ProjectV2View) IsNode() {}

// ID of the object.
func (this ProjectV2View) GetID() string { return this.ID }

// The connection type for ProjectV2View.
type ProjectV2ViewConnection struct {
	// A list of edges.
	Edges []*ProjectV2ViewEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2View `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2ViewEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2View `json:"node,omitempty"`
}

// Ordering options for project v2 view connections
type ProjectV2ViewOrder struct {
	// The field to order the project v2 views by.
	Field ProjectV2ViewOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A workflow inside a project.
type ProjectV2Workflow struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The workflows' enabled state.
	Enabled bool   `json:"enabled"`
	ID      string `json:"id"`
	// The workflows' name.
	Name string `json:"name"`
	// The workflows' number.
	Number int64 `json:"number"`
	// The project that contains this workflow.
	Project ProjectV2 `json:"project"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (ProjectV2Workflow) IsNode() {}

// ID of the object.
func (this ProjectV2Workflow) GetID() string { return this.ID }

// The connection type for ProjectV2Workflow.
type ProjectV2WorkflowConnection struct {
	// A list of edges.
	Edges []*ProjectV2WorkflowEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ProjectV2Workflow `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ProjectV2WorkflowEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ProjectV2Workflow `json:"node,omitempty"`
}

// Ordering options for project v2 workflows connections
type ProjectV2WorkflowOrder struct {
	// The field to order the project v2 workflows by.
	Field ProjectV2WorkflowsOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A user's public key.
type PublicKey struct {
	// The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
	AccessedAt *string `json:"accessedAt,omitempty"`
	// Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The fingerprint for this PublicKey.
	Fingerprint string `json:"fingerprint"`
	ID          string `json:"id"`
	// Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	// The public key string.
	Key string `json:"key"`
	// Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

func (PublicKey) IsNode() {}

// ID of the object.
func (this PublicKey) GetID() string { return this.ID }

// The connection type for PublicKey.
type PublicKeyConnection struct {
	// A list of edges.
	Edges []*PublicKeyEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PublicKey `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PublicKeyEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PublicKey `json:"node,omitempty"`
}

// Autogenerated input type of PublishSponsorsTier
type PublishSponsorsTierInput struct {
	// The ID of the draft tier to publish.
	TierID string `json:"tierId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of PublishSponsorsTier
type PublishSponsorsTierPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The tier that was published.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

// A repository pull request.
type PullRequest struct {
	// Reason that the conversation was locked.
	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
	// The number of additions in this pull request.
	Additions int64 `json:"additions"`
	// A list of Users assigned to this object.
	Assignees UserConnection `json:"assignees"`
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// Returns the auto-merge request object if one exists for this pull request.
	AutoMergeRequest *AutoMergeRequest `json:"autoMergeRequest,omitempty"`
	// Identifies the base Ref associated with the pull request.
	BaseRef *Ref `json:"baseRef,omitempty"`
	// Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
	BaseRefName string `json:"baseRefName"`
	// Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
	BaseRefOid string `json:"baseRefOid"`
	// The repository associated with this pull request's base Ref.
	BaseRepository *Repository `json:"baseRepository,omitempty"`
	// The body as Markdown.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The number of changed files in this pull request.
	ChangedFiles int64 `json:"changedFiles"`
	// The HTTP path for the checks of this pull request.
	ChecksResourcePath string `json:"checksResourcePath"`
	// The HTTP URL for the checks of this pull request.
	ChecksURL string `json:"checksUrl"`
	// `true` if the pull request is closed
	Closed bool `json:"closed"`
	// Identifies the date and time when the object was closed.
	ClosedAt *string `json:"closedAt,omitempty"`
	// List of issues that were may be closed by this pull request
	ClosingIssuesReferences *IssueConnection `json:"closingIssuesReferences,omitempty"`
	// A list of comments associated with the pull request.
	Comments IssueCommentConnection `json:"comments"`
	// A list of commits present in this pull request's head branch not present in the base branch.
	Commits PullRequestCommitConnection `json:"commits"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The number of deletions in this pull request.
	Deletions int64 `json:"deletions"`
	// The actor who edited this pull request's body.
	Editor Actor `json:"editor,omitempty"`
	// Lists the files changed within this pull request.
	Files *PullRequestChangedFileConnection `json:"files,omitempty"`
	// Identifies the head Ref associated with the pull request.
	HeadRef *Ref `json:"headRef,omitempty"`
	// Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
	HeadRefName string `json:"headRefName"`
	// Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
	HeadRefOid string `json:"headRefOid"`
	// The repository associated with this pull request's head Ref.
	HeadRepository *Repository `json:"headRepository,omitempty"`
	// The owner of the repository associated with this pull request's head Ref.
	HeadRepositoryOwner RepositoryOwner `json:"headRepositoryOwner,omitempty"`
	// The hovercard information for this issue
	Hovercard Hovercard `json:"hovercard"`
	ID        string    `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// The head and base repositories are different.
	IsCrossRepository bool `json:"isCrossRepository"`
	// Identifies if the pull request is a draft.
	IsDraft bool `json:"isDraft"`
	// Is this pull request read by the viewer
	IsReadByViewer *bool `json:"isReadByViewer,omitempty"`
	// A list of labels associated with the object.
	Labels *LabelConnection `json:"labels,omitempty"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// A list of latest reviews per user associated with the pull request.
	LatestOpinionatedReviews *PullRequestReviewConnection `json:"latestOpinionatedReviews,omitempty"`
	// A list of latest reviews per user associated with the pull request that are not also pending review.
	LatestReviews *PullRequestReviewConnection `json:"latestReviews,omitempty"`
	// `true` if the pull request is locked
	Locked bool `json:"locked"`
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify bool `json:"maintainerCanModify"`
	// The commit that was created when this pull request was merged.
	MergeCommit *Commit `json:"mergeCommit,omitempty"`
	// The merge queue entry of the pull request in the base branch's merge queue
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`
	// Whether or not the pull request can be merged based on the existence of merge conflicts.
	Mergeable MergeableState `json:"mergeable"`
	// Whether or not the pull request was merged.
	Merged bool `json:"merged"`
	// The date and time that the pull request was merged.
	MergedAt *string `json:"mergedAt,omitempty"`
	// The actor who merged the pull request.
	MergedBy Actor `json:"mergedBy,omitempty"`
	// Identifies the milestone associated with the pull request.
	Milestone *Milestone `json:"milestone,omitempty"`
	// Identifies the pull request number.
	Number int64 `json:"number"`
	// A list of Users that are participating in the Pull Request conversation.
	Participants UserConnection `json:"participants"`
	// The permalink to the pull request.
	Permalink string `json:"permalink"`
	// The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
	PotentialMergeCommit *Commit `json:"potentialMergeCommit,omitempty"`
	// List of project cards associated with this pull request.
	ProjectCards ProjectCardConnection `json:"projectCards"`
	// List of project items associated with this pull request.
	ProjectItems ProjectV2ItemConnection `json:"projectItems"`
	// Find a project by number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// A list of projects under the owner.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path for this pull request.
	ResourcePath string `json:"resourcePath"`
	// The HTTP path for reverting this pull request.
	RevertResourcePath string `json:"revertResourcePath"`
	// The HTTP URL for reverting this pull request.
	RevertURL string `json:"revertUrl"`
	// The current status of this pull request with respect to code review.
	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision,omitempty"`
	// A list of review requests associated with the pull request.
	ReviewRequests *ReviewRequestConnection `json:"reviewRequests,omitempty"`
	// The list of all review threads for this pull request.
	ReviewThreads PullRequestReviewThreadConnection `json:"reviewThreads"`
	// A list of reviews associated with the pull request.
	Reviews *PullRequestReviewConnection `json:"reviews,omitempty"`
	// Identifies the state of the pull request.
	State PullRequestState `json:"state"`
	// A list of reviewer suggestions based on commit history and past review comments.
	SuggestedReviewers []*SuggestedReviewer `json:"suggestedReviewers"`
	// A list of events, comments, commits, etc. associated with the pull request.
	Timeline PullRequestTimelineConnection `json:"timeline"`
	// A list of events, comments, commits, etc. associated with the pull request.
	TimelineItems PullRequestTimelineItemsConnection `json:"timelineItems"`
	// Identifies the pull request title.
	Title string `json:"title"`
	// Identifies the pull request title rendered to HTML.
	TitleHTML string `json:"titleHTML"`
	// Returns a count of how many comments this pull request has received.
	TotalCommentsCount *int64 `json:"totalCommentsCount,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this pull request.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Whether or not the viewer can apply suggestion.
	ViewerCanApplySuggestion bool `json:"viewerCanApplySuggestion"`
	// Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose"`
	// Check if the viewer can restore the deleted head ref.
	ViewerCanDeleteHeadRef bool `json:"viewerCanDeleteHeadRef"`
	// Whether or not the viewer can disable auto-merge
	ViewerCanDisableAutoMerge bool `json:"viewerCanDisableAutoMerge"`
	// Can the viewer edit files within this pull request.
	ViewerCanEditFiles bool `json:"viewerCanEditFiles"`
	// Whether or not the viewer can enable auto-merge
	ViewerCanEnableAutoMerge bool `json:"viewerCanEnableAutoMerge"`
	// Indicates whether the viewer can bypass branch protections and merge the pull request immediately
	ViewerCanMergeAsAdmin bool `json:"viewerCanMergeAsAdmin"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
	// If the head ref is up to date or unable to be updated by this user, this will return false.
	//
	ViewerCanUpdateBranch bool `json:"viewerCanUpdateBranch"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
	// The latest review given from the viewer.
	ViewerLatestReview *PullRequestReview `json:"viewerLatestReview,omitempty"`
	// The person who has requested the viewer for review on this pull request.
	ViewerLatestReviewRequest *ReviewRequest `json:"viewerLatestReviewRequest,omitempty"`
	// The merge body text for the viewer and method.
	ViewerMergeBodyText string `json:"viewerMergeBodyText"`
	// The merge headline text for the viewer and method.
	ViewerMergeHeadlineText string `json:"viewerMergeHeadlineText"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (PullRequest) IsAssignable() {}

// A list of Users assigned to this object.
func (this PullRequest) GetAssignees() UserConnection { return this.Assignees }

func (PullRequest) IsClosable() {}

// Indicates if the object is closed (definition of closed may depend on type)
func (this PullRequest) GetClosed() bool { return this.Closed }

// Identifies the date and time when the object was closed.
func (this PullRequest) GetClosedAt() *string { return this.ClosedAt }

// Indicates if the object can be closed by the viewer.
func (this PullRequest) GetViewerCanClose() bool { return this.ViewerCanClose }

// Indicates if the object can be reopened by the viewer.
func (this PullRequest) GetViewerCanReopen() bool { return this.ViewerCanReopen }

func (PullRequest) IsCloser() {}

func (PullRequest) IsComment() {}

// The actor who authored the comment.
func (this PullRequest) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this PullRequest) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this PullRequest) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this PullRequest) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this PullRequest) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this PullRequest) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this PullRequest) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this PullRequest) GetEditor() Actor { return this.Editor }
func (this PullRequest) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this PullRequest) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this PullRequest) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this PullRequest) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this PullRequest) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this PullRequest) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this PullRequest) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (PullRequest) IsIssueOrPullRequest() {}

func (PullRequest) IsLabelable() {}

// A list of labels associated with the object.
func (this PullRequest) GetLabels() *LabelConnection { return this.Labels }

func (PullRequest) IsLockable() {}

// Reason that the conversation was locked.
func (this PullRequest) GetActiveLockReason() *LockReason { return this.ActiveLockReason }

// `true` if the object is locked
func (this PullRequest) GetLocked() bool { return this.Locked }

func (PullRequest) IsMilestoneItem() {}

func (PullRequest) IsNode() {}

// ID of the object.

func (PullRequest) IsNotificationsSubject() {}

func (PullRequest) IsProjectCardItem() {}

func (PullRequest) IsProjectV2ItemContent() {}

func (PullRequest) IsProjectV2Owner() {}

// Find a project by number.
func (this PullRequest) GetProjectV2() *ProjectV2 { return this.ProjectV2 }

// A list of projects under the owner.
func (this PullRequest) GetProjectsV2() ProjectV2Connection { return this.ProjectsV2 }

func (PullRequest) IsReactable() {}

// Identifies the primary key from the database.
func (this PullRequest) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this PullRequest) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this PullRequest) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this PullRequest) GetViewerCanReact() bool { return this.ViewerCanReact }

func (PullRequest) IsReferencedSubject() {}

func (PullRequest) IsRenamedTitleSubject() {}

func (PullRequest) IsRepositoryNode() {}

// The repository associated with this node.
func (this PullRequest) GetRepository() Repository { return this.Repository }

func (PullRequest) IsSearchResultItem() {}

func (PullRequest) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this PullRequest) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this PullRequest) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (PullRequest) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this PullRequest) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this PullRequest) GetURL() string { return this.URL }

func (PullRequest) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this PullRequest) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (PullRequest) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this PullRequest) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A file changed in a pull request.
type PullRequestChangedFile struct {
	// The number of additions to the file.
	Additions int64 `json:"additions"`
	// How the file was changed in this PullRequest
	ChangeType PatchStatus `json:"changeType"`
	// The number of deletions to the file.
	Deletions int64 `json:"deletions"`
	// The path of the file.
	Path string `json:"path"`
	// The state of the file for the viewer.
	ViewerViewedState FileViewedState `json:"viewerViewedState"`
}

// The connection type for PullRequestChangedFile.
type PullRequestChangedFileConnection struct {
	// A list of edges.
	Edges []*PullRequestChangedFileEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequestChangedFile `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PullRequestChangedFileEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequestChangedFile `json:"node,omitempty"`
}

// Represents a Git commit part of a pull request.
type PullRequestCommit struct {
	// The Git commit object
	Commit Commit `json:"commit"`
	ID     string `json:"id"`
	// The pull request this commit belongs to
	PullRequest PullRequest `json:"pullRequest"`
	// The HTTP path for this pull request commit
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this pull request commit
	URL string `json:"url"`
}

func (PullRequestCommit) IsNode() {}

// ID of the object.
func (this PullRequestCommit) GetID() string { return this.ID }

func (PullRequestCommit) IsPullRequestTimelineItems() {}

func (PullRequestCommit) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this PullRequestCommit) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this PullRequestCommit) GetURL() string { return this.URL }

// Represents a commit comment thread part of a pull request.
type PullRequestCommitCommentThread struct {
	// The comments that exist in this thread.
	Comments CommitCommentConnection `json:"comments"`
	// The commit the comments were made on.
	Commit Commit `json:"commit"`
	ID     string `json:"id"`
	// The file the comments were made on.
	Path *string `json:"path,omitempty"`
	// The position in the diff for the commit that the comment was made on.
	Position *int64 `json:"position,omitempty"`
	// The pull request this commit comment thread belongs to
	PullRequest PullRequest `json:"pullRequest"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
}

func (PullRequestCommitCommentThread) IsNode() {}

// ID of the object.
func (this PullRequestCommitCommentThread) GetID() string { return this.ID }

func (PullRequestCommitCommentThread) IsPullRequestTimelineItems() {}

func (PullRequestCommitCommentThread) IsRepositoryNode() {}

// The repository associated with this node.
func (this PullRequestCommitCommentThread) GetRepository() Repository { return this.Repository }

// The connection type for PullRequestCommit.
type PullRequestCommitConnection struct {
	// A list of edges.
	Edges []*PullRequestCommitEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequestCommit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PullRequestCommitEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequestCommit `json:"node,omitempty"`
}

// The connection type for PullRequest.
type PullRequestConnection struct {
	// A list of edges.
	Edges []*PullRequestEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequest `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// This aggregates pull requests opened by a user within one repository.
type PullRequestContributionsByRepository struct {
	// The pull request contributions.
	Contributions CreatedPullRequestContributionConnection `json:"contributions"`
	// The repository in which the pull requests were opened.
	Repository Repository `json:"repository"`
}

// An edge in a connection.
type PullRequestEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequest `json:"node,omitempty"`
}

// Ways in which lists of issues can be ordered upon return.
type PullRequestOrder struct {
	// The field in which to order pull requests by.
	Field PullRequestOrderField `json:"field"`
	// The direction in which to order pull requests by the specified field.
	Direction OrderDirection `json:"direction"`
}

// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParameters struct {
	// New, reviewable commits pushed will dismiss previous pull request review approvals.
	DismissStaleReviewsOnPush bool `json:"dismissStaleReviewsOnPush"`
	// Require an approving review in pull requests that modify files that have a designated code owner.
	RequireCodeOwnerReview bool `json:"requireCodeOwnerReview"`
	// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval bool `json:"requireLastPushApproval"`
	// The number of approving reviews that are required before a pull request can be merged.
	RequiredApprovingReviewCount int64 `json:"requiredApprovingReviewCount"`
	// All conversations on code must be resolved before a pull request can be merged.
	RequiredReviewThreadResolution bool `json:"requiredReviewThreadResolution"`
}

func (PullRequestParameters) IsRuleParameters() {}

// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParametersInput struct {
	// New, reviewable commits pushed will dismiss previous pull request review approvals.
	DismissStaleReviewsOnPush bool `json:"dismissStaleReviewsOnPush"`
	// Require an approving review in pull requests that modify files that have a designated code owner.
	RequireCodeOwnerReview bool `json:"requireCodeOwnerReview"`
	// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval bool `json:"requireLastPushApproval"`
	// The number of approving reviews that are required before a pull request can be merged.
	RequiredApprovingReviewCount int64 `json:"requiredApprovingReviewCount"`
	// All conversations on code must be resolved before a pull request can be merged.
	RequiredReviewThreadResolution bool `json:"requiredReviewThreadResolution"`
}

// A review object for a given pull request.
type PullRequestReview struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// Indicates whether the author of this review has push access to the repository.
	AuthorCanPushToRepository bool `json:"authorCanPushToRepository"`
	// Identifies the pull request review body.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body of this review rendered as plain text.
	BodyText string `json:"bodyText"`
	// A list of review comments for the current pull request review.
	Comments PullRequestReviewCommentConnection `json:"comments"`
	// Identifies the commit associated with this pull request review.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// A list of teams that this review was made on behalf of.
	OnBehalfOf TeamConnection `json:"onBehalfOf"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// Identifies the pull request associated with this pull request review.
	PullRequest PullRequest `json:"pullRequest"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path permalink for this PullRequestReview.
	ResourcePath string `json:"resourcePath"`
	// Identifies the current state of the pull request review.
	State PullRequestReviewState `json:"state"`
	// Identifies when the Pull Request Review was submitted
	SubmittedAt *string `json:"submittedAt,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL permalink for this PullRequestReview.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (PullRequestReview) IsComment() {}

// The actor who authored the comment.
func (this PullRequestReview) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this PullRequestReview) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this PullRequestReview) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this PullRequestReview) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this PullRequestReview) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this PullRequestReview) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this PullRequestReview) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this PullRequestReview) GetEditor() Actor { return this.Editor }
func (this PullRequestReview) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this PullRequestReview) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this PullRequestReview) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this PullRequestReview) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this PullRequestReview) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this PullRequestReview) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this PullRequestReview) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (PullRequestReview) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this PullRequestReview) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (PullRequestReview) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this PullRequestReview) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this PullRequestReview) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this PullRequestReview) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (PullRequestReview) IsNode() {}

// ID of the object.

func (PullRequestReview) IsPullRequestTimelineItem() {}

func (PullRequestReview) IsPullRequestTimelineItems() {}

func (PullRequestReview) IsReactable() {}

// Identifies the primary key from the database.
func (this PullRequestReview) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this PullRequestReview) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this PullRequestReview) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this PullRequestReview) GetViewerCanReact() bool { return this.ViewerCanReact }

func (PullRequestReview) IsRepositoryNode() {}

// The repository associated with this node.
func (this PullRequestReview) GetRepository() Repository { return this.Repository }

func (PullRequestReview) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this PullRequestReview) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (PullRequestReview) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this PullRequestReview) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A review comment associated with a given repository pull request.
type PullRequestReviewComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The comment body of this review comment.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The comment body of this review comment rendered as plain text.
	BodyText string `json:"bodyText"`
	// Identifies the commit associated with the comment.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies when the comment was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The diff hunk to which the comment applies.
	DiffHunk string `json:"diffHunk"`
	// Identifies when the comment was created in a draft state.
	DraftedAt string `json:"draftedAt"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// The end line number on the file to which the comment applies
	Line *int64 `json:"line,omitempty"`
	// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason *string `json:"minimizedReason,omitempty"`
	// Identifies the original commit associated with the comment.
	OriginalCommit *Commit `json:"originalCommit,omitempty"`
	// The end line number on the file to which the comment applied when it was first created
	OriginalLine *int64 `json:"originalLine,omitempty"`
	// The original line index in the diff to which the comment applies.
	OriginalPosition int64 `json:"originalPosition"`
	// The start line number on the file to which the comment applied when it was first created
	OriginalStartLine *int64 `json:"originalStartLine,omitempty"`
	// Identifies when the comment body is outdated
	Outdated bool `json:"outdated"`
	// The path to which the comment applies.
	Path string `json:"path"`
	// The line index in the diff to which the comment applies.
	Position *int64 `json:"position,omitempty"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// The pull request associated with this review comment.
	PullRequest PullRequest `json:"pullRequest"`
	// The pull request review associated with this review comment.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The comment this is a reply to.
	ReplyTo *PullRequestReviewComment `json:"replyTo,omitempty"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
	// The HTTP path permalink for this review comment.
	ResourcePath string `json:"resourcePath"`
	// The start line number on the file to which the comment applies
	StartLine *int64 `json:"startLine,omitempty"`
	// Identifies the state of the comment.
	State PullRequestReviewCommentState `json:"state"`
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType"`
	// Identifies when the comment was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL permalink for this review comment.
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (PullRequestReviewComment) IsComment() {}

// The actor who authored the comment.
func (this PullRequestReviewComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this PullRequestReviewComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this PullRequestReviewComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this PullRequestReviewComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this PullRequestReviewComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this PullRequestReviewComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this PullRequestReviewComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this PullRequestReviewComment) GetEditor() Actor { return this.Editor }
func (this PullRequestReviewComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this PullRequestReviewComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this PullRequestReviewComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this PullRequestReviewComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this PullRequestReviewComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this PullRequestReviewComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this PullRequestReviewComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (PullRequestReviewComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this PullRequestReviewComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (PullRequestReviewComment) IsMinimizable() {}

// Returns whether or not a comment has been minimized.
func (this PullRequestReviewComment) GetIsMinimized() bool { return this.IsMinimized }

// Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
func (this PullRequestReviewComment) GetMinimizedReason() *string { return this.MinimizedReason }

// Check if the current viewer can minimize this object.
func (this PullRequestReviewComment) GetViewerCanMinimize() bool { return this.ViewerCanMinimize }

func (PullRequestReviewComment) IsNode() {}

// ID of the object.

func (PullRequestReviewComment) IsPullRequestTimelineItem() {}

func (PullRequestReviewComment) IsReactable() {}

// Identifies the primary key from the database.
func (this PullRequestReviewComment) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this PullRequestReviewComment) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this PullRequestReviewComment) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this PullRequestReviewComment) GetViewerCanReact() bool { return this.ViewerCanReact }

func (PullRequestReviewComment) IsRepositoryNode() {}

// The repository associated with this node.
func (this PullRequestReviewComment) GetRepository() Repository { return this.Repository }

func (PullRequestReviewComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this PullRequestReviewComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (PullRequestReviewComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this PullRequestReviewComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The connection type for PullRequestReviewComment.
type PullRequestReviewCommentConnection struct {
	// A list of edges.
	Edges []*PullRequestReviewCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequestReviewComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PullRequestReviewCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequestReviewComment `json:"node,omitempty"`
}

// The connection type for PullRequestReview.
type PullRequestReviewConnection struct {
	// A list of edges.
	Edges []*PullRequestReviewEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequestReview `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// This aggregates pull request reviews made by a user within one repository.
type PullRequestReviewContributionsByRepository struct {
	// The pull request review contributions.
	Contributions CreatedPullRequestReviewContributionConnection `json:"contributions"`
	// The repository in which the pull request reviews were made.
	Repository Repository `json:"repository"`
}

// An edge in a connection.
type PullRequestReviewEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequestReview `json:"node,omitempty"`
}

// A threaded list of comments for a given pull request.
type PullRequestReviewThread struct {
	// A list of pull request comments associated with the thread.
	Comments PullRequestReviewCommentConnection `json:"comments"`
	// The side of the diff on which this thread was placed.
	DiffSide DiffSide `json:"diffSide"`
	ID       string   `json:"id"`
	// Whether or not the thread has been collapsed (resolved)
	IsCollapsed bool `json:"isCollapsed"`
	// Indicates whether this thread was outdated by newer changes.
	IsOutdated bool `json:"isOutdated"`
	// Whether this thread has been resolved
	IsResolved bool `json:"isResolved"`
	// The line in the file to which this thread refers
	Line *int64 `json:"line,omitempty"`
	// The original line in the file to which this thread refers.
	OriginalLine *int64 `json:"originalLine,omitempty"`
	// The original start line in the file to which this thread refers (multi-line only).
	OriginalStartLine *int64 `json:"originalStartLine,omitempty"`
	// Identifies the file path of this thread.
	Path string `json:"path"`
	// Identifies the pull request associated with this thread.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the repository associated with this thread.
	Repository Repository `json:"repository"`
	// The user who resolved this thread
	ResolvedBy *User `json:"resolvedBy,omitempty"`
	// The side of the diff that the first line of the thread starts on (multi-line only)
	StartDiffSide *DiffSide `json:"startDiffSide,omitempty"`
	// The start line in the file to which this thread refers (multi-line only)
	StartLine *int64 `json:"startLine,omitempty"`
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType"`
	// Indicates whether the current viewer can reply to this thread.
	ViewerCanReply bool `json:"viewerCanReply"`
	// Whether or not the viewer can resolve this thread
	ViewerCanResolve bool `json:"viewerCanResolve"`
	// Whether or not the viewer can unresolve this thread
	ViewerCanUnresolve bool `json:"viewerCanUnresolve"`
}

func (PullRequestReviewThread) IsNode() {}

// ID of the object.
func (this PullRequestReviewThread) GetID() string { return this.ID }

func (PullRequestReviewThread) IsPullRequestTimelineItem() {}

func (PullRequestReviewThread) IsPullRequestTimelineItems() {}

// Review comment threads for a pull request review.
type PullRequestReviewThreadConnection struct {
	// A list of edges.
	Edges []*PullRequestReviewThreadEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PullRequestReviewThread `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PullRequestReviewThreadEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PullRequestReviewThread `json:"node,omitempty"`
}

// Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
type PullRequestRevisionMarker struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The last commit the viewer has seen.
	LastSeenCommit Commit `json:"lastSeenCommit"`
	// The pull request to which the marker belongs.
	PullRequest PullRequest `json:"pullRequest"`
}

func (PullRequestRevisionMarker) IsPullRequestTimelineItems() {}

// A repository pull request template.
type PullRequestTemplate struct {
	// The body of the template
	Body *string `json:"body,omitempty"`
	// The filename of the template
	Filename *string `json:"filename,omitempty"`
	// The repository the template belongs to
	Repository Repository `json:"repository"`
}

// A threaded list of comments for a given pull request.
type PullRequestThread struct {
	// A list of pull request comments associated with the thread.
	Comments PullRequestReviewCommentConnection `json:"comments"`
	// The side of the diff on which this thread was placed.
	DiffSide DiffSide `json:"diffSide"`
	ID       string   `json:"id"`
	// Whether or not the thread has been collapsed (resolved)
	IsCollapsed bool `json:"isCollapsed"`
	// Indicates whether this thread was outdated by newer changes.
	IsOutdated bool `json:"isOutdated"`
	// Whether this thread has been resolved
	IsResolved bool `json:"isResolved"`
	// The line in the file to which this thread refers
	Line *int64 `json:"line,omitempty"`
	// Identifies the file path of this thread.
	Path string `json:"path"`
	// Identifies the pull request associated with this thread.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the repository associated with this thread.
	Repository Repository `json:"repository"`
	// The user who resolved this thread
	ResolvedBy *User `json:"resolvedBy,omitempty"`
	// The side of the diff that the first line of the thread starts on (multi-line only)
	StartDiffSide *DiffSide `json:"startDiffSide,omitempty"`
	// The line of the first file diff in the thread.
	StartLine *int64 `json:"startLine,omitempty"`
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType"`
	// Indicates whether the current viewer can reply to this thread.
	ViewerCanReply bool `json:"viewerCanReply"`
	// Whether or not the viewer can resolve this thread
	ViewerCanResolve bool `json:"viewerCanResolve"`
	// Whether or not the viewer can unresolve this thread
	ViewerCanUnresolve bool `json:"viewerCanUnresolve"`
}

func (PullRequestThread) IsNode() {}

// ID of the object.
func (this PullRequestThread) GetID() string { return this.ID }

// The connection type for PullRequestTimelineItem.
type PullRequestTimelineConnection struct {
	// A list of edges.
	Edges []*PullRequestTimelineItemEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []PullRequestTimelineItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PullRequestTimelineItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node PullRequestTimelineItem `json:"node,omitempty"`
}

// The connection type for PullRequestTimelineItems.
type PullRequestTimelineItemsConnection struct {
	// A list of edges.
	Edges []*PullRequestTimelineItemsEdge `json:"edges,omitempty"`
	// Identifies the count of items after applying `before` and `after` filters.
	FilteredCount int64 `json:"filteredCount"`
	// A list of nodes.
	Nodes []PullRequestTimelineItems `json:"nodes,omitempty"`
	// Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
	PageCount int64 `json:"pageCount"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// Identifies the date and time when the timeline was last updated.
	UpdatedAt string `json:"updatedAt"`
}

// An edge in a connection.
type PullRequestTimelineItemsEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node PullRequestTimelineItems `json:"node,omitempty"`
}

// A Git push.
type Push struct {
	ID string `json:"id"`
	// The SHA after the push
	NextSha *string `json:"nextSha,omitempty"`
	// The permalink for this push.
	Permalink string `json:"permalink"`
	// The SHA before the push
	PreviousSha *string `json:"previousSha,omitempty"`
	// The actor who pushed
	Pusher Actor `json:"pusher"`
	// The repository that was pushed to
	Repository Repository `json:"repository"`
}

func (Push) IsNode() {}

// ID of the object.
func (this Push) GetID() string { return this.ID }

// A team, user, or app who has the ability to push to a protected branch.
type PushAllowance struct {
	// The actor that can push.
	Actor PushAllowanceActor `json:"actor,omitempty"`
	// Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	ID                   string                `json:"id"`
}

func (PushAllowance) IsNode() {}

// ID of the object.
func (this PushAllowance) GetID() string { return this.ID }

// The connection type for PushAllowance.
type PushAllowanceConnection struct {
	// A list of edges.
	Edges []*PushAllowanceEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*PushAllowance `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type PushAllowanceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *PushAllowance `json:"node,omitempty"`
}

// Represents the client's rate limit.
type RateLimit struct {
	// The point cost for the current query counting against the rate limit.
	Cost int64 `json:"cost"`
	// The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int64 `json:"limit"`
	// The maximum number of nodes this query may return
	NodeCount int64 `json:"nodeCount"`
	// The number of points remaining in the current rate limit window.
	Remaining int64 `json:"remaining"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt string `json:"resetAt"`
	// The number of points used in the current rate limit window.
	Used int64 `json:"used"`
}

// The connection type for User.
type ReactingUserConnection struct {
	// A list of edges.
	Edges []*ReactingUserEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user that's made a reaction.
type ReactingUserEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	Node   User   `json:"node"`
	// The moment when the user made the reaction.
	ReactedAt string `json:"reactedAt"`
}

// An emoji reaction to a particular piece of content.
type Reaction struct {
	// Identifies the emoji reaction.
	Content ReactionContent `json:"content"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The reactable piece of content
	Reactable Reactable `json:"reactable"`
	// Identifies the user who created this reaction.
	User *User `json:"user,omitempty"`
}

func (Reaction) IsNode() {}

// ID of the object.
func (this Reaction) GetID() string { return this.ID }

// A list of reactions that have been left on the subject.
type ReactionConnection struct {
	// A list of edges.
	Edges []*ReactionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Reaction `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// Whether or not the authenticated user has left a reaction on the subject.
	ViewerHasReacted bool `json:"viewerHasReacted"`
}

// An edge in a connection.
type ReactionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Reaction `json:"node,omitempty"`
}

// A group of emoji reactions to a particular piece of content.
type ReactionGroup struct {
	// Identifies the emoji reaction.
	Content ReactionContent `json:"content"`
	// Identifies when the reaction was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// Reactors to the reaction subject with the emotion represented by this reaction group.
	Reactors ReactorConnection `json:"reactors"`
	// The subject that was reacted to.
	Subject Reactable `json:"subject"`
	// Users who have reacted to the reaction subject with the emotion represented by this reaction group
	Users ReactingUserConnection `json:"users"`
	// Whether or not the authenticated user has left a reaction on the subject.
	ViewerHasReacted bool `json:"viewerHasReacted"`
}

// Ways in which lists of reactions can be ordered upon return.
type ReactionOrder struct {
	// The field in which to order reactions by.
	Field ReactionOrderField `json:"field"`
	// The direction in which to order reactions by the specified field.
	Direction OrderDirection `json:"direction"`
}

// The connection type for Reactor.
type ReactorConnection struct {
	// A list of edges.
	Edges []*ReactorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []Reactor `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents an author of a reaction.
type ReactorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The author of the reaction.
	Node Reactor `json:"node"`
	// The moment when the user made the reaction.
	ReactedAt string `json:"reactedAt"`
}

// Represents a 'ready_for_review' event on a given pull request.
type ReadyForReviewEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// The HTTP path for this ready for review event.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this ready for review event.
	URL string `json:"url"`
}

func (ReadyForReviewEvent) IsNode() {}

// ID of the object.
func (this ReadyForReviewEvent) GetID() string { return this.ID }

func (ReadyForReviewEvent) IsPullRequestTimelineItems() {}

func (ReadyForReviewEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this ReadyForReviewEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this ReadyForReviewEvent) GetURL() string { return this.URL }

// Represents a Git reference.
type Ref struct {
	// A list of pull requests with this ref as the head ref.
	AssociatedPullRequests PullRequestConnection `json:"associatedPullRequests"`
	// Branch protection rules for this ref
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	// Compares the current ref as a base ref to another head ref, if the comparison can be made.
	Compare *Comparison `json:"compare,omitempty"`
	ID      string      `json:"id"`
	// The ref name.
	Name string `json:"name"`
	// The ref's prefix, such as `refs/heads/` or `refs/tags/`.
	Prefix string `json:"prefix"`
	// Branch protection rules that are viewable by non-admins
	RefUpdateRule *RefUpdateRule `json:"refUpdateRule,omitempty"`
	// The repository the ref belongs to.
	Repository Repository `json:"repository"`
	// The object the ref points to. Returns null when object does not exist.
	Target GitObject `json:"target,omitempty"`
}

func (Ref) IsNode() {}

// ID of the object.
func (this Ref) GetID() string { return this.ID }

// The connection type for Ref.
type RefConnection struct {
	// A list of edges.
	Edges []*RefEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Ref `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RefEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Ref `json:"node,omitempty"`
}

// Parameters to be used for the ref_name condition
type RefNameConditionTarget struct {
	// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude"`
	// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Include []string `json:"include"`
}

// Parameters to be used for the ref_name condition
type RefNameConditionTargetInput struct {
	// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude"`
	// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Include []string `json:"include"`
}

// Ways in which lists of git refs can be ordered upon return.
type RefOrder struct {
	// The field in which to order refs by.
	Field RefOrderField `json:"field"`
	// The direction in which to order refs by the specified field.
	Direction OrderDirection `json:"direction"`
}

// A ref update rules for a viewer.
type RefUpdateRule struct {
	// Can this branch be deleted.
	AllowsDeletions bool `json:"allowsDeletions"`
	// Are force pushes allowed on this branch.
	AllowsForcePushes bool `json:"allowsForcePushes"`
	// Can matching branches be created.
	BlocksCreations bool `json:"blocksCreations"`
	// Identifies the protection rule pattern.
	Pattern string `json:"pattern"`
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts,omitempty"`
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews"`
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution bool `json:"requiresConversationResolution"`
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory bool `json:"requiresLinearHistory"`
	// Are commits required to be signed.
	RequiresSignatures bool `json:"requiresSignatures"`
	// Is the viewer allowed to dismiss reviews.
	ViewerAllowedToDismissReviews bool `json:"viewerAllowedToDismissReviews"`
	// Can the viewer push to the branch
	ViewerCanPush bool `json:"viewerCanPush"`
}

// Represents a 'referenced' event on a given `ReferencedSubject`.
type ReferencedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the commit associated with the 'referenced' event.
	Commit *Commit `json:"commit,omitempty"`
	// Identifies the repository associated with the 'referenced' event.
	CommitRepository Repository `json:"commitRepository"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository"`
	// Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
	IsDirectReference bool `json:"isDirectReference"`
	// Object referenced by event.
	Subject ReferencedSubject `json:"subject"`
}

func (ReferencedEvent) IsIssueTimelineItem() {}

func (ReferencedEvent) IsIssueTimelineItems() {}

func (ReferencedEvent) IsNode() {}

// ID of the object.
func (this ReferencedEvent) GetID() string { return this.ID }

func (ReferencedEvent) IsPullRequestTimelineItem() {}

func (ReferencedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
type RegenerateEnterpriseIdentityProviderRecoveryCodesInput struct {
	// The ID of the enterprise on which to set an identity provider.
	EnterpriseID string `json:"enterpriseId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The identity provider for the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

// Autogenerated input type of RegenerateVerifiableDomainToken
type RegenerateVerifiableDomainTokenInput struct {
	// The ID of the verifiable domain to regenerate the verification token of.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RegenerateVerifiableDomainToken
type RegenerateVerifiableDomainTokenPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The verification token that was generated.
	VerificationToken *string `json:"verificationToken,omitempty"`
}

// Autogenerated input type of RejectDeployments
type RejectDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments.
	WorkflowRunID string `json:"workflowRunId"`
	// The ids of environments to reject deployments
	EnvironmentIds []string `json:"environmentIds"`
	// Optional comment for rejecting deployments
	Comment *string `json:"comment,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RejectDeployments
type RejectDeploymentsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The affected deployments.
	Deployments []*Deployment `json:"deployments,omitempty"`
}

// A release contains the content for a release.
type Release struct {
	// The author of the release
	Author *User `json:"author,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The description of the release.
	Description *string `json:"description,omitempty"`
	// The description of this release rendered to HTML.
	DescriptionHTML *string `json:"descriptionHTML,omitempty"`
	ID              string  `json:"id"`
	// Whether or not the release is a draft
	IsDraft bool `json:"isDraft"`
	// Whether or not the release is the latest releast
	IsLatest bool `json:"isLatest"`
	// Whether or not the release is a prerelease
	IsPrerelease bool `json:"isPrerelease"`
	// A list of users mentioned in the release description
	Mentions *UserConnection `json:"mentions,omitempty"`
	// The title of the release.
	Name *string `json:"name,omitempty"`
	// Identifies the date and time when the release was created.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// List of releases assets which are dependent on this release.
	ReleaseAssets ReleaseAssetConnection `json:"releaseAssets"`
	// The repository that the release belongs to.
	Repository Repository `json:"repository"`
	// The HTTP path for this issue
	ResourcePath string `json:"resourcePath"`
	// A description of the release, rendered to HTML without any links in it.
	ShortDescriptionHTML *string `json:"shortDescriptionHTML,omitempty"`
	// The Git tag the release points to
	Tag *Ref `json:"tag,omitempty"`
	// The tag commit for this release.
	TagCommit *Commit `json:"tagCommit,omitempty"`
	// The name of the release's Git tag
	TagName string `json:"tagName"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this issue
	URL string `json:"url"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
}

func (Release) IsNode() {}

// ID of the object.
func (this Release) GetID() string { return this.ID }

func (Release) IsNotificationsSubject() {}

func (Release) IsReactable() {}

// Identifies the primary key from the database.
func (this Release) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this Release) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this Release) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this Release) GetViewerCanReact() bool { return this.ViewerCanReact }

func (Release) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Release) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Release) GetURL() string { return this.URL }

// A release asset contains the content for a release asset.
type ReleaseAsset struct {
	// The asset's content-type
	ContentType string `json:"contentType"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The number of times this asset was downloaded
	DownloadCount int64 `json:"downloadCount"`
	// Identifies the URL where you can download the release asset via the browser.
	DownloadURL string `json:"downloadUrl"`
	ID          string `json:"id"`
	// Identifies the title of the release asset.
	Name string `json:"name"`
	// Release that the asset is associated with
	Release *Release `json:"release,omitempty"`
	// The size (in bytes) of the asset
	Size int64 `json:"size"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The user that performed the upload
	UploadedBy User `json:"uploadedBy"`
	// Identifies the URL of the release asset.
	URL string `json:"url"`
}

func (ReleaseAsset) IsNode() {}

// ID of the object.
func (this ReleaseAsset) GetID() string { return this.ID }

// The connection type for ReleaseAsset.
type ReleaseAssetConnection struct {
	// A list of edges.
	Edges []*ReleaseAssetEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ReleaseAsset `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ReleaseAssetEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ReleaseAsset `json:"node,omitempty"`
}

// The connection type for Release.
type ReleaseConnection struct {
	// A list of edges.
	Edges []*ReleaseEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Release `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ReleaseEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Release `json:"node,omitempty"`
}

// Ways in which lists of releases can be ordered upon return.
type ReleaseOrder struct {
	// The field in which to order releases by.
	Field ReleaseOrderField `json:"field"`
	// The direction in which to order releases by the specified field.
	Direction OrderDirection `json:"direction"`
}

// Autogenerated input type of RemoveAssigneesFromAssignable
type RemoveAssigneesFromAssignableInput struct {
	// The id of the assignable object to remove assignees from.
	AssignableID string `json:"assignableId"`
	// The id of users to remove as assignees.
	AssigneeIds []string `json:"assigneeIds"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveAssigneesFromAssignable
type RemoveAssigneesFromAssignablePayload struct {
	// The item that was unassigned.
	Assignable Assignable `json:"assignable,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of RemoveEnterpriseAdmin
type RemoveEnterpriseAdminInput struct {
	// The Enterprise ID from which to remove the administrator.
	EnterpriseID string `json:"enterpriseId"`
	// The login of the user to remove as an administrator.
	Login string `json:"login"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveEnterpriseAdmin
type RemoveEnterpriseAdminPayload struct {
	// The user who was removed as an administrator.
	Admin *User `json:"admin,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of removing an administrator.
	Message *string `json:"message,omitempty"`
	// The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of RemoveEnterpriseIdentityProvider
type RemoveEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise from which to remove the identity provider.
	EnterpriseID string `json:"enterpriseId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveEnterpriseIdentityProvider
type RemoveEnterpriseIdentityProviderPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The identity provider that was removed from the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

// Autogenerated input type of RemoveEnterpriseMember
type RemoveEnterpriseMemberInput struct {
	// The ID of the enterprise from which the user should be removed.
	EnterpriseID string `json:"enterpriseId"`
	// The ID of the user to remove from the enterprise.
	UserID string `json:"userId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveEnterpriseMember
type RemoveEnterpriseMemberPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// The user that was removed from the enterprise.
	User *User `json:"user,omitempty"`
	// The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of RemoveEnterpriseOrganization
type RemoveEnterpriseOrganizationInput struct {
	// The ID of the enterprise from which the organization should be removed.
	EnterpriseID string `json:"enterpriseId"`
	// The ID of the organization to remove from the enterprise.
	OrganizationID string `json:"organizationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveEnterpriseOrganization
type RemoveEnterpriseOrganizationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// The organization that was removed from the enterprise.
	Organization *Organization `json:"organization,omitempty"`
	// The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

// Autogenerated input type of RemoveEnterpriseSupportEntitlement
type RemoveEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID string `json:"enterpriseId"`
	// The login of a member who will lose the support entitlement.
	Login string `json:"login"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveEnterpriseSupportEntitlement
type RemoveEnterpriseSupportEntitlementPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of removing the support entitlement.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of RemoveLabelsFromLabelable
type RemoveLabelsFromLabelableInput struct {
	// The id of the Labelable to remove labels from.
	LabelableID string `json:"labelableId"`
	// The ids of labels to remove.
	LabelIds []string `json:"labelIds"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveLabelsFromLabelable
type RemoveLabelsFromLabelablePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The Labelable the labels were removed from.
	Labelable Labelable `json:"labelable,omitempty"`
}

// Autogenerated input type of RemoveOutsideCollaborator
type RemoveOutsideCollaboratorInput struct {
	// The ID of the outside collaborator to remove.
	UserID string `json:"userId"`
	// The ID of the organization to remove the outside collaborator from.
	OrganizationID string `json:"organizationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveOutsideCollaborator
type RemoveOutsideCollaboratorPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The user that was removed as an outside collaborator.
	RemovedUser *User `json:"removedUser,omitempty"`
}

// Autogenerated input type of RemoveReaction
type RemoveReactionInput struct {
	// The Node ID of the subject to modify.
	SubjectID string `json:"subjectId"`
	// The name of the emoji reaction to remove.
	Content ReactionContent `json:"content"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveReaction
type RemoveReactionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The reaction object.
	Reaction *Reaction `json:"reaction,omitempty"`
	// The reaction groups for the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// The reactable subject.
	Subject Reactable `json:"subject,omitempty"`
}

// Autogenerated input type of RemoveStar
type RemoveStarInput struct {
	// The Starrable ID to unstar.
	StarrableID string `json:"starrableId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveStar
type RemoveStarPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The starrable.
	Starrable Starrable `json:"starrable,omitempty"`
}

// Autogenerated input type of RemoveUpvote
type RemoveUpvoteInput struct {
	// The Node ID of the discussion or comment to remove upvote.
	SubjectID string `json:"subjectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RemoveUpvote
type RemoveUpvotePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The votable subject.
	Subject Votable `json:"subject,omitempty"`
}

// Represents a 'removed_from_merge_queue' event on a given pull request.
type RemovedFromMergeQueueEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the before commit SHA for the 'removed_from_merge_queue' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The user who removed this Pull Request from the merge queue
	Enqueuer *User  `json:"enqueuer,omitempty"`
	ID       string `json:"id"`
	// The merge queue where this pull request was removed from.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`
	// PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// The reason this pull request was removed from the queue.
	Reason *string `json:"reason,omitempty"`
}

func (RemovedFromMergeQueueEvent) IsNode() {}

// ID of the object.
func (this RemovedFromMergeQueueEvent) GetID() string { return this.ID }

func (RemovedFromMergeQueueEvent) IsPullRequestTimelineItems() {}

// Represents a 'removed_from_project' event on a given issue or pull request.
type RemovedFromProjectEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
}

func (RemovedFromProjectEvent) IsIssueTimelineItems() {}

func (RemovedFromProjectEvent) IsNode() {}

// ID of the object.
func (this RemovedFromProjectEvent) GetID() string { return this.ID }

func (RemovedFromProjectEvent) IsPullRequestTimelineItems() {}

// Represents a 'renamed' event on a given issue or pull request
type RenamedTitleEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the current title of the issue or pull request.
	CurrentTitle string `json:"currentTitle"`
	ID           string `json:"id"`
	// Identifies the previous title of the issue or pull request.
	PreviousTitle string `json:"previousTitle"`
	// Subject that was renamed.
	Subject RenamedTitleSubject `json:"subject"`
}

func (RenamedTitleEvent) IsIssueTimelineItem() {}

func (RenamedTitleEvent) IsIssueTimelineItems() {}

func (RenamedTitleEvent) IsNode() {}

// ID of the object.
func (this RenamedTitleEvent) GetID() string { return this.ID }

func (RenamedTitleEvent) IsPullRequestTimelineItem() {}

func (RenamedTitleEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of ReopenDiscussion
type ReopenDiscussionInput struct {
	// ID of the discussion to be reopened.
	DiscussionID string `json:"discussionId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ReopenDiscussion
type ReopenDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that was reopened.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of ReopenIssue
type ReopenIssueInput struct {
	// ID of the issue to be opened.
	IssueID string `json:"issueId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ReopenIssue
type ReopenIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was opened.
	Issue *Issue `json:"issue,omitempty"`
}

// Autogenerated input type of ReopenPullRequest
type ReopenPullRequestInput struct {
	// ID of the pull request to be reopened.
	PullRequestID string `json:"pullRequestId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ReopenPullRequest
type ReopenPullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that was reopened.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Represents a 'reopened' event on any `Closable`.
type ReopenedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Object that was reopened.
	Closable Closable `json:"closable"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The reason the issue state was changed to open.
	StateReason *IssueStateReason `json:"stateReason,omitempty"`
}

func (ReopenedEvent) IsIssueTimelineItem() {}

func (ReopenedEvent) IsIssueTimelineItems() {}

func (ReopenedEvent) IsNode() {}

// ID of the object.
func (this ReopenedEvent) GetID() string { return this.ID }

func (ReopenedEvent) IsPullRequestTimelineItem() {}

func (ReopenedEvent) IsPullRequestTimelineItems() {}

// Audit log entry for a repo.access event.
type RepoAccessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoAccessAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoAccessAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoAccessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoAccessAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoAccessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoAccessAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoAccessAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoAccessAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoAccessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoAccessAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoAccessAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoAccessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoAccessAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoAccessAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoAccessAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoAccessAuditEntry) IsNode() {}

// ID of the object.
func (this RepoAccessAuditEntry) GetID() string { return this.ID }

func (RepoAccessAuditEntry) IsOrganizationAuditEntry() {}

func (RepoAccessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoAccessAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoAccessAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoAccessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoAccessAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoAccessAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoAccessAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoAccessAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoAccessAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoAccessAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.add_member event.
type RepoAddMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoAddMemberAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoAddMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoAddMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoAddMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoAddMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoAddMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoAddMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoAddMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoAddMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoAddMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoAddMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoAddMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoAddMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoAddMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoAddMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoAddMemberAuditEntry) IsNode() {}

// ID of the object.
func (this RepoAddMemberAuditEntry) GetID() string { return this.ID }

func (RepoAddMemberAuditEntry) IsOrganizationAuditEntry() {}

func (RepoAddMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoAddMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoAddMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoAddMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoAddMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoAddMemberAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoAddMemberAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoAddMemberAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoAddMemberAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoAddMemberAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.add_topic event.
type RepoAddTopicAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The name of the topic added to the repository
	Topic *Topic `json:"topic,omitempty"`
	// The name of the topic added to the repository
	TopicName *string `json:"topicName,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoAddTopicAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoAddTopicAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoAddTopicAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoAddTopicAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoAddTopicAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoAddTopicAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoAddTopicAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoAddTopicAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoAddTopicAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoAddTopicAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoAddTopicAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoAddTopicAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoAddTopicAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoAddTopicAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoAddTopicAuditEntry) IsNode() {}

// ID of the object.
func (this RepoAddTopicAuditEntry) GetID() string { return this.ID }

func (RepoAddTopicAuditEntry) IsOrganizationAuditEntry() {}

func (RepoAddTopicAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoAddTopicAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoAddTopicAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoAddTopicAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoAddTopicAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoAddTopicAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoAddTopicAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoAddTopicAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoAddTopicAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoAddTopicAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

func (RepoAddTopicAuditEntry) IsTopicAuditEntryData() {}

// The name of the topic added to the repository
func (this RepoAddTopicAuditEntry) GetTopic() *Topic { return this.Topic }

// The name of the topic added to the repository
func (this RepoAddTopicAuditEntry) GetTopicName() *string { return this.TopicName }

// Audit log entry for a repo.archived event.
type RepoArchivedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoArchivedAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoArchivedAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoArchivedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoArchivedAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoArchivedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoArchivedAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoArchivedAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoArchivedAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoArchivedAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoArchivedAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoArchivedAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoArchivedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoArchivedAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoArchivedAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoArchivedAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoArchivedAuditEntry) IsNode() {}

// ID of the object.
func (this RepoArchivedAuditEntry) GetID() string { return this.ID }

func (RepoArchivedAuditEntry) IsOrganizationAuditEntry() {}

func (RepoArchivedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoArchivedAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoArchivedAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoArchivedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoArchivedAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoArchivedAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoArchivedAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoArchivedAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoArchivedAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoArchivedAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.change_merge_setting event.
type RepoChangeMergeSettingAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the change was to enable (true) or disable (false) the merge type
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// The merge method affected by the change
	MergeType *RepoChangeMergeSettingAuditEntryMergeType `json:"mergeType,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoChangeMergeSettingAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoChangeMergeSettingAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoChangeMergeSettingAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoChangeMergeSettingAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoChangeMergeSettingAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoChangeMergeSettingAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoChangeMergeSettingAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoChangeMergeSettingAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoChangeMergeSettingAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoChangeMergeSettingAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoChangeMergeSettingAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoChangeMergeSettingAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoChangeMergeSettingAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoChangeMergeSettingAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoChangeMergeSettingAuditEntry) IsNode() {}

// ID of the object.
func (this RepoChangeMergeSettingAuditEntry) GetID() string { return this.ID }

func (RepoChangeMergeSettingAuditEntry) IsOrganizationAuditEntry() {}

func (RepoChangeMergeSettingAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoChangeMergeSettingAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoChangeMergeSettingAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoChangeMergeSettingAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoChangeMergeSettingAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoChangeMergeSettingAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoChangeMergeSettingAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoChangeMergeSettingAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoChangeMergeSettingAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoChangeMergeSettingAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.config.disable_anonymous_git_access event.
type RepoConfigDisableAnonymousGitAccessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetID() string { return this.ID }

func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.disable_collaborators_only event.
type RepoConfigDisableCollaboratorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetID() string { return this.ID }

func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.disable_contributors_only event.
type RepoConfigDisableContributorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigDisableContributorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigDisableContributorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetID() string { return this.ID }

func (RepoConfigDisableContributorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigDisableContributorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigDisableContributorsOnlyAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
type RepoConfigDisableSockpuppetDisallowedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorURL() *string {
	return this.ActorURL
}

// The time the action was initiated
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetID() string { return this.ID }

func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.enable_anonymous_git_access event.
type RepoConfigEnableAnonymousGitAccessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetID() string { return this.ID }

func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.enable_collaborators_only event.
type RepoConfigEnableCollaboratorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetID() string { return this.ID }

func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.enable_contributors_only event.
type RepoConfigEnableContributorsOnlyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigEnableContributorsOnlyAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigEnableContributorsOnlyAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetID() string { return this.ID }

func (RepoConfigEnableContributorsOnlyAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigEnableContributorsOnlyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigEnableContributorsOnlyAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
type RepoConfigEnableSockpuppetDisallowedAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorURL() *string {
	return this.ActorURL
}

// The time the action was initiated
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetCreatedAt() string {
	return this.CreatedAt
}

// The corresponding operation type for the action
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetID() string { return this.ID }

func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.lock_anonymous_git_access event.
type RepoConfigLockAnonymousGitAccessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigLockAnonymousGitAccessAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigLockAnonymousGitAccessAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetID() string { return this.ID }

func (RepoConfigLockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigLockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigLockAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.config.unlock_anonymous_git_access event.
type RepoConfigUnlockAnonymousGitAccessAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor {
	return this.Actor
}

// The IP address of the actor
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserLogin() *string {
	return this.UserLogin
}

// The HTTP path for the user.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsNode() {}

// ID of the object.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetID() string { return this.ID }

func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry() {}

func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return this.Repository
}

// The name of the repository
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryName() *string {
	return this.RepositoryName
}

// The HTTP path for the repository
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryURL() *string {
	return this.RepositoryURL
}

// Audit log entry for a repo.create event.
type RepoCreateAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The name of the parent repository for this forked repository.
	ForkParentName *string `json:"forkParentName,omitempty"`
	// The name of the root repository for this network.
	ForkSourceName *string `json:"forkSourceName,omitempty"`
	ID             string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoCreateAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoCreateAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoCreateAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoCreateAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoCreateAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoCreateAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoCreateAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoCreateAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoCreateAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoCreateAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoCreateAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoCreateAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoCreateAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoCreateAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoCreateAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoCreateAuditEntry) IsNode() {}

// ID of the object.
func (this RepoCreateAuditEntry) GetID() string { return this.ID }

func (RepoCreateAuditEntry) IsOrganizationAuditEntry() {}

func (RepoCreateAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoCreateAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoCreateAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoCreateAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoCreateAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoCreateAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoCreateAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoCreateAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoCreateAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoCreateAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.destroy event.
type RepoDestroyAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoDestroyAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoDestroyAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoDestroyAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoDestroyAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoDestroyAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoDestroyAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoDestroyAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoDestroyAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoDestroyAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoDestroyAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoDestroyAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoDestroyAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoDestroyAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoDestroyAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoDestroyAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoDestroyAuditEntry) IsNode() {}

// ID of the object.
func (this RepoDestroyAuditEntry) GetID() string { return this.ID }

func (RepoDestroyAuditEntry) IsOrganizationAuditEntry() {}

func (RepoDestroyAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoDestroyAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoDestroyAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoDestroyAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoDestroyAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoDestroyAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoDestroyAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoDestroyAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoDestroyAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoDestroyAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.remove_member event.
type RepoRemoveMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
	// The visibility of the repository
	Visibility *RepoRemoveMemberAuditEntryVisibility `json:"visibility,omitempty"`
}

func (RepoRemoveMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoRemoveMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoRemoveMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoRemoveMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoRemoveMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoRemoveMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoRemoveMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoRemoveMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoRemoveMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoRemoveMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoRemoveMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoRemoveMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoRemoveMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoRemoveMemberAuditEntry) IsNode() {}

// ID of the object.
func (this RepoRemoveMemberAuditEntry) GetID() string { return this.ID }

func (RepoRemoveMemberAuditEntry) IsOrganizationAuditEntry() {}

func (RepoRemoveMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoRemoveMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoRemoveMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoRemoveMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoRemoveMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoRemoveMemberAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoRemoveMemberAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoRemoveMemberAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoRemoveMemberAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoRemoveMemberAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

// Audit log entry for a repo.remove_topic event.
type RepoRemoveTopicAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The name of the topic added to the repository
	Topic *Topic `json:"topic,omitempty"`
	// The name of the topic added to the repository
	TopicName *string `json:"topicName,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepoRemoveTopicAuditEntry) IsAuditEntry() {}

// The action name
func (this RepoRemoveTopicAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepoRemoveTopicAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepoRemoveTopicAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepoRemoveTopicAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this RepoRemoveTopicAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this RepoRemoveTopicAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this RepoRemoveTopicAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepoRemoveTopicAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepoRemoveTopicAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this RepoRemoveTopicAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepoRemoveTopicAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepoRemoveTopicAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this RepoRemoveTopicAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepoRemoveTopicAuditEntry) IsNode() {}

// ID of the object.
func (this RepoRemoveTopicAuditEntry) GetID() string { return this.ID }

func (RepoRemoveTopicAuditEntry) IsOrganizationAuditEntry() {}

func (RepoRemoveTopicAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepoRemoveTopicAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this RepoRemoveTopicAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this RepoRemoveTopicAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepoRemoveTopicAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (RepoRemoveTopicAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this RepoRemoveTopicAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this RepoRemoveTopicAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this RepoRemoveTopicAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this RepoRemoveTopicAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

func (RepoRemoveTopicAuditEntry) IsTopicAuditEntryData() {}

// The name of the topic added to the repository
func (this RepoRemoveTopicAuditEntry) GetTopic() *Topic { return this.Topic }

// The name of the topic added to the repository
func (this RepoRemoveTopicAuditEntry) GetTopicName() *string { return this.TopicName }

// A repository contains the content for a project.
type Repository struct {
	// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
	AllowUpdateBranch bool `json:"allowUpdateBranch"`
	// Identifies the date and time when the repository was archived.
	ArchivedAt *string `json:"archivedAt,omitempty"`
	// A list of users that can be assigned to issues in this repository.
	AssignableUsers UserConnection `json:"assignableUsers"`
	// Whether or not Auto-merge can be enabled on pull requests in this repository.
	AutoMergeAllowed bool `json:"autoMergeAllowed"`
	// A list of branch protection rules for this repository.
	BranchProtectionRules BranchProtectionRuleConnection `json:"branchProtectionRules"`
	// Returns the code of conduct for this repository
	CodeOfConduct *CodeOfConduct `json:"codeOfConduct,omitempty"`
	// Information extracted from the repository's `CODEOWNERS` file.
	Codeowners *RepositoryCodeowners `json:"codeowners,omitempty"`
	// A list of collaborators associated with the repository.
	Collaborators *RepositoryCollaboratorConnection `json:"collaborators,omitempty"`
	// A list of commit comments associated with the repository.
	CommitComments CommitCommentConnection `json:"commitComments"`
	// Returns a list of contact links associated to the repository
	ContactLinks []*RepositoryContactLink `json:"contactLinks,omitempty"`
	// Returns the contributing guidelines for this repository.
	ContributingGuidelines *ContributingGuidelines `json:"contributingGuidelines,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef *Ref `json:"defaultBranchRef,omitempty"`
	// Whether or not branches are automatically deleted when merged in this repository.
	DeleteBranchOnMerge bool `json:"deleteBranchOnMerge"`
	// A list of deploy keys that are on this repository.
	DeployKeys DeployKeyConnection `json:"deployKeys"`
	// Deployments associated with the repository
	Deployments DeploymentConnection `json:"deployments"`
	// The description of the repository.
	Description *string `json:"description,omitempty"`
	// The description of the repository rendered to HTML.
	DescriptionHTML string `json:"descriptionHTML"`
	// Returns a single discussion from the current repository by number.
	Discussion *Discussion `json:"discussion,omitempty"`
	// A list of discussion categories that are available in the repository.
	DiscussionCategories DiscussionCategoryConnection `json:"discussionCategories"`
	// A discussion category by slug.
	DiscussionCategory *DiscussionCategory `json:"discussionCategory,omitempty"`
	// A list of discussions that have been opened in the repository.
	Discussions DiscussionConnection `json:"discussions"`
	// The number of kilobytes this repository occupies on disk.
	DiskUsage *int64 `json:"diskUsage,omitempty"`
	// Returns a single active environment from the current repository by name.
	Environment *Environment `json:"environment,omitempty"`
	// A list of environments that are in this repository.
	Environments EnvironmentConnection `json:"environments"`
	// Returns how many forks there are of this repository in the whole network.
	ForkCount int64 `json:"forkCount"`
	// Whether this repository allows forks.
	ForkingAllowed bool `json:"forkingAllowed"`
	// A list of direct forked repositories.
	Forks RepositoryConnection `json:"forks"`
	// The funding links for this repository
	FundingLinks []*FundingLink `json:"fundingLinks"`
	// Indicates if the repository has the Discussions feature enabled.
	HasDiscussionsEnabled bool `json:"hasDiscussionsEnabled"`
	// Indicates if the repository has issues feature enabled.
	HasIssuesEnabled bool `json:"hasIssuesEnabled"`
	// Indicates if the repository has the Projects feature enabled.
	HasProjectsEnabled bool `json:"hasProjectsEnabled"`
	// Whether vulnerability alerts are enabled for the repository.
	HasVulnerabilityAlertsEnabled bool `json:"hasVulnerabilityAlertsEnabled"`
	// Indicates if the repository has wiki feature enabled.
	HasWikiEnabled bool `json:"hasWikiEnabled"`
	// The repository's URL.
	HomepageURL *string `json:"homepageUrl,omitempty"`
	ID          string  `json:"id"`
	// The interaction ability settings for this repository.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
	// Indicates if the repository is unmaintained.
	IsArchived bool `json:"isArchived"`
	// Returns true if blank issue creation is allowed
	IsBlankIssuesEnabled bool `json:"isBlankIssuesEnabled"`
	// Returns whether or not this repository disabled.
	IsDisabled bool `json:"isDisabled"`
	// Returns whether or not this repository is empty.
	IsEmpty bool `json:"isEmpty"`
	// Identifies if the repository is a fork.
	IsFork bool `json:"isFork"`
	// Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
	IsInOrganization bool `json:"isInOrganization"`
	// Indicates if the repository has been locked or not.
	IsLocked bool `json:"isLocked"`
	// Identifies if the repository is a mirror.
	IsMirror bool `json:"isMirror"`
	// Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate"`
	// Returns true if this repository has a security policy
	IsSecurityPolicyEnabled *bool `json:"isSecurityPolicyEnabled,omitempty"`
	// Identifies if the repository is a template that can be used to generate new repositories.
	IsTemplate bool `json:"isTemplate"`
	// Is this repository a user configuration repository?
	IsUserConfigurationRepository bool `json:"isUserConfigurationRepository"`
	// Returns a single issue from the current repository by number.
	Issue *Issue `json:"issue,omitempty"`
	// Returns a single issue-like object from the current repository by number.
	IssueOrPullRequest IssueOrPullRequest `json:"issueOrPullRequest,omitempty"`
	// Returns a list of issue templates associated to the repository
	IssueTemplates []*IssueTemplate `json:"issueTemplates,omitempty"`
	// A list of issues that have been opened in the repository.
	Issues IssueConnection `json:"issues"`
	// Returns a single label by name
	Label *Label `json:"label,omitempty"`
	// A list of labels associated with the repository.
	Labels *LabelConnection `json:"labels,omitempty"`
	// A list containing a breakdown of the language composition of the repository.
	Languages *LanguageConnection `json:"languages,omitempty"`
	// Get the latest release for the repository if one exists.
	LatestRelease *Release `json:"latestRelease,omitempty"`
	// The license associated with the repository
	LicenseInfo *License `json:"licenseInfo,omitempty"`
	// The reason the repository has been locked.
	LockReason *RepositoryLockReason `json:"lockReason,omitempty"`
	// A list of Users that can be mentioned in the context of the repository.
	MentionableUsers UserConnection `json:"mentionableUsers"`
	// Whether or not PRs are merged with a merge commit on this repository.
	MergeCommitAllowed bool `json:"mergeCommitAllowed"`
	// How the default commit message will be generated when merging a pull request.
	MergeCommitMessage MergeCommitMessage `json:"mergeCommitMessage"`
	// How the default commit title will be generated when merging a pull request.
	MergeCommitTitle MergeCommitTitle `json:"mergeCommitTitle"`
	// The merge queue for a specified branch, otherwise the default branch if not provided.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`
	// Returns a single milestone from the current repository by number.
	Milestone *Milestone `json:"milestone,omitempty"`
	// A list of milestones associated with the repository.
	Milestones *MilestoneConnection `json:"milestones,omitempty"`
	// The repository's original mirror URL.
	MirrorURL *string `json:"mirrorUrl,omitempty"`
	// The name of the repository.
	Name string `json:"name"`
	// The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner"`
	// A Git object in the repository
	Object GitObject `json:"object,omitempty"`
	// The image used to represent this repository in Open Graph data.
	OpenGraphImageURL string `json:"openGraphImageUrl"`
	// The User owner of the repository.
	Owner RepositoryOwner `json:"owner"`
	// A list of packages under the owner.
	Packages PackageConnection `json:"packages"`
	// The repository parent, if this is a fork.
	Parent *Repository `json:"parent,omitempty"`
	// A list of discussions that have been pinned in this repository.
	PinnedDiscussions PinnedDiscussionConnection `json:"pinnedDiscussions"`
	// A list of pinned issues for this repository.
	PinnedIssues *PinnedIssueConnection `json:"pinnedIssues,omitempty"`
	// The primary language of the repository's code.
	PrimaryLanguage *Language `json:"primaryLanguage,omitempty"`
	// Find project by number.
	Project *Project `json:"project,omitempty"`
	// Finds and returns the Project according to the provided Project number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// A list of projects under the owner.
	Projects ProjectConnection `json:"projects"`
	// The HTTP path listing the repository's projects
	ProjectsResourcePath string `json:"projectsResourcePath"`
	// The HTTP URL listing the repository's projects
	ProjectsURL string `json:"projectsUrl"`
	// List of projects linked to this repository.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// Returns a single pull request from the current repository by number.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// Returns a list of pull request templates associated to the repository
	PullRequestTemplates []*PullRequestTemplate `json:"pullRequestTemplates,omitempty"`
	// A list of pull requests that have been opened in the repository.
	PullRequests PullRequestConnection `json:"pullRequests"`
	// Identifies the date and time when the repository was last pushed to.
	PushedAt *string `json:"pushedAt,omitempty"`
	// Whether or not rebase-merging is enabled on this repository.
	RebaseMergeAllowed bool `json:"rebaseMergeAllowed"`
	// Recent projects that this user has modified in the context of the owner.
	RecentProjects ProjectV2Connection `json:"recentProjects"`
	// Fetch a given ref from the repository
	Ref *Ref `json:"ref,omitempty"`
	// Fetch a list of refs from the repository
	Refs *RefConnection `json:"refs,omitempty"`
	// Lookup a single release given various criteria.
	Release *Release `json:"release,omitempty"`
	// List of releases which are dependent on this repository.
	Releases ReleaseConnection `json:"releases"`
	// A list of applied repository-topic associations for this repository.
	RepositoryTopics RepositoryTopicConnection `json:"repositoryTopics"`
	// The HTTP path for this repository
	ResourcePath string `json:"resourcePath"`
	// Returns a single ruleset from the current repository by ID.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
	// A list of rulesets for this repository.
	Rulesets *RepositoryRulesetConnection `json:"rulesets,omitempty"`
	// The security policy URL.
	SecurityPolicyURL *string `json:"securityPolicyUrl,omitempty"`
	// A description of the repository, rendered to HTML without any links in it.
	ShortDescriptionHTML string `json:"shortDescriptionHTML"`
	// Whether or not squash-merging is enabled on this repository.
	SquashMergeAllowed bool `json:"squashMergeAllowed"`
	// How the default commit message will be generated when squash merging a pull request.
	SquashMergeCommitMessage SquashMergeCommitMessage `json:"squashMergeCommitMessage"`
	// How the default commit title will be generated when squash merging a pull request.
	SquashMergeCommitTitle SquashMergeCommitTitle `json:"squashMergeCommitTitle"`
	// Whether a squash merge commit can use the pull request title as default.
	SquashPrTitleUsedAsDefault bool `json:"squashPrTitleUsedAsDefault"`
	// The SSH URL to clone this repository
	SSHURL string `json:"sshUrl"`
	// Returns a count of how many stargazers there are on this object
	//
	StargazerCount int64 `json:"stargazerCount"`
	// A list of users who have starred this starrable.
	Stargazers StargazerConnection `json:"stargazers"`
	// Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
	Submodules SubmoduleConnection `json:"submodules"`
	// Temporary authentication token for cloning this repository.
	TempCloneToken *string `json:"tempCloneToken,omitempty"`
	// The repository from which this repository was generated, if any.
	TemplateRepository *Repository `json:"templateRepository,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this repository
	URL string `json:"url"`
	// Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
	UsesCustomOpenGraphImage bool `json:"usesCustomOpenGraphImage"`
	// Indicates whether the viewer has admin permissions on this repository.
	ViewerCanAdminister bool `json:"viewerCanAdminister"`
	// Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Indicates whether the viewer can update the topics of this repository.
	ViewerCanUpdateTopics bool `json:"viewerCanUpdateTopics"`
	// The last commit email for the viewer.
	ViewerDefaultCommitEmail *string `json:"viewerDefaultCommitEmail,omitempty"`
	// The last used merge method by the viewer or the default for the repository.
	ViewerDefaultMergeMethod PullRequestMergeMethod `json:"viewerDefaultMergeMethod"`
	// Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred"`
	// The users permission level on the repository. Will return null if authenticated as an GitHub App.
	ViewerPermission *RepositoryPermission `json:"viewerPermission,omitempty"`
	// A list of emails this viewer can commit with.
	ViewerPossibleCommitEmails []string `json:"viewerPossibleCommitEmails,omitempty"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility `json:"visibility"`
	// Returns a single vulnerability alert from the current repository by number.
	VulnerabilityAlert *RepositoryVulnerabilityAlert `json:"vulnerabilityAlert,omitempty"`
	// A list of vulnerability alerts that are on this repository.
	VulnerabilityAlerts *RepositoryVulnerabilityAlertConnection `json:"vulnerabilityAlerts,omitempty"`
	// A list of users watching the repository.
	Watchers UserConnection `json:"watchers"`
	// Whether contributors are required to sign off on web-based commits in this repository.
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired"`
}

func (Repository) IsNode() {}

// ID of the object.
func (this Repository) GetID() string { return this.ID }

func (Repository) IsNotificationsList() {}

func (Repository) IsPackageOwner() {}

// A list of packages under the owner.
func (this Repository) GetPackages() PackageConnection { return this.Packages }

func (Repository) IsPermissionGranter() {}

func (Repository) IsPinnableItem() {}

func (Repository) IsProjectOwner() {}

// Find project by number.
func (this Repository) GetProject() *Project { return this.Project }

// A list of projects under the owner.
func (this Repository) GetProjects() ProjectConnection { return this.Projects }

// The HTTP path listing owners projects
func (this Repository) GetProjectsResourcePath() string { return this.ProjectsResourcePath }

// The HTTP URL listing owners projects
func (this Repository) GetProjectsURL() string { return this.ProjectsURL }

// Can the current viewer create new projects on this owner.
func (this Repository) GetViewerCanCreateProjects() bool { return this.ViewerCanCreateProjects }

func (Repository) IsProjectV2Recent() {}

// Recent projects that this user has modified in the context of the owner.
func (this Repository) GetRecentProjects() ProjectV2Connection { return this.RecentProjects }

func (Repository) IsRepositoryInfo() {}

// Identifies the date and time when the repository was archived.
func (this Repository) GetArchivedAt() *string { return this.ArchivedAt }

// Identifies the date and time when the object was created.
func (this Repository) GetCreatedAt() string { return this.CreatedAt }

// The description of the repository.
func (this Repository) GetDescription() *string { return this.Description }

// The description of the repository rendered to HTML.
func (this Repository) GetDescriptionHTML() string { return this.DescriptionHTML }

// Returns how many forks there are of this repository in the whole network.
func (this Repository) GetForkCount() int64 { return this.ForkCount }

// Indicates if the repository has the Discussions feature enabled.
func (this Repository) GetHasDiscussionsEnabled() bool { return this.HasDiscussionsEnabled }

// Indicates if the repository has issues feature enabled.
func (this Repository) GetHasIssuesEnabled() bool { return this.HasIssuesEnabled }

// Indicates if the repository has the Projects feature enabled.
func (this Repository) GetHasProjectsEnabled() bool { return this.HasProjectsEnabled }

// Indicates if the repository has wiki feature enabled.
func (this Repository) GetHasWikiEnabled() bool { return this.HasWikiEnabled }

// The repository's URL.
func (this Repository) GetHomepageURL() *string { return this.HomepageURL }

// Indicates if the repository is unmaintained.
func (this Repository) GetIsArchived() bool { return this.IsArchived }

// Identifies if the repository is a fork.
func (this Repository) GetIsFork() bool { return this.IsFork }

// Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
func (this Repository) GetIsInOrganization() bool { return this.IsInOrganization }

// Indicates if the repository has been locked or not.
func (this Repository) GetIsLocked() bool { return this.IsLocked }

// Identifies if the repository is a mirror.
func (this Repository) GetIsMirror() bool { return this.IsMirror }

// Identifies if the repository is private or internal.
func (this Repository) GetIsPrivate() bool { return this.IsPrivate }

// Identifies if the repository is a template that can be used to generate new repositories.
func (this Repository) GetIsTemplate() bool { return this.IsTemplate }

// The license associated with the repository
func (this Repository) GetLicenseInfo() *License { return this.LicenseInfo }

// The reason the repository has been locked.
func (this Repository) GetLockReason() *RepositoryLockReason { return this.LockReason }

// The repository's original mirror URL.
func (this Repository) GetMirrorURL() *string { return this.MirrorURL }

// The name of the repository.
func (this Repository) GetName() string { return this.Name }

// The repository's name with owner.
func (this Repository) GetNameWithOwner() string { return this.NameWithOwner }

// The image used to represent this repository in Open Graph data.
func (this Repository) GetOpenGraphImageURL() string { return this.OpenGraphImageURL }

// The User owner of the repository.
func (this Repository) GetOwner() RepositoryOwner { return this.Owner }

// Identifies the date and time when the repository was last pushed to.
func (this Repository) GetPushedAt() *string { return this.PushedAt }

// The HTTP path for this repository
func (this Repository) GetResourcePath() string { return this.ResourcePath }

// A description of the repository, rendered to HTML without any links in it.
func (this Repository) GetShortDescriptionHTML() string { return this.ShortDescriptionHTML }

// Identifies the date and time when the object was last updated.
func (this Repository) GetUpdatedAt() string { return this.UpdatedAt }

// The HTTP URL for this repository
func (this Repository) GetURL() string { return this.URL }

// Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
func (this Repository) GetUsesCustomOpenGraphImage() bool { return this.UsesCustomOpenGraphImage }

// Indicates the repository's visibility level.
func (this Repository) GetVisibility() RepositoryVisibility { return this.Visibility }

func (Repository) IsRuleSource() {}

func (Repository) IsSearchResultItem() {}

func (Repository) IsSponsorsListingFeatureableItem() {}

func (Repository) IsStarrable() {}

// Returns a count of how many stargazers there are on this object
func (this Repository) GetStargazerCount() int64 { return this.StargazerCount }

// A list of users who have starred this starrable.
func (this Repository) GetStargazers() StargazerConnection { return this.Stargazers }

// Returns a boolean indicating whether the viewing user has starred this starrable.
func (this Repository) GetViewerHasStarred() bool { return this.ViewerHasStarred }

func (Repository) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this Repository) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this Repository) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (Repository) IsUniformResourceLocatable() {}

// The HTML path to this resource.

// The URL to this resource.

// Information extracted from a repository's `CODEOWNERS` file.
type RepositoryCodeowners struct {
	// Any problems that were encountered while parsing the `CODEOWNERS` file.
	Errors []*RepositoryCodeownersError `json:"errors"`
}

// An error in a `CODEOWNERS` file.
type RepositoryCodeownersError struct {
	// The column number where the error occurs.
	Column int64 `json:"column"`
	// A short string describing the type of error.
	Kind string `json:"kind"`
	// The line number where the error occurs.
	Line int64 `json:"line"`
	// A complete description of the error, combining information from other fields.
	Message string `json:"message"`
	// The path to the file when the error occurs.
	Path string `json:"path"`
	// The content of the line where the error occurs.
	Source string `json:"source"`
	// A suggestion of how to fix the error.
	Suggestion *string `json:"suggestion,omitempty"`
}

// The connection type for User.
type RepositoryCollaboratorConnection struct {
	// A list of edges.
	Edges []*RepositoryCollaboratorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user who is a collaborator of a repository.
type RepositoryCollaboratorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	Node   User   `json:"node"`
	// The permission the user has on the repository.
	Permission RepositoryPermission `json:"permission"`
	// A list of sources for the user's access to the repository.
	PermissionSources []*PermissionSource `json:"permissionSources,omitempty"`
}

// A list of repositories owned by the subject.
type RepositoryConnection struct {
	// A list of edges.
	Edges []*RepositoryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// The total size in kilobytes of all repositories in the connection. Value will never be larger than max 32-bit signed integer.
	TotalDiskUsage int64 `json:"totalDiskUsage"`
}

// A repository contact link.
type RepositoryContactLink struct {
	// The contact link purpose.
	About string `json:"about"`
	// The contact link name.
	Name string `json:"name"`
	// The contact link URL.
	URL string `json:"url"`
}

// A wrapper on Repository used for Dependabot Alerts notifications.
type RepositoryDependabotAlertsThread struct {
	ID string `json:"id"`
	// The URL pointing to the repository's dependabot alerts page
	NotificationsPermalink *string `json:"notificationsPermalink,omitempty"`
	// The repository associated with this node.
	Repository Repository `json:"repository"`
}

func (RepositoryDependabotAlertsThread) IsNode() {}

// ID of the object.
func (this RepositoryDependabotAlertsThread) GetID() string { return this.ID }

func (RepositoryDependabotAlertsThread) IsNotificationsSubject() {}

func (RepositoryDependabotAlertsThread) IsRepositoryNode() {}

// The repository associated with this node.
func (this RepositoryDependabotAlertsThread) GetRepository() Repository { return this.Repository }

// An edge in a connection.
type RepositoryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Repository `json:"node,omitempty"`
}

// Parameters to be used for the repository_id condition
type RepositoryIDConditionTarget struct {
	// One of these repo IDs must match the repo.
	RepositoryIds []string `json:"repositoryIds"`
}

// Parameters to be used for the repository_id condition
type RepositoryIDConditionTargetInput struct {
	// One of these repo IDs must match the repo.
	RepositoryIds []string `json:"repositoryIds"`
}

// Repository interaction limit that applies to this object.
type RepositoryInteractionAbility struct {
	// The time the currently active limit expires.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The current limit that is enabled on this object.
	Limit RepositoryInteractionLimit `json:"limit"`
	// The origin of the currently active interaction limit.
	Origin RepositoryInteractionLimitOrigin `json:"origin"`
}

// An invitation for a user to be added to a repository.
type RepositoryInvitation struct {
	// The email address that received the invitation.
	Email *string `json:"email,omitempty"`
	ID    string  `json:"id"`
	// The user who received the invitation.
	Invitee *User `json:"invitee,omitempty"`
	// The user who created the invitation.
	Inviter User `json:"inviter"`
	// The permalink for this repository invitation.
	Permalink string `json:"permalink"`
	// The permission granted on this repository by this invitation.
	Permission RepositoryPermission `json:"permission"`
	// The Repository the user is invited to.
	Repository RepositoryInfo `json:"repository,omitempty"`
}

func (RepositoryInvitation) IsNode() {}

// ID of the object.
func (this RepositoryInvitation) GetID() string { return this.ID }

func (RepositoryInvitation) IsNotificationsSubject() {}

// A list of repository invitations.
type RepositoryInvitationConnection struct {
	// A list of edges.
	Edges []*RepositoryInvitationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryInvitation `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryInvitationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryInvitation `json:"node,omitempty"`
}

// Ordering options for repository invitation connections.
type RepositoryInvitationOrder struct {
	// The field to order repository invitations by.
	Field RepositoryInvitationOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A GitHub Enterprise Importer (GEI) repository migration.
type RepositoryMigration struct {
	// The migration flag to continue on error.
	ContinueOnError bool `json:"continueOnError"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *string `json:"databaseId,omitempty"`
	// The reason the migration failed.
	FailureReason *string `json:"failureReason,omitempty"`
	ID            string  `json:"id"`
	// The URL for the migration log (expires 1 day after migration completes).
	MigrationLogURL *string `json:"migrationLogUrl,omitempty"`
	// The migration source.
	MigrationSource MigrationSource `json:"migrationSource"`
	// The target repository name.
	RepositoryName string `json:"repositoryName"`
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	SourceURL string `json:"sourceUrl"`
	// The migration state.
	State MigrationState `json:"state"`
	// The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
	WarningsCount int64 `json:"warningsCount"`
}

func (RepositoryMigration) IsMigration() {}

// The migration flag to continue on error.
func (this RepositoryMigration) GetContinueOnError() bool { return this.ContinueOnError }

// Identifies the date and time when the object was created.
func (this RepositoryMigration) GetCreatedAt() string { return this.CreatedAt }

// Identifies the primary key from the database.
func (this RepositoryMigration) GetDatabaseID() *string { return this.DatabaseID }

// The reason the migration failed.
func (this RepositoryMigration) GetFailureReason() *string { return this.FailureReason }
func (this RepositoryMigration) GetID() string             { return this.ID }

// The URL for the migration log (expires 1 day after migration completes).
func (this RepositoryMigration) GetMigrationLogURL() *string { return this.MigrationLogURL }

// The migration source.
func (this RepositoryMigration) GetMigrationSource() MigrationSource { return this.MigrationSource }

// The target repository name.
func (this RepositoryMigration) GetRepositoryName() string { return this.RepositoryName }

// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
func (this RepositoryMigration) GetSourceURL() string { return this.SourceURL }

// The migration state.
func (this RepositoryMigration) GetState() MigrationState { return this.State }

// The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
func (this RepositoryMigration) GetWarningsCount() int64 { return this.WarningsCount }

func (RepositoryMigration) IsNode() {}

// ID of the object.

// The connection type for RepositoryMigration.
type RepositoryMigrationConnection struct {
	// A list of edges.
	Edges []*RepositoryMigrationEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryMigration `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a repository migration.
type RepositoryMigrationEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryMigration `json:"node,omitempty"`
}

// Ordering options for repository migrations.
type RepositoryMigrationOrder struct {
	// The field to order repository migrations by.
	Field RepositoryMigrationOrderField `json:"field"`
	// The ordering direction.
	Direction RepositoryMigrationOrderDirection `json:"direction"`
}

// Parameters to be used for the repository_name condition
type RepositoryNameConditionTarget struct {
	// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude"`
	// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Include []string `json:"include"`
	// Target changes that match these patterns will be prevented except by those with bypass permissions.
	Protected bool `json:"protected"`
}

// Parameters to be used for the repository_name condition
type RepositoryNameConditionTargetInput struct {
	// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude"`
	// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Include []string `json:"include"`
	// Target changes that match these patterns will be prevented except by those with bypass permissions.
	Protected *bool `json:"protected,omitempty"`
}

// Ordering options for repository connections
type RepositoryOrder struct {
	// The field to order repositories by.
	Field RepositoryOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A repository rule.
type RepositoryRule struct {
	ID string `json:"id"`
	// The parameters for this rule.
	Parameters RuleParameters `json:"parameters,omitempty"`
	// The repository ruleset associated with this rule configuration
	RepositoryRuleset *RepositoryRuleset `json:"repositoryRuleset,omitempty"`
	// The type of rule.
	Type RepositoryRuleType `json:"type"`
}

func (RepositoryRule) IsNode() {}

// ID of the object.
func (this RepositoryRule) GetID() string { return this.ID }

// Set of conditions that determine if a ruleset will evaluate
type RepositoryRuleConditions struct {
	// Configuration for the ref_name condition
	RefName *RefNameConditionTarget `json:"refName,omitempty"`
	// Configuration for the repository_id condition
	RepositoryID *RepositoryIDConditionTarget `json:"repositoryId,omitempty"`
	// Configuration for the repository_name condition
	RepositoryName *RepositoryNameConditionTarget `json:"repositoryName,omitempty"`
}

// Specifies the conditions required for a ruleset to evaluate
type RepositoryRuleConditionsInput struct {
	// Configuration for the ref_name condition
	RefName *RefNameConditionTargetInput `json:"refName,omitempty"`
	// Configuration for the repository_name condition
	RepositoryName *RepositoryNameConditionTargetInput `json:"repositoryName,omitempty"`
	// Configuration for the repository_id condition
	RepositoryID *RepositoryIDConditionTargetInput `json:"repositoryId,omitempty"`
}

// The connection type for RepositoryRule.
type RepositoryRuleConnection struct {
	// A list of edges.
	Edges []*RepositoryRuleEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryRule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryRuleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryRule `json:"node,omitempty"`
}

// Specifies the attributes for a new or updated rule.
type RepositoryRuleInput struct {
	// Optional ID of this rule when updating
	ID *string `json:"id,omitempty"`
	// The type of rule to create.
	Type RepositoryRuleType `json:"type"`
	// The parameters for the rule.
	Parameters *RuleParametersInput `json:"parameters,omitempty"`
}

// A repository ruleset.
type RepositoryRuleset struct {
	// The actors that can bypass this ruleset
	BypassActors *RepositoryRulesetBypassActorConnection `json:"bypassActors,omitempty"`
	// The set of conditions that must evaluate to true for this ruleset to apply
	Conditions RepositoryRuleConditions `json:"conditions"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The enforcement level of this ruleset
	Enforcement RuleEnforcement `json:"enforcement"`
	ID          string          `json:"id"`
	// Name of the ruleset.
	Name string `json:"name"`
	// List of rules.
	Rules *RepositoryRuleConnection `json:"rules,omitempty"`
	// Source of ruleset.
	Source RuleSource `json:"source"`
	// Target of the ruleset.
	Target *RepositoryRulesetTarget `json:"target,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (RepositoryRuleset) IsNode() {}

// ID of the object.
func (this RepositoryRuleset) GetID() string { return this.ID }

// A team or app that has the ability to bypass a rules defined on a ruleset
type RepositoryRulesetBypassActor struct {
	// The actor that can bypass rules.
	Actor BypassActor `json:"actor,omitempty"`
	// The mode for the bypass actor
	BypassMode *RepositoryRulesetBypassActorBypassMode `json:"bypassMode,omitempty"`
	ID         string                                  `json:"id"`
	// This actor represents the ability for an organization admin to bypass
	OrganizationAdmin bool `json:"organizationAdmin"`
	// If the actor is a repository role, the repository role's ID that can bypass
	RepositoryRoleDatabaseID *int64 `json:"repositoryRoleDatabaseId,omitempty"`
	// If the actor is a repository role, the repository role's name that can bypass
	RepositoryRoleName *string `json:"repositoryRoleName,omitempty"`
	// Identifies the ruleset associated with the allowed actor
	RepositoryRuleset *RepositoryRuleset `json:"repositoryRuleset,omitempty"`
}

func (RepositoryRulesetBypassActor) IsNode() {}

// ID of the object.
func (this RepositoryRulesetBypassActor) GetID() string { return this.ID }

// The connection type for RepositoryRulesetBypassActor.
type RepositoryRulesetBypassActorConnection struct {
	// A list of edges.
	Edges []*RepositoryRulesetBypassActorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryRulesetBypassActor `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryRulesetBypassActorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryRulesetBypassActor `json:"node,omitempty"`
}

// Specifies the attributes for a new or updated ruleset bypass actor. Only one of `actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
type RepositoryRulesetBypassActorInput struct {
	// For Team and Integration bypasses, the Team or Integration ID
	ActorID *string `json:"actorId,omitempty"`
	// For role bypasses, the role database ID
	RepositoryRoleDatabaseID *int64 `json:"repositoryRoleDatabaseId,omitempty"`
	// For org admin bupasses, true
	OrganizationAdmin *bool `json:"organizationAdmin,omitempty"`
	// The bypass mode for this actor.
	BypassMode RepositoryRulesetBypassActorBypassMode `json:"bypassMode"`
}

// The connection type for RepositoryRuleset.
type RepositoryRulesetConnection struct {
	// A list of edges.
	Edges []*RepositoryRulesetEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryRuleset `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryRulesetEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryRuleset `json:"node,omitempty"`
}

// A repository-topic connects a repository to a topic.
type RepositoryTopic struct {
	ID string `json:"id"`
	// The HTTP path for this repository-topic.
	ResourcePath string `json:"resourcePath"`
	// The topic.
	Topic Topic `json:"topic"`
	// The HTTP URL for this repository-topic.
	URL string `json:"url"`
}

func (RepositoryTopic) IsNode() {}

// ID of the object.
func (this RepositoryTopic) GetID() string { return this.ID }

func (RepositoryTopic) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this RepositoryTopic) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this RepositoryTopic) GetURL() string { return this.URL }

// The connection type for RepositoryTopic.
type RepositoryTopicConnection struct {
	// A list of edges.
	Edges []*RepositoryTopicEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryTopic `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryTopicEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryTopic `json:"node,omitempty"`
}

// Audit log entry for a repository_visibility_change.disable event.
type RepositoryVisibilityChangeDisableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepositoryVisibilityChangeDisableAuditEntry) IsAuditEntry() {}

// The action name
func (this RepositoryVisibilityChangeDisableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepositoryVisibilityChangeDisableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepositoryVisibilityChangeDisableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepositoryVisibilityChangeDisableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepositoryVisibilityChangeDisableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (RepositoryVisibilityChangeDisableAuditEntry) IsNode() {}

// ID of the object.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetID() string { return this.ID }

func (RepositoryVisibilityChangeDisableAuditEntry) IsOrganizationAuditEntry() {}

func (RepositoryVisibilityChangeDisableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// Audit log entry for a repository_visibility_change.enable event.
type RepositoryVisibilityChangeEnableAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	// The HTTP path for this enterprise.
	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
	// The slug of the enterprise.
	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
	// The HTTP URL for this enterprise.
	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
	ID            string  `json:"id"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (RepositoryVisibilityChangeEnableAuditEntry) IsAuditEntry() {}

// The action name
func (this RepositoryVisibilityChangeEnableAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActorLogin() *string {
	return this.ActorLogin
}

// The HTTP path for the actor.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this RepositoryVisibilityChangeEnableAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this RepositoryVisibilityChangeEnableAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this RepositoryVisibilityChangeEnableAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetUserURL() *string { return this.UserURL }

func (RepositoryVisibilityChangeEnableAuditEntry) IsEnterpriseAuditEntryData() {}

// The HTTP path for this enterprise.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseResourcePath() *string {
	return this.EnterpriseResourcePath
}

// The slug of the enterprise.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseSlug() *string {
	return this.EnterpriseSlug
}

// The HTTP URL for this enterprise.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseURL() *string {
	return this.EnterpriseURL
}

func (RepositoryVisibilityChangeEnableAuditEntry) IsNode() {}

// ID of the object.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetID() string { return this.ID }

func (RepositoryVisibilityChangeEnableAuditEntry) IsOrganizationAuditEntry() {}

func (RepositoryVisibilityChangeEnableAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetOrganization() *Organization {
	return this.Organization
}

// The name of the Organization.
func (this RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationURL() *string {
	return this.OrganizationURL
}

// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
type RepositoryVulnerabilityAlert struct {
	// When was the alert auto-dismissed?
	AutoDismissedAt *string `json:"autoDismissedAt,omitempty"`
	// When was the alert created?
	CreatedAt string `json:"createdAt"`
	// The associated Dependabot update
	DependabotUpdate *DependabotUpdate `json:"dependabotUpdate,omitempty"`
	// The scope of an alert's dependency
	DependencyScope *RepositoryVulnerabilityAlertDependencyScope `json:"dependencyScope,omitempty"`
	// Comment explaining the reason the alert was dismissed
	DismissComment *string `json:"dismissComment,omitempty"`
	// The reason the alert was dismissed
	DismissReason *string `json:"dismissReason,omitempty"`
	// When was the alert dismissed?
	DismissedAt *string `json:"dismissedAt,omitempty"`
	// The user who dismissed the alert
	Dismisser *User `json:"dismisser,omitempty"`
	// When was the alert fixed?
	FixedAt *string `json:"fixedAt,omitempty"`
	ID      string  `json:"id"`
	// Identifies the alert number.
	Number int64 `json:"number"`
	// The associated repository
	Repository Repository `json:"repository"`
	// The associated security advisory
	SecurityAdvisory *SecurityAdvisory `json:"securityAdvisory,omitempty"`
	// The associated security vulnerability
	SecurityVulnerability *SecurityVulnerability `json:"securityVulnerability,omitempty"`
	// Identifies the state of the alert.
	State RepositoryVulnerabilityAlertState `json:"state"`
	// The vulnerable manifest filename
	VulnerableManifestFilename string `json:"vulnerableManifestFilename"`
	// The vulnerable manifest path
	VulnerableManifestPath string `json:"vulnerableManifestPath"`
	// The vulnerable requirements
	VulnerableRequirements *string `json:"vulnerableRequirements,omitempty"`
}

func (RepositoryVulnerabilityAlert) IsNode() {}

// ID of the object.
func (this RepositoryVulnerabilityAlert) GetID() string { return this.ID }

func (RepositoryVulnerabilityAlert) IsNotificationsSubject() {}

func (RepositoryVulnerabilityAlert) IsRepositoryNode() {}

// The repository associated with this node.
func (this RepositoryVulnerabilityAlert) GetRepository() Repository { return this.Repository }

// The connection type for RepositoryVulnerabilityAlert.
type RepositoryVulnerabilityAlertConnection struct {
	// A list of edges.
	Edges []*RepositoryVulnerabilityAlertEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*RepositoryVulnerabilityAlert `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RepositoryVulnerabilityAlertEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *RepositoryVulnerabilityAlert `json:"node,omitempty"`
}

// Autogenerated input type of RequestReviews
type RequestReviewsInput struct {
	// The Node ID of the pull request to modify.
	PullRequestID string `json:"pullRequestId"`
	// The Node IDs of the user to request.
	UserIds []string `json:"userIds,omitempty"`
	// The Node IDs of the team to request.
	TeamIds []string `json:"teamIds,omitempty"`
	// Add users to the set rather than replace.
	Union *bool `json:"union,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RequestReviews
type RequestReviewsPayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that is getting requests.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// The edge from the pull request to the requested reviewers.
	RequestedReviewersEdge *UserEdge `json:"requestedReviewersEdge,omitempty"`
}

// The connection type for RequestedReviewer.
type RequestedReviewerConnection struct {
	// A list of edges.
	Edges []*RequestedReviewerEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []RequestedReviewer `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type RequestedReviewerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node RequestedReviewer `json:"node,omitempty"`
}

// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
type RequiredDeploymentsParameters struct {
	// The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments"`
}

func (RequiredDeploymentsParameters) IsRuleParameters() {}

// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
type RequiredDeploymentsParametersInput struct {
	// The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments"`
}

// Represents a required status check for a protected branch, but not any specific run of that check.
type RequiredStatusCheckDescription struct {
	// The App that must provide this status in order for it to be accepted.
	App *App `json:"app,omitempty"`
	// The name of this status.
	Context string `json:"context"`
}

// Specifies the attributes for a new or updated required status check.
type RequiredStatusCheckInput struct {
	// Status check context that must pass for commits to be accepted to the matching branch.
	Context string `json:"context"`
	// The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status.
	AppID *string `json:"appId,omitempty"`
}

// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
type RequiredStatusChecksParameters struct {
	// Status checks that are required.
	RequiredStatusChecks []*StatusCheckConfiguration `json:"requiredStatusChecks"`
	// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
	StrictRequiredStatusChecksPolicy bool `json:"strictRequiredStatusChecksPolicy"`
}

func (RequiredStatusChecksParameters) IsRuleParameters() {}

// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
type RequiredStatusChecksParametersInput struct {
	// Status checks that are required.
	RequiredStatusChecks []*StatusCheckConfigurationInput `json:"requiredStatusChecks"`
	// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
	StrictRequiredStatusChecksPolicy bool `json:"strictRequiredStatusChecksPolicy"`
}

// Autogenerated input type of RerequestCheckSuite
type RerequestCheckSuiteInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The Node ID of the check suite.
	CheckSuiteID string `json:"checkSuiteId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RerequestCheckSuite
type RerequestCheckSuitePayload struct {
	// The requested check suite.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of ResolveReviewThread
type ResolveReviewThreadInput struct {
	// The ID of the thread to resolve
	ThreadID string `json:"threadId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of ResolveReviewThread
type ResolveReviewThreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The thread to resolve.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

// Represents a private contribution a user made on GitHub.
type RestrictedContribution struct {
	// Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	//
	IsRestricted bool `json:"isRestricted"`
	// When this contribution was made.
	OccurredAt string `json:"occurredAt"`
	// The HTTP path for this contribution.
	ResourcePath string `json:"resourcePath"`
	// The HTTP URL for this contribution.
	URL string `json:"url"`
	// The user who made this contribution.
	//
	User User `json:"user"`
}

func (RestrictedContribution) IsContribution() {}

// Whether this contribution is associated with a record you do not have access to. For
// example, your own 'first issue' contribution may have been made on a repository you can no
// longer access.
func (this RestrictedContribution) GetIsRestricted() bool { return this.IsRestricted }

// When this contribution was made.
func (this RestrictedContribution) GetOccurredAt() string { return this.OccurredAt }

// The HTTP path for this contribution.
func (this RestrictedContribution) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this contribution.
func (this RestrictedContribution) GetURL() string { return this.URL }

// The user who made this contribution.
func (this RestrictedContribution) GetUser() User { return this.User }

func (RestrictedContribution) IsCreatedIssueOrRestrictedContribution() {}

func (RestrictedContribution) IsCreatedPullRequestOrRestrictedContribution() {}

func (RestrictedContribution) IsCreatedRepositoryOrRestrictedContribution() {}

// Autogenerated input type of RetireSponsorsTier
type RetireSponsorsTierInput struct {
	// The ID of the published tier to retire.
	TierID string `json:"tierId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RetireSponsorsTier
type RetireSponsorsTierPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The tier that was retired.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

// Autogenerated input type of RevertPullRequest
type RevertPullRequestInput struct {
	// The ID of the pull request to revert.
	PullRequestID string `json:"pullRequestId"`
	// The title of the revert pull request.
	Title *string `json:"title,omitempty"`
	// The description of the revert pull request.
	Body *string `json:"body,omitempty"`
	// Indicates whether the revert pull request should be a draft.
	Draft *bool `json:"draft,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RevertPullRequest
type RevertPullRequestPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The pull request that was reverted.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
	// The new pull request that reverts the input pull request.
	RevertPullRequest *PullRequest `json:"revertPullRequest,omitempty"`
}

// A user, team, or app who has the ability to dismiss a review on a protected branch.
type ReviewDismissalAllowance struct {
	// The actor that can dismiss.
	Actor ReviewDismissalAllowanceActor `json:"actor,omitempty"`
	// Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	ID                   string                `json:"id"`
}

func (ReviewDismissalAllowance) IsNode() {}

// ID of the object.
func (this ReviewDismissalAllowance) GetID() string { return this.ID }

// The connection type for ReviewDismissalAllowance.
type ReviewDismissalAllowanceConnection struct {
	// A list of edges.
	Edges []*ReviewDismissalAllowanceEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ReviewDismissalAllowance `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ReviewDismissalAllowanceEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ReviewDismissalAllowance `json:"node,omitempty"`
}

// Represents a 'review_dismissed' event on a given issue or pull request.
type ReviewDismissedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// Identifies the optional message associated with the 'review_dismissed' event.
	DismissalMessage *string `json:"dismissalMessage,omitempty"`
	// Identifies the optional message associated with the event, rendered to HTML.
	DismissalMessageHTML *string `json:"dismissalMessageHTML,omitempty"`
	ID                   string  `json:"id"`
	// Identifies the previous state of the review with the 'review_dismissed' event.
	PreviousReviewState PullRequestReviewState `json:"previousReviewState"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the commit which caused the review to become stale.
	PullRequestCommit *PullRequestCommit `json:"pullRequestCommit,omitempty"`
	// The HTTP path for this review dismissed event.
	ResourcePath string `json:"resourcePath"`
	// Identifies the review associated with the 'review_dismissed' event.
	Review *PullRequestReview `json:"review,omitempty"`
	// The HTTP URL for this review dismissed event.
	URL string `json:"url"`
}

func (ReviewDismissedEvent) IsNode() {}

// ID of the object.
func (this ReviewDismissedEvent) GetID() string { return this.ID }

func (ReviewDismissedEvent) IsPullRequestTimelineItem() {}

func (ReviewDismissedEvent) IsPullRequestTimelineItems() {}

func (ReviewDismissedEvent) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this ReviewDismissedEvent) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this ReviewDismissedEvent) GetURL() string { return this.URL }

// A request for a user to review a pull request.
type ReviewRequest struct {
	// Whether this request was created for a code owner
	AsCodeOwner bool `json:"asCodeOwner"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// Identifies the pull request associated with this review request.
	PullRequest PullRequest `json:"pullRequest"`
	// The reviewer that is requested.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (ReviewRequest) IsNode() {}

// ID of the object.
func (this ReviewRequest) GetID() string { return this.ID }

// The connection type for ReviewRequest.
type ReviewRequestConnection struct {
	// A list of edges.
	Edges []*ReviewRequestEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*ReviewRequest `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type ReviewRequestEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *ReviewRequest `json:"node,omitempty"`
}

// Represents an 'review_request_removed' event on a given pull request.
type ReviewRequestRemovedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the reviewer whose review request was removed.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (ReviewRequestRemovedEvent) IsNode() {}

// ID of the object.
func (this ReviewRequestRemovedEvent) GetID() string { return this.ID }

func (ReviewRequestRemovedEvent) IsPullRequestTimelineItem() {}

func (ReviewRequestRemovedEvent) IsPullRequestTimelineItems() {}

// Represents an 'review_requested' event on a given pull request.
type ReviewRequestedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// PullRequest referenced by event.
	PullRequest PullRequest `json:"pullRequest"`
	// Identifies the reviewer whose review was requested.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (ReviewRequestedEvent) IsNode() {}

// ID of the object.
func (this ReviewRequestedEvent) GetID() string { return this.ID }

func (ReviewRequestedEvent) IsPullRequestTimelineItem() {}

func (ReviewRequestedEvent) IsPullRequestTimelineItems() {}

// A hovercard context with a message describing the current code review state of the pull
// request.
type ReviewStatusHovercardContext struct {
	// A string describing this context
	Message string `json:"message"`
	// An octicon to accompany this context
	Octicon string `json:"octicon"`
	// The current status of the pull request with respect to code review.
	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision,omitempty"`
}

func (ReviewStatusHovercardContext) IsHovercardContext() {}

// A string describing this context
func (this ReviewStatusHovercardContext) GetMessage() string { return this.Message }

// An octicon to accompany this context
func (this ReviewStatusHovercardContext) GetOcticon() string { return this.Octicon }

// Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
type RevokeEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	EnterpriseID string `json:"enterpriseId"`
	// The login of the user to revoke the migrator role
	Login string `json:"login"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
type RevokeEnterpriseOrganizationsMigratorRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organizations that had the migrator role revoked for the given user.
	Organizations *OrganizationConnection `json:"organizations,omitempty"`
}

// Autogenerated input type of RevokeMigratorRole
type RevokeMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to.
	OrganizationID string `json:"organizationId"`
	// The user login or Team slug to revoke the migrator role from.
	Actor string `json:"actor"`
	// Specifies the type of the actor, can be either USER or TEAM.
	ActorType ActorType `json:"actorType"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of RevokeMigratorRole
type RevokeMigratorRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Did the operation succeed?
	Success *bool `json:"success,omitempty"`
}

// Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
type RuleParametersInput struct {
	// Parameters used for the `update` rule type
	Update *UpdateParametersInput `json:"update,omitempty"`
	// Parameters used for the `required_deployments` rule type
	RequiredDeployments *RequiredDeploymentsParametersInput `json:"requiredDeployments,omitempty"`
	// Parameters used for the `pull_request` rule type
	PullRequest *PullRequestParametersInput `json:"pullRequest,omitempty"`
	// Parameters used for the `required_status_checks` rule type
	RequiredStatusChecks *RequiredStatusChecksParametersInput `json:"requiredStatusChecks,omitempty"`
	// Parameters used for the `commit_message_pattern` rule type
	CommitMessagePattern *CommitMessagePatternParametersInput `json:"commitMessagePattern,omitempty"`
	// Parameters used for the `commit_author_email_pattern` rule type
	CommitAuthorEmailPattern *CommitAuthorEmailPatternParametersInput `json:"commitAuthorEmailPattern,omitempty"`
	// Parameters used for the `committer_email_pattern` rule type
	CommitterEmailPattern *CommitterEmailPatternParametersInput `json:"committerEmailPattern,omitempty"`
	// Parameters used for the `branch_name_pattern` rule type
	BranchNamePattern *BranchNamePatternParametersInput `json:"branchNamePattern,omitempty"`
	// Parameters used for the `tag_name_pattern` rule type
	TagNamePattern *TagNamePatternParametersInput `json:"tagNamePattern,omitempty"`
	// Parameters used for the `workflows` rule type
	Workflows *WorkflowsParametersInput `json:"workflows,omitempty"`
}

// A Saved Reply is text a user can use to reply quickly.
type SavedReply struct {
	// The body of the saved reply.
	Body string `json:"body"`
	// The saved reply body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The title of the saved reply.
	Title string `json:"title"`
	// The user that saved this reply.
	User Actor `json:"user,omitempty"`
}

func (SavedReply) IsNode() {}

// ID of the object.
func (this SavedReply) GetID() string { return this.ID }

// The connection type for SavedReply.
type SavedReplyConnection struct {
	// A list of edges.
	Edges []*SavedReplyEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SavedReply `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SavedReplyEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SavedReply `json:"node,omitempty"`
}

// Ordering options for saved reply connections.
type SavedReplyOrder struct {
	// The field to order saved replies by.
	Field SavedReplyOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
type SearchResultItemConnection struct {
	// The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	CodeCount int64 `json:"codeCount"`
	// The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	DiscussionCount int64 `json:"discussionCount"`
	// A list of edges.
	Edges []*SearchResultItemEdge `json:"edges,omitempty"`
	// The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	IssueCount int64 `json:"issueCount"`
	// A list of nodes.
	Nodes []SearchResultItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	RepositoryCount int64 `json:"repositoryCount"`
	// The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	UserCount int64 `json:"userCount"`
	// The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	WikiCount int64 `json:"wikiCount"`
}

// An edge in a connection.
type SearchResultItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node SearchResultItem `json:"node,omitempty"`
	// Text matches on the result found.
	TextMatches []*TextMatch `json:"textMatches,omitempty"`
}

// A GitHub Security Advisory
type SecurityAdvisory struct {
	// The classification of the advisory
	Classification SecurityAdvisoryClassification `json:"classification"`
	// The CVSS associated with this advisory
	Cvss Cvss `json:"cvss"`
	// CWEs associated with this Advisory
	Cwes CWEConnection `json:"cwes"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// This is a long plaintext description of the advisory
	Description string `json:"description"`
	// The GitHub Security Advisory ID
	GhsaID string `json:"ghsaId"`
	ID     string `json:"id"`
	// A list of identifiers for this advisory
	Identifiers []*SecurityAdvisoryIdentifier `json:"identifiers"`
	// The permalink for the advisory's dependabot alerts page
	NotificationsPermalink *string `json:"notificationsPermalink,omitempty"`
	// The organization that originated the advisory
	Origin string `json:"origin"`
	// The permalink for the advisory
	Permalink *string `json:"permalink,omitempty"`
	// When the advisory was published
	PublishedAt string `json:"publishedAt"`
	// A list of references for this advisory
	References []*SecurityAdvisoryReference `json:"references"`
	// The severity of the advisory
	Severity SecurityAdvisorySeverity `json:"severity"`
	// A short plaintext summary of the advisory
	Summary string `json:"summary"`
	// When the advisory was last updated
	UpdatedAt string `json:"updatedAt"`
	// Vulnerabilities associated with this Advisory
	Vulnerabilities SecurityVulnerabilityConnection `json:"vulnerabilities"`
	// When the advisory was withdrawn, if it has been withdrawn
	WithdrawnAt *string `json:"withdrawnAt,omitempty"`
}

func (SecurityAdvisory) IsNode() {}

// ID of the object.
func (this SecurityAdvisory) GetID() string { return this.ID }

func (SecurityAdvisory) IsNotificationsSubject() {}

// The connection type for SecurityAdvisory.
type SecurityAdvisoryConnection struct {
	// A list of edges.
	Edges []*SecurityAdvisoryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SecurityAdvisory `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SecurityAdvisoryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SecurityAdvisory `json:"node,omitempty"`
}

// A GitHub Security Advisory Identifier
type SecurityAdvisoryIdentifier struct {
	// The identifier type, e.g. GHSA, CVE
	Type string `json:"type"`
	// The identifier
	Value string `json:"value"`
}

// An advisory identifier to filter results on.
type SecurityAdvisoryIdentifierFilter struct {
	// The identifier type.
	Type SecurityAdvisoryIdentifierType `json:"type"`
	// The identifier string. Supports exact or partial matching.
	Value string `json:"value"`
}

// Ordering options for security advisory connections
type SecurityAdvisoryOrder struct {
	// The field to order security advisories by.
	Field SecurityAdvisoryOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An individual package
type SecurityAdvisoryPackage struct {
	// The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
	Ecosystem SecurityAdvisoryEcosystem `json:"ecosystem"`
	// The package name
	Name string `json:"name"`
}

// An individual package version
type SecurityAdvisoryPackageVersion struct {
	// The package name or version
	Identifier string `json:"identifier"`
}

// A GitHub Security Advisory Reference
type SecurityAdvisoryReference struct {
	// A publicly accessible reference
	URL string `json:"url"`
}

// An individual vulnerability within an Advisory
type SecurityVulnerability struct {
	// The Advisory associated with this Vulnerability
	Advisory SecurityAdvisory `json:"advisory"`
	// The first version containing a fix for the vulnerability
	FirstPatchedVersion *SecurityAdvisoryPackageVersion `json:"firstPatchedVersion,omitempty"`
	// A description of the vulnerable package
	Package SecurityAdvisoryPackage `json:"package"`
	// The severity of the vulnerability within this package
	Severity SecurityAdvisorySeverity `json:"severity"`
	// When the vulnerability was last updated
	UpdatedAt string `json:"updatedAt"`
	// A string that describes the vulnerable package versions.
	// This string follows a basic syntax with a few forms.
	// + `= 0.2.0` denotes a single vulnerable version.
	// + `<= 1.0.8` denotes a version range up to and including the specified version
	// + `< 0.1.11` denotes a version range up to, but excluding, the specified version
	// + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
	// + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
	//
	VulnerableVersionRange string `json:"vulnerableVersionRange"`
}

// The connection type for SecurityVulnerability.
type SecurityVulnerabilityConnection struct {
	// A list of edges.
	Edges []*SecurityVulnerabilityEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SecurityVulnerability `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SecurityVulnerabilityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SecurityVulnerability `json:"node,omitempty"`
}

// Ordering options for security vulnerability connections
type SecurityVulnerabilityOrder struct {
	// The field to order security vulnerabilities by.
	Field SecurityVulnerabilityOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Autogenerated input type of SetEnterpriseIdentityProvider
type SetEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise on which to set an identity provider.
	EnterpriseID string `json:"enterpriseId"`
	// The URL endpoint for the identity provider's SAML SSO.
	SsoURL string `json:"ssoUrl"`
	// The Issuer Entity ID for the SAML identity provider
	Issuer *string `json:"issuer,omitempty"`
	// The x509 certificate used by the identity provider to sign assertions and responses.
	IdpCertificate string `json:"idpCertificate"`
	// The signature algorithm used to sign SAML requests for the identity provider.
	SignatureMethod SamlSignatureAlgorithm `json:"signatureMethod"`
	// The digest algorithm used to sign SAML requests for the identity provider.
	DigestMethod SamlDigestAlgorithm `json:"digestMethod"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of SetEnterpriseIdentityProvider
type SetEnterpriseIdentityProviderPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The identity provider for the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

// Autogenerated input type of SetOrganizationInteractionLimit
type SetOrganizationInteractionLimitInput struct {
	// The ID of the organization to set a limit for.
	OrganizationID string `json:"organizationId"`
	// The limit to set.
	Limit RepositoryInteractionLimit `json:"limit"`
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of SetOrganizationInteractionLimit
type SetOrganizationInteractionLimitPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organization that the interaction limit was set for.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of SetRepositoryInteractionLimit
type SetRepositoryInteractionLimitInput struct {
	// The ID of the repository to set a limit for.
	RepositoryID string `json:"repositoryId"`
	// The limit to set.
	Limit RepositoryInteractionLimit `json:"limit"`
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of SetRepositoryInteractionLimit
type SetRepositoryInteractionLimitPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository that the interaction limit was set for.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of SetUserInteractionLimit
type SetUserInteractionLimitInput struct {
	// The ID of the user to set a limit for.
	UserID string `json:"userId"`
	// The limit to set.
	Limit RepositoryInteractionLimit `json:"limit"`
	// When this limit should expire.
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of SetUserInteractionLimit
type SetUserInteractionLimitPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The user that the interaction limit was set for.
	User *User `json:"user,omitempty"`
}

// Represents an S/MIME signature on a Commit or Tag.
type SmimeSignature struct {
	// Email used to sign this object.
	Email string `json:"email"`
	// True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid"`
	// Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload"`
	// ASCII-armored signature header from object.
	Signature string `json:"signature"`
	// GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`
	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state"`
	// True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub"`
}

func (SmimeSignature) IsGitSignature() {}

// Email used to sign this object.
func (this SmimeSignature) GetEmail() string { return this.Email }

// True if the signature is valid and verified by GitHub.
func (this SmimeSignature) GetIsValid() bool { return this.IsValid }

// Payload for GPG signing object. Raw ODB object without the signature header.
func (this SmimeSignature) GetPayload() string { return this.Payload }

// ASCII-armored signature header from object.
func (this SmimeSignature) GetSignature() string { return this.Signature }

// GitHub user corresponding to the email signing this commit.
func (this SmimeSignature) GetSigner() *User { return this.Signer }

// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
func (this SmimeSignature) GetState() GitSignatureState { return this.State }

// True if the signature was made with GitHub's signing key.
func (this SmimeSignature) GetWasSignedByGitHub() bool { return this.WasSignedByGitHub }

// Social media profile associated with a user.
type SocialAccount struct {
	// Name of the social media account as it appears on the profile.
	DisplayName string `json:"displayName"`
	// Software or company that hosts the social media account.
	Provider SocialAccountProvider `json:"provider"`
	// URL of the social media account.
	URL string `json:"url"`
}

// The connection type for SocialAccount.
type SocialAccountConnection struct {
	// A list of edges.
	Edges []*SocialAccountEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SocialAccount `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SocialAccountEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SocialAccount `json:"node,omitempty"`
}

// The connection type for Sponsor.
type SponsorConnection struct {
	// A list of edges.
	Edges []*SponsorEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []Sponsor `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user or organization who is sponsoring someone in GitHub Sponsors.
type SponsorEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node Sponsor `json:"node,omitempty"`
}

// Ordering options for connections to get sponsor entities for GitHub Sponsors.
type SponsorOrder struct {
	// The field to order sponsor entities by.
	Field SponsorOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// The connection type for SponsorableItem.
type SponsorableItemConnection struct {
	// A list of edges.
	Edges []*SponsorableItemEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []SponsorableItem `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SponsorableItemEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node SponsorableItem `json:"node,omitempty"`
}

// Ordering options for connections to get sponsorable entities for GitHub Sponsors.
type SponsorableOrder struct {
	// The field to order sponsorable entities by.
	Field SponsorableOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// An event related to sponsorship activity.
type SponsorsActivity struct {
	// What action this activity indicates took place.
	Action SponsorsActivityAction `json:"action"`
	// The sponsor's current privacy level.
	CurrentPrivacyLevel *SponsorshipPrivacy `json:"currentPrivacyLevel,omitempty"`
	ID                  string              `json:"id"`
	// The tier that the sponsorship used to use, for tier change events.
	PreviousSponsorsTier *SponsorsTier `json:"previousSponsorsTier,omitempty"`
	// The user or organization who triggered this activity and was/is sponsoring the sponsorable.
	Sponsor Sponsor `json:"sponsor,omitempty"`
	// The user or organization that is being sponsored, the maintainer.
	Sponsorable Sponsorable `json:"sponsorable"`
	// The associated sponsorship tier.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
	// The timestamp of this event.
	Timestamp *string `json:"timestamp,omitempty"`
	// Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
	ViaBulkSponsorship bool `json:"viaBulkSponsorship"`
}

func (SponsorsActivity) IsNode() {}

// ID of the object.
func (this SponsorsActivity) GetID() string { return this.ID }

// The connection type for SponsorsActivity.
type SponsorsActivityConnection struct {
	// A list of edges.
	Edges []*SponsorsActivityEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SponsorsActivity `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SponsorsActivityEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SponsorsActivity `json:"node,omitempty"`
}

// Ordering options for GitHub Sponsors activity connections.
type SponsorsActivityOrder struct {
	// The field to order activity by.
	Field SponsorsActivityOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
type SponsorsGoal struct {
	// A description of the goal from the maintainer.
	Description *string `json:"description,omitempty"`
	// What the objective of this goal is.
	Kind SponsorsGoalKind `json:"kind"`
	// The percentage representing how complete this goal is, between 0-100.
	PercentComplete int64 `json:"percentComplete"`
	// What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
	TargetValue int64 `json:"targetValue"`
	// A brief summary of the kind and target value of this goal.
	Title string `json:"title"`
}

// A GitHub Sponsors listing.
type SponsorsListing struct {
	// The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
	ActiveGoal *SponsorsGoal `json:"activeGoal,omitempty"`
	// The Stripe Connect account currently in use for payouts for this Sponsors listing, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ActiveStripeConnectAccount *StripeConnectAccount `json:"activeStripeConnectAccount,omitempty"`
	// The name of the country or region with the maintainer's bank account or fiscal host. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	BillingCountryOrRegion *string `json:"billingCountryOrRegion,omitempty"`
	// The email address used by GitHub to contact the sponsorable about their GitHub Sponsors profile. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ContactEmailAddress *string `json:"contactEmailAddress,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The HTTP path for the Sponsors dashboard for this Sponsors listing.
	DashboardResourcePath string `json:"dashboardResourcePath"`
	// The HTTP URL for the Sponsors dashboard for this Sponsors listing.
	DashboardURL string `json:"dashboardUrl"`
	// The records featured on the GitHub Sponsors profile.
	FeaturedItems []*SponsorsListingFeaturedItem `json:"featuredItems"`
	// The fiscal host used for payments, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	FiscalHost *Organization `json:"fiscalHost,omitempty"`
	// The full description of the listing.
	FullDescription string `json:"fullDescription"`
	// The full description of the listing rendered to HTML.
	FullDescriptionHTML string `json:"fullDescriptionHTML"`
	ID                  string `json:"id"`
	// Whether this listing is publicly visible.
	IsPublic bool `json:"isPublic"`
	// The listing's full name.
	Name string `json:"name"`
	// A future date on which this listing is eligible to receive a payout.
	NextPayoutDate *time.Time `json:"nextPayoutDate,omitempty"`
	// The name of the country or region where the maintainer resides. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ResidenceCountryOrRegion *string `json:"residenceCountryOrRegion,omitempty"`
	// The HTTP path for this Sponsors listing.
	ResourcePath string `json:"resourcePath"`
	// The short description of the listing.
	ShortDescription string `json:"shortDescription"`
	// The short name of the listing.
	Slug string `json:"slug"`
	// The entity this listing represents who can be sponsored on GitHub Sponsors.
	Sponsorable Sponsorable `json:"sponsorable"`
	// The tiers for this GitHub Sponsors profile.
	Tiers *SponsorsTierConnection `json:"tiers,omitempty"`
	// The HTTP URL for this Sponsors listing.
	URL string `json:"url"`
}

func (SponsorsListing) IsNode() {}

// ID of the object.
func (this SponsorsListing) GetID() string { return this.ID }

// A record that is promoted on a GitHub Sponsors profile.
type SponsorsListingFeaturedItem struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Will either be a description from the sponsorable maintainer about why they featured this item, or the item's description itself, such as a user's bio from their GitHub profile page.
	Description *string `json:"description,omitempty"`
	// The record that is featured on the GitHub Sponsors profile.
	Featureable SponsorsListingFeatureableItem `json:"featureable"`
	ID          string                         `json:"id"`
	// The position of this featured item on the GitHub Sponsors profile with a lower position indicating higher precedence. Starts at 1.
	Position int64 `json:"position"`
	// The GitHub Sponsors profile that features this record.
	SponsorsListing SponsorsListing `json:"sponsorsListing"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SponsorsListingFeaturedItem) IsNode() {}

// ID of the object.
func (this SponsorsListingFeaturedItem) GetID() string { return this.ID }

// A GitHub Sponsors tier associated with a GitHub Sponsors listing.
type SponsorsTier struct {
	// SponsorsTier information only visible to users that can administer the associated Sponsors listing.
	AdminInfo *SponsorsTierAdminInfo `json:"adminInfo,omitempty"`
	// Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
	ClosestLesserValueTier *SponsorsTier `json:"closestLesserValueTier,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The description of the tier.
	Description string `json:"description"`
	// The tier description rendered to HTML
	DescriptionHTML string `json:"descriptionHTML"`
	ID              string `json:"id"`
	// Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
	IsCustomAmount bool `json:"isCustomAmount"`
	// Whether this tier is only for use with one-time sponsorships.
	IsOneTime bool `json:"isOneTime"`
	// How much this tier costs per month in cents.
	MonthlyPriceInCents int64 `json:"monthlyPriceInCents"`
	// How much this tier costs per month in USD.
	MonthlyPriceInDollars int64 `json:"monthlyPriceInDollars"`
	// The name of the tier.
	Name string `json:"name"`
	// The sponsors listing that this tier belongs to.
	SponsorsListing SponsorsListing `json:"sponsorsListing"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SponsorsTier) IsNode() {}

// ID of the object.
func (this SponsorsTier) GetID() string { return this.ID }

// SponsorsTier information only visible to users that can administer the associated Sponsors listing.
type SponsorsTierAdminInfo struct {
	// Indicates whether this tier is still a work in progress by the sponsorable and not yet published to the associated GitHub Sponsors profile. Draft tiers cannot be used for new sponsorships and will not be in use on existing sponsorships. Draft tiers cannot be seen by anyone but the admins of the GitHub Sponsors profile.
	IsDraft bool `json:"isDraft"`
	// Indicates whether this tier is published to the associated GitHub Sponsors profile. Published tiers are visible to anyone who can see the GitHub Sponsors profile, and are available for use in sponsorships if the GitHub Sponsors profile is publicly visible.
	IsPublished bool `json:"isPublished"`
	// Indicates whether this tier has been retired from the associated GitHub Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors profile and cannot be chosen for new sponsorships. Existing sponsorships may still use retired tiers if the sponsor selected the tier before it was retired.
	IsRetired bool `json:"isRetired"`
	// The sponsorships using this tier.
	Sponsorships SponsorshipConnection `json:"sponsorships"`
}

// The connection type for SponsorsTier.
type SponsorsTierConnection struct {
	// A list of edges.
	Edges []*SponsorsTierEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SponsorsTier `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SponsorsTierEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SponsorsTier `json:"node,omitempty"`
}

// Ordering options for Sponsors tiers connections.
type SponsorsTierOrder struct {
	// The field to order tiers by.
	Field SponsorsTierOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A sponsorship relationship between a sponsor and a maintainer
type Sponsorship struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the sponsorship is active. False implies the sponsor is a past sponsor of the maintainer, while true implies they are a current sponsor.
	IsActive bool `json:"isActive"`
	// Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
	IsOneTimePayment bool `json:"isOneTimePayment"`
	// Whether the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
	IsSponsorOptedIntoEmail *bool `json:"isSponsorOptedIntoEmail,omitempty"`
	// The entity that is being sponsored
	Maintainer User `json:"maintainer"`
	// The platform that was most recently used to pay for the sponsorship.
	PaymentSource *SponsorshipPaymentSource `json:"paymentSource,omitempty"`
	// The privacy level for this sponsorship.
	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel"`
	// The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
	Sponsor *User `json:"sponsor,omitempty"`
	// The user or organization that is sponsoring, if you have permission to view them.
	SponsorEntity Sponsor `json:"sponsorEntity,omitempty"`
	// The entity that is being sponsored
	Sponsorable Sponsorable `json:"sponsorable"`
	// The associated sponsorship tier
	Tier *SponsorsTier `json:"tier,omitempty"`
	// Identifies the date and time when the current tier was chosen for this sponsorship.
	TierSelectedAt *string `json:"tierSelectedAt,omitempty"`
}

func (Sponsorship) IsNode() {}

// ID of the object.
func (this Sponsorship) GetID() string { return this.ID }

// The connection type for Sponsorship.
type SponsorshipConnection struct {
	// A list of edges.
	Edges []*SponsorshipEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Sponsorship `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
	// The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
	TotalRecurringMonthlyPriceInCents int64 `json:"totalRecurringMonthlyPriceInCents"`
	// The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
	TotalRecurringMonthlyPriceInDollars int64 `json:"totalRecurringMonthlyPriceInDollars"`
}

// An edge in a connection.
type SponsorshipEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Sponsorship `json:"node,omitempty"`
}

// An update sent to sponsors of a user or organization on GitHub Sponsors.
type SponsorshipNewsletter struct {
	// The author of the newsletter.
	Author *User `json:"author,omitempty"`
	// The contents of the newsletter, the message the sponsorable wanted to give.
	Body string `json:"body"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Indicates if the newsletter has been made available to sponsors.
	IsPublished bool `json:"isPublished"`
	// The user or organization this newsletter is from.
	Sponsorable Sponsorable `json:"sponsorable"`
	// The subject of the newsletter, what it's about.
	Subject string `json:"subject"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (SponsorshipNewsletter) IsNode() {}

// ID of the object.
func (this SponsorshipNewsletter) GetID() string { return this.ID }

// The connection type for SponsorshipNewsletter.
type SponsorshipNewsletterConnection struct {
	// A list of edges.
	Edges []*SponsorshipNewsletterEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*SponsorshipNewsletter `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SponsorshipNewsletterEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *SponsorshipNewsletter `json:"node,omitempty"`
}

// Ordering options for sponsorship newsletter connections.
type SponsorshipNewsletterOrder struct {
	// The field to order sponsorship newsletters by.
	Field SponsorshipNewsletterOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Ordering options for sponsorship connections.
type SponsorshipOrder struct {
	// The field to order sponsorship by.
	Field SponsorshipOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Represents an SSH signature on a Commit or Tag.
type SSHSignature struct {
	// Email used to sign this object.
	Email string `json:"email"`
	// True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid"`
	// Hex-encoded fingerprint of the key that signed this object.
	KeyFingerprint *string `json:"keyFingerprint,omitempty"`
	// Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload"`
	// ASCII-armored signature header from object.
	Signature string `json:"signature"`
	// GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`
	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state"`
	// True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub"`
}

func (SSHSignature) IsGitSignature() {}

// Email used to sign this object.
func (this SSHSignature) GetEmail() string { return this.Email }

// True if the signature is valid and verified by GitHub.
func (this SSHSignature) GetIsValid() bool { return this.IsValid }

// Payload for GPG signing object. Raw ODB object without the signature header.
func (this SSHSignature) GetPayload() string { return this.Payload }

// ASCII-armored signature header from object.
func (this SSHSignature) GetSignature() string { return this.Signature }

// GitHub user corresponding to the email signing this commit.
func (this SSHSignature) GetSigner() *User { return this.Signer }

// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
func (this SSHSignature) GetState() GitSignatureState { return this.State }

// True if the signature was made with GitHub's signing key.
func (this SSHSignature) GetWasSignedByGitHub() bool { return this.WasSignedByGitHub }

// Ways in which star connections can be ordered.
type StarOrder struct {
	// The field in which to order nodes by.
	Field StarOrderField `json:"field"`
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
}

// The connection type for User.
type StargazerConnection struct {
	// A list of edges.
	Edges []*StargazerEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user that's starred a repository.
type StargazerEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	Node   User   `json:"node"`
	// Identifies when the item was starred.
	StarredAt string `json:"starredAt"`
}

// The connection type for Repository.
type StarredRepositoryConnection struct {
	// A list of edges.
	Edges []*StarredRepositoryEdge `json:"edges,omitempty"`
	// Is the list of stars for this user truncated? This is true for users that have many stars.
	IsOverLimit bool `json:"isOverLimit"`
	// A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a starred repository.
type StarredRepositoryEdge struct {
	// A cursor for use in pagination.
	Cursor string     `json:"cursor"`
	Node   Repository `json:"node"`
	// Identifies when the item was starred.
	StarredAt string `json:"starredAt"`
}

// Autogenerated input type of StartOrganizationMigration
type StartOrganizationMigrationInput struct {
	// The URL of the organization to migrate.
	SourceOrgURL string `json:"sourceOrgUrl"`
	// The name of the target organization.
	TargetOrgName string `json:"targetOrgName"`
	// The ID of the enterprise the target organization belongs to.
	TargetEnterpriseID string `json:"targetEnterpriseId"`
	// The migration source access token.
	SourceAccessToken string `json:"sourceAccessToken"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of StartOrganizationMigration
type StartOrganizationMigrationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new organization migration.
	OrgMigration *OrganizationMigration `json:"orgMigration,omitempty"`
}

// Autogenerated input type of StartRepositoryMigration
type StartRepositoryMigrationInput struct {
	// The ID of the migration source.
	SourceID string `json:"sourceId"`
	// The ID of the organization that will own the imported repository.
	OwnerID string `json:"ownerId"`
	// The URL of the source repository.
	SourceRepositoryURL *string `json:"sourceRepositoryUrl,omitempty"`
	// The name of the imported repository.
	RepositoryName string `json:"repositoryName"`
	// Whether to continue the migration on error. Defaults to `true`.
	ContinueOnError *bool `json:"continueOnError,omitempty"`
	// The signed URL to access the user-uploaded git archive.
	GitArchiveURL *string `json:"gitArchiveUrl,omitempty"`
	// The signed URL to access the user-uploaded metadata archive.
	MetadataArchiveURL *string `json:"metadataArchiveUrl,omitempty"`
	// The migration source access token.
	AccessToken *string `json:"accessToken,omitempty"`
	// The GitHub personal access token of the user importing to the target repository.
	GithubPat *string `json:"githubPat,omitempty"`
	// Whether to skip migrating releases for the repository.
	SkipReleases *bool `json:"skipReleases,omitempty"`
	// The visibility of the imported repository.
	TargetRepoVisibility *string `json:"targetRepoVisibility,omitempty"`
	// Whether to lock the source repository.
	LockSource *bool `json:"lockSource,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of StartRepositoryMigration
type StartRepositoryMigrationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The new repository migration.
	RepositoryMigration *RepositoryMigration `json:"repositoryMigration,omitempty"`
}

// Represents a commit status.
type Status struct {
	// A list of status contexts and check runs for this commit.
	CombinedContexts StatusCheckRollupContextConnection `json:"combinedContexts"`
	// The commit this status is attached to.
	Commit *Commit `json:"commit,omitempty"`
	// Looks up an individual status context by context name.
	Context *StatusContext `json:"context,omitempty"`
	// The individual status contexts for this commit.
	Contexts []*StatusContext `json:"contexts"`
	ID       string           `json:"id"`
	// The combined commit status.
	State StatusState `json:"state"`
}

func (Status) IsNode() {}

// ID of the object.
func (this Status) GetID() string { return this.ID }

// Required status check
type StatusCheckConfiguration struct {
	// The status check context name that must be present on the commit.
	Context string `json:"context"`
	// The optional integration ID that this status check must originate from.
	IntegrationID *int64 `json:"integrationId,omitempty"`
}

// Required status check
type StatusCheckConfigurationInput struct {
	// The status check context name that must be present on the commit.
	Context string `json:"context"`
	// The optional integration ID that this status check must originate from.
	IntegrationID *int64 `json:"integrationId,omitempty"`
}

// Represents the rollup for both the check runs and status for a commit.
type StatusCheckRollup struct {
	// The commit the status and check runs are attached to.
	Commit *Commit `json:"commit,omitempty"`
	// A list of status contexts and check runs for this commit.
	Contexts StatusCheckRollupContextConnection `json:"contexts"`
	ID       string                             `json:"id"`
	// The combined status for the commit.
	State StatusState `json:"state"`
}

func (StatusCheckRollup) IsNode() {}

// ID of the object.
func (this StatusCheckRollup) GetID() string { return this.ID }

// The connection type for StatusCheckRollupContext.
type StatusCheckRollupContextConnection struct {
	// The number of check runs in this rollup.
	CheckRunCount int64 `json:"checkRunCount"`
	// Counts of check runs by state.
	CheckRunCountsByState []*CheckRunStateCount `json:"checkRunCountsByState,omitempty"`
	// A list of edges.
	Edges []*StatusCheckRollupContextEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []StatusCheckRollupContext `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// The number of status contexts in this rollup.
	StatusContextCount int64 `json:"statusContextCount"`
	// Counts of status contexts by state.
	StatusContextCountsByState []*StatusContextStateCount `json:"statusContextCountsByState,omitempty"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type StatusCheckRollupContextEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node StatusCheckRollupContext `json:"node,omitempty"`
}

// Represents an individual commit status context
type StatusContext struct {
	// The avatar of the OAuth application or the user that created the status
	AvatarURL *string `json:"avatarUrl,omitempty"`
	// This commit this status context is attached to.
	Commit *Commit `json:"commit,omitempty"`
	// The name of this status context.
	Context string `json:"context"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The actor who created this status context.
	Creator Actor `json:"creator,omitempty"`
	// The description for this status context.
	Description *string `json:"description,omitempty"`
	ID          string  `json:"id"`
	// Whether this is required to pass before merging for a specific pull request.
	IsRequired bool `json:"isRequired"`
	// The state of this status context.
	State StatusState `json:"state"`
	// The URL for this status context.
	TargetURL *string `json:"targetUrl,omitempty"`
}

func (StatusContext) IsNode() {}

// ID of the object.
func (this StatusContext) GetID() string { return this.ID }

func (StatusContext) IsRequirableByPullRequest() {}

// Whether this is required to pass before merging for a specific pull request.
func (this StatusContext) GetIsRequired() bool { return this.IsRequired }

func (StatusContext) IsStatusCheckRollupContext() {}

// Represents a count of the state of a status context.
type StatusContextStateCount struct {
	// The number of statuses with this state.
	Count int64 `json:"count"`
	// The state of a status context.
	State StatusState `json:"state"`
}

// A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
type StripeConnectAccount struct {
	// The account number used to identify this Stripe Connect account.
	AccountID string `json:"accountId"`
	// The name of the country or region of an external account, such as a bank account, tied to the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
	BillingCountryOrRegion *string `json:"billingCountryOrRegion,omitempty"`
	// The name of the country or region of the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`
	// Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
	IsActive bool `json:"isActive"`
	// The GitHub Sponsors profile associated with this Stripe Connect account.
	SponsorsListing SponsorsListing `json:"sponsorsListing"`
	// The URL to access this Stripe Connect account on Stripe's website.
	StripeDashboardURL string `json:"stripeDashboardUrl"`
}

// Autogenerated input type of SubmitPullRequestReview
type SubmitPullRequestReviewInput struct {
	// The Pull Request ID to submit any pending reviews.
	PullRequestID *string `json:"pullRequestId,omitempty"`
	// The Pull Request Review ID to submit.
	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
	// The event to send to the Pull Request Review.
	Event PullRequestReviewEvent `json:"event"`
	// The text field to set on the Pull Request Review.
	Body *string `json:"body,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of SubmitPullRequestReview
type SubmitPullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The submitted pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

// A pointer to a repository at a specific revision embedded inside another repository.
type Submodule struct {
	// The branch of the upstream submodule for tracking updates
	Branch *string `json:"branch,omitempty"`
	// The git URL of the submodule repository
	GitURL string `json:"gitUrl"`
	// The name of the submodule in .gitmodules
	Name string `json:"name"`
	// The name of the submodule in .gitmodules (Base64-encoded)
	NameRaw string `json:"nameRaw"`
	// The path in the superproject that this submodule is located in
	Path string `json:"path"`
	// The path in the superproject that this submodule is located in (Base64-encoded)
	PathRaw string `json:"pathRaw"`
	// The commit revision of the subproject repository being tracked by the submodule
	SubprojectCommitOid *string `json:"subprojectCommitOid,omitempty"`
}

// The connection type for Submodule.
type SubmoduleConnection struct {
	// A list of edges.
	Edges []*SubmoduleEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Submodule `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type SubmoduleEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Submodule `json:"node,omitempty"`
}

// Represents a 'subscribed' event on a given `Subscribable`.
type SubscribedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Object referenced by event.
	Subscribable Subscribable `json:"subscribable"`
}

func (SubscribedEvent) IsIssueTimelineItem() {}

func (SubscribedEvent) IsIssueTimelineItems() {}

func (SubscribedEvent) IsNode() {}

// ID of the object.
func (this SubscribedEvent) GetID() string { return this.ID }

func (SubscribedEvent) IsPullRequestTimelineItem() {}

func (SubscribedEvent) IsPullRequestTimelineItems() {}

// A suggestion to review a pull request based on a user's commit history and review comments.
type SuggestedReviewer struct {
	// Is this suggestion based on past commits?
	IsAuthor bool `json:"isAuthor"`
	// Is this suggestion based on past review comments?
	IsCommenter bool `json:"isCommenter"`
	// Identifies the user suggested to review the pull request.
	Reviewer User `json:"reviewer"`
}

// Represents a Git tag.
type Tag struct {
	// An abbreviated version of the Git object ID
	AbbreviatedOid string `json:"abbreviatedOid"`
	// The HTTP path for this Git object
	CommitResourcePath string `json:"commitResourcePath"`
	// The HTTP URL for this Git object
	CommitURL string `json:"commitUrl"`
	ID        string `json:"id"`
	// The Git tag message.
	Message *string `json:"message,omitempty"`
	// The Git tag name.
	Name string `json:"name"`
	// The Git object ID
	Oid string `json:"oid"`
	// The Repository the Git object belongs to
	Repository Repository `json:"repository"`
	// Details about the tag author.
	Tagger *GitActor `json:"tagger,omitempty"`
	// The Git object the tag points to.
	Target GitObject `json:"target"`
}

func (Tag) IsGitObject() {}

// An abbreviated version of the Git object ID
func (this Tag) GetAbbreviatedOid() string { return this.AbbreviatedOid }

// The HTTP path for this Git object
func (this Tag) GetCommitResourcePath() string { return this.CommitResourcePath }

// The HTTP URL for this Git object
func (this Tag) GetCommitURL() string { return this.CommitURL }
func (this Tag) GetID() string        { return this.ID }

// The Git object ID
func (this Tag) GetOid() string { return this.Oid }

// The Repository the Git object belongs to
func (this Tag) GetRepository() Repository { return this.Repository }

func (Tag) IsNode() {}

// ID of the object.

// Parameters to be used for the tag_name_pattern rule
type TagNamePatternParameters struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

func (TagNamePatternParameters) IsRuleParameters() {}

// Parameters to be used for the tag_name_pattern rule
type TagNamePatternParametersInput struct {
	// How this rule will appear to users.
	Name *string `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches.
	Negate *bool `json:"negate,omitempty"`
	// The operator to use for matching.
	Operator string `json:"operator"`
	// The pattern to match with.
	Pattern string `json:"pattern"`
}

// A team of users in an organization.
type Team struct {
	// A list of teams that are ancestors of this team.
	Ancestors TeamConnection `json:"ancestors"`
	// A URL pointing to the team's avatar.
	AvatarURL *string `json:"avatarUrl,omitempty"`
	// List of child teams belonging to this team
	ChildTeams TeamConnection `json:"childTeams"`
	// The slug corresponding to the organization and team.
	CombinedSlug string `json:"combinedSlug"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The description of the team.
	Description *string `json:"description,omitempty"`
	// Find a team discussion by its number.
	Discussion *TeamDiscussion `json:"discussion,omitempty"`
	// A list of team discussions.
	Discussions TeamDiscussionConnection `json:"discussions"`
	// The HTTP path for team discussions
	DiscussionsResourcePath string `json:"discussionsResourcePath"`
	// The HTTP URL for team discussions
	DiscussionsURL string `json:"discussionsUrl"`
	// The HTTP path for editing this team
	EditTeamResourcePath string `json:"editTeamResourcePath"`
	// The HTTP URL for editing this team
	EditTeamURL string `json:"editTeamUrl"`
	ID          string `json:"id"`
	// A list of pending invitations for users to this team
	Invitations *OrganizationInvitationConnection `json:"invitations,omitempty"`
	// Get the status messages members of this entity have set that are either public or visible only to the organization.
	MemberStatuses UserStatusConnection `json:"memberStatuses"`
	// A list of users who are members of this team.
	Members TeamMemberConnection `json:"members"`
	// The HTTP path for the team' members
	MembersResourcePath string `json:"membersResourcePath"`
	// The HTTP URL for the team' members
	MembersURL string `json:"membersUrl"`
	// The name of the team.
	Name string `json:"name"`
	// The HTTP path creating a new team
	NewTeamResourcePath string `json:"newTeamResourcePath"`
	// The HTTP URL creating a new team
	NewTeamURL string `json:"newTeamUrl"`
	// The notification setting that the team has set.
	NotificationSetting TeamNotificationSetting `json:"notificationSetting"`
	// The organization that owns this team.
	Organization Organization `json:"organization"`
	// The parent team of the team.
	ParentTeam *Team `json:"parentTeam,omitempty"`
	// The level of privacy the team has.
	Privacy TeamPrivacy `json:"privacy"`
	// Finds and returns the project according to the provided project number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// List of projects this team has collaborator access to.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// A list of repositories this team has access to.
	Repositories TeamRepositoryConnection `json:"repositories"`
	// The HTTP path for this team's repositories
	RepositoriesResourcePath string `json:"repositoriesResourcePath"`
	// The HTTP URL for this team's repositories
	RepositoriesURL string `json:"repositoriesUrl"`
	// The HTTP path for this team
	ResourcePath string `json:"resourcePath"`
	// The slug corresponding to the team.
	Slug string `json:"slug"`
	// The HTTP path for this team's teams
	TeamsResourcePath string `json:"teamsResourcePath"`
	// The HTTP URL for this team's teams
	TeamsURL string `json:"teamsUrl"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this team
	URL string `json:"url"`
	// Team is adminable by the viewer.
	ViewerCanAdminister bool `json:"viewerCanAdminister"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (Team) IsBranchActorAllowanceActor() {}

func (Team) IsBypassActor() {}

func (Team) IsDeploymentReviewer() {}

func (Team) IsMemberStatusable() {}

// Get the status messages members of this entity have set that are either public or visible only to the organization.
func (this Team) GetMemberStatuses() UserStatusConnection { return this.MemberStatuses }

func (Team) IsNode() {}

// ID of the object.
func (this Team) GetID() string { return this.ID }

func (Team) IsNotificationsList() {}

func (Team) IsPermissionGranter() {}

func (Team) IsProjectV2Actor() {}

func (Team) IsPushAllowanceActor() {}

func (Team) IsRequestedReviewer() {}

func (Team) IsReviewDismissalAllowanceActor() {}

func (Team) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this Team) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this Team) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

// Audit log entry for a team.add_member event.
type TeamAddMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the team was mapped to an LDAP Group.
	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (TeamAddMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this TeamAddMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this TeamAddMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this TeamAddMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this TeamAddMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this TeamAddMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this TeamAddMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this TeamAddMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this TeamAddMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this TeamAddMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this TeamAddMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this TeamAddMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this TeamAddMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this TeamAddMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (TeamAddMemberAuditEntry) IsNode() {}

// ID of the object.
func (this TeamAddMemberAuditEntry) GetID() string { return this.ID }

func (TeamAddMemberAuditEntry) IsOrganizationAuditEntry() {}

func (TeamAddMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this TeamAddMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this TeamAddMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this TeamAddMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this TeamAddMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (TeamAddMemberAuditEntry) IsTeamAuditEntryData() {}

// The team associated with the action
func (this TeamAddMemberAuditEntry) GetTeam() *Team { return this.Team }

// The name of the team
func (this TeamAddMemberAuditEntry) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this TeamAddMemberAuditEntry) GetTeamResourcePath() *string { return this.TeamResourcePath }

// The HTTP URL for this team
func (this TeamAddMemberAuditEntry) GetTeamURL() *string { return this.TeamURL }

// Audit log entry for a team.add_repository event.
type TeamAddRepositoryAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the team was mapped to an LDAP Group.
	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (TeamAddRepositoryAuditEntry) IsAuditEntry() {}

// The action name
func (this TeamAddRepositoryAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this TeamAddRepositoryAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this TeamAddRepositoryAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this TeamAddRepositoryAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this TeamAddRepositoryAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this TeamAddRepositoryAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this TeamAddRepositoryAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this TeamAddRepositoryAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this TeamAddRepositoryAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this TeamAddRepositoryAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this TeamAddRepositoryAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this TeamAddRepositoryAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this TeamAddRepositoryAuditEntry) GetUserURL() *string { return this.UserURL }

func (TeamAddRepositoryAuditEntry) IsNode() {}

// ID of the object.
func (this TeamAddRepositoryAuditEntry) GetID() string { return this.ID }

func (TeamAddRepositoryAuditEntry) IsOrganizationAuditEntry() {}

func (TeamAddRepositoryAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this TeamAddRepositoryAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this TeamAddRepositoryAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this TeamAddRepositoryAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this TeamAddRepositoryAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (TeamAddRepositoryAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this TeamAddRepositoryAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this TeamAddRepositoryAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this TeamAddRepositoryAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this TeamAddRepositoryAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

func (TeamAddRepositoryAuditEntry) IsTeamAuditEntryData() {}

// The team associated with the action
func (this TeamAddRepositoryAuditEntry) GetTeam() *Team { return this.Team }

// The name of the team
func (this TeamAddRepositoryAuditEntry) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this TeamAddRepositoryAuditEntry) GetTeamResourcePath() *string { return this.TeamResourcePath }

// The HTTP URL for this team
func (this TeamAddRepositoryAuditEntry) GetTeamURL() *string { return this.TeamURL }

// Audit log entry for a team.change_parent_team event.
type TeamChangeParentTeamAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the team was mapped to an LDAP Group.
	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The new parent team.
	ParentTeam *Team `json:"parentTeam,omitempty"`
	// The name of the new parent team
	ParentTeamName *string `json:"parentTeamName,omitempty"`
	// The name of the former parent team
	ParentTeamNameWas *string `json:"parentTeamNameWas,omitempty"`
	// The HTTP path for the parent team
	ParentTeamResourcePath *string `json:"parentTeamResourcePath,omitempty"`
	// The HTTP URL for the parent team
	ParentTeamURL *string `json:"parentTeamUrl,omitempty"`
	// The former parent team.
	ParentTeamWas *Team `json:"parentTeamWas,omitempty"`
	// The HTTP path for the previous parent team
	ParentTeamWasResourcePath *string `json:"parentTeamWasResourcePath,omitempty"`
	// The HTTP URL for the previous parent team
	ParentTeamWasURL *string `json:"parentTeamWasUrl,omitempty"`
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (TeamChangeParentTeamAuditEntry) IsAuditEntry() {}

// The action name
func (this TeamChangeParentTeamAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this TeamChangeParentTeamAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this TeamChangeParentTeamAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this TeamChangeParentTeamAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this TeamChangeParentTeamAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this TeamChangeParentTeamAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this TeamChangeParentTeamAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this TeamChangeParentTeamAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this TeamChangeParentTeamAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this TeamChangeParentTeamAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this TeamChangeParentTeamAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this TeamChangeParentTeamAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this TeamChangeParentTeamAuditEntry) GetUserURL() *string { return this.UserURL }

func (TeamChangeParentTeamAuditEntry) IsNode() {}

// ID of the object.
func (this TeamChangeParentTeamAuditEntry) GetID() string { return this.ID }

func (TeamChangeParentTeamAuditEntry) IsOrganizationAuditEntry() {}

func (TeamChangeParentTeamAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this TeamChangeParentTeamAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this TeamChangeParentTeamAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this TeamChangeParentTeamAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this TeamChangeParentTeamAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (TeamChangeParentTeamAuditEntry) IsTeamAuditEntryData() {}

// The team associated with the action
func (this TeamChangeParentTeamAuditEntry) GetTeam() *Team { return this.Team }

// The name of the team
func (this TeamChangeParentTeamAuditEntry) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this TeamChangeParentTeamAuditEntry) GetTeamResourcePath() *string {
	return this.TeamResourcePath
}

// The HTTP URL for this team
func (this TeamChangeParentTeamAuditEntry) GetTeamURL() *string { return this.TeamURL }

// The connection type for Team.
type TeamConnection struct {
	// A list of edges.
	Edges []*TeamEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Team `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// A team discussion.
type TeamDiscussion struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the discussion's team.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The body as Markdown.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// Identifies the discussion body hash.
	BodyVersion string `json:"bodyVersion"`
	// A list of comments on this discussion.
	Comments TeamDiscussionCommentConnection `json:"comments"`
	// The HTTP path for discussion comments
	CommentsResourcePath string `json:"commentsResourcePath"`
	// The HTTP URL for discussion comments
	CommentsURL string `json:"commentsUrl"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// Whether or not the discussion is pinned.
	IsPinned bool `json:"isPinned"`
	// Whether or not the discussion is only visible to team members and org admins.
	IsPrivate bool `json:"isPrivate"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Identifies the discussion within its team.
	Number int64 `json:"number"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The HTTP path for this discussion
	ResourcePath string `json:"resourcePath"`
	// The team that defines the context of this discussion.
	Team Team `json:"team"`
	// The title of the discussion
	Title string `json:"title"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this discussion
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Whether or not the current viewer can pin this discussion.
	ViewerCanPin bool `json:"viewerCanPin"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (TeamDiscussion) IsComment() {}

// The actor who authored the comment.
func (this TeamDiscussion) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this TeamDiscussion) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this TeamDiscussion) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this TeamDiscussion) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this TeamDiscussion) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this TeamDiscussion) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this TeamDiscussion) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this TeamDiscussion) GetEditor() Actor { return this.Editor }
func (this TeamDiscussion) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this TeamDiscussion) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this TeamDiscussion) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this TeamDiscussion) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this TeamDiscussion) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this TeamDiscussion) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this TeamDiscussion) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (TeamDiscussion) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this TeamDiscussion) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (TeamDiscussion) IsNode() {}

// ID of the object.

func (TeamDiscussion) IsNotificationsSubject() {}

func (TeamDiscussion) IsReactable() {}

// Identifies the primary key from the database.
func (this TeamDiscussion) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this TeamDiscussion) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this TeamDiscussion) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this TeamDiscussion) GetViewerCanReact() bool { return this.ViewerCanReact }

func (TeamDiscussion) IsSubscribable() {}

// Check if the viewer is able to change their subscription status for the repository.
func (this TeamDiscussion) GetViewerCanSubscribe() bool { return this.ViewerCanSubscribe }

// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
func (this TeamDiscussion) GetViewerSubscription() *SubscriptionState { return this.ViewerSubscription }

func (TeamDiscussion) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this TeamDiscussion) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this TeamDiscussion) GetURL() string { return this.URL }

func (TeamDiscussion) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this TeamDiscussion) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (TeamDiscussion) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this TeamDiscussion) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A comment on a team discussion.
type TeamDiscussionComment struct {
	// The actor who authored the comment.
	Author Actor `json:"author,omitempty"`
	// Author's association with the comment's team.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
	// The body as Markdown.
	Body string `json:"body"`
	// The body rendered to HTML.
	BodyHTML string `json:"bodyHTML"`
	// The body rendered to text.
	BodyText string `json:"bodyText"`
	// The current version of the body content.
	BodyVersion string `json:"bodyVersion"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The discussion this comment is about.
	Discussion TeamDiscussion `json:"discussion"`
	// The actor who edited the comment.
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Check if this comment was edited and includes an edit with the creation data
	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
	// The moment the editor made the last edit
	LastEditedAt *string `json:"lastEditedAt,omitempty"`
	// Identifies the comment number.
	Number int64 `json:"number"`
	// Identifies when the comment was published at.
	PublishedAt *string `json:"publishedAt,omitempty"`
	// A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
	// A list of Reactions left on the Issue.
	Reactions ReactionConnection `json:"reactions"`
	// The HTTP path for this comment
	ResourcePath string `json:"resourcePath"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this comment
	URL string `json:"url"`
	// A list of edits to this content.
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
	// Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete"`
	// Can user react to this subject
	ViewerCanReact bool `json:"viewerCanReact"`
	// Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate"`
	// Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
	// Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor"`
}

func (TeamDiscussionComment) IsComment() {}

// The actor who authored the comment.
func (this TeamDiscussionComment) GetAuthor() Actor { return this.Author }

// Author's association with the subject of the comment.
func (this TeamDiscussionComment) GetAuthorAssociation() CommentAuthorAssociation {
	return this.AuthorAssociation
}

// The body as Markdown.
func (this TeamDiscussionComment) GetBody() string { return this.Body }

// The body rendered to HTML.
func (this TeamDiscussionComment) GetBodyHTML() string { return this.BodyHTML }

// The body rendered to text.
func (this TeamDiscussionComment) GetBodyText() string { return this.BodyText }

// Identifies the date and time when the object was created.
func (this TeamDiscussionComment) GetCreatedAt() string { return this.CreatedAt }

// Check if this comment was created via an email reply.
func (this TeamDiscussionComment) GetCreatedViaEmail() bool { return this.CreatedViaEmail }

// The actor who edited the comment.
func (this TeamDiscussionComment) GetEditor() Actor { return this.Editor }
func (this TeamDiscussionComment) GetID() string    { return this.ID }

// Check if this comment was edited and includes an edit with the creation data
func (this TeamDiscussionComment) GetIncludesCreatedEdit() bool { return this.IncludesCreatedEdit }

// The moment the editor made the last edit
func (this TeamDiscussionComment) GetLastEditedAt() *string { return this.LastEditedAt }

// Identifies when the comment was published at.
func (this TeamDiscussionComment) GetPublishedAt() *string { return this.PublishedAt }

// Identifies the date and time when the object was last updated.
func (this TeamDiscussionComment) GetUpdatedAt() string { return this.UpdatedAt }

// A list of edits to this content.
func (this TeamDiscussionComment) GetUserContentEdits() *UserContentEditConnection {
	return this.UserContentEdits
}

// Did the viewer author this comment.
func (this TeamDiscussionComment) GetViewerDidAuthor() bool { return this.ViewerDidAuthor }

func (TeamDiscussionComment) IsDeletable() {}

// Check if the current viewer can delete this object.
func (this TeamDiscussionComment) GetViewerCanDelete() bool { return this.ViewerCanDelete }

func (TeamDiscussionComment) IsNode() {}

// ID of the object.

func (TeamDiscussionComment) IsReactable() {}

// Identifies the primary key from the database.
func (this TeamDiscussionComment) GetDatabaseID() *int64 { return this.DatabaseID }

// A list of reactions grouped by content left on the subject.
func (this TeamDiscussionComment) GetReactionGroups() []*ReactionGroup {
	if this.ReactionGroups == nil {
		return nil
	}
	interfaceSlice := make([]*ReactionGroup, 0, len(this.ReactionGroups))
	for _, concrete := range this.ReactionGroups {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// A list of Reactions left on the Issue.
func (this TeamDiscussionComment) GetReactions() ReactionConnection { return this.Reactions }

// Can user react to this subject
func (this TeamDiscussionComment) GetViewerCanReact() bool { return this.ViewerCanReact }

func (TeamDiscussionComment) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this TeamDiscussionComment) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this TeamDiscussionComment) GetURL() string { return this.URL }

func (TeamDiscussionComment) IsUpdatable() {}

// Check if the current viewer can update this object.
func (this TeamDiscussionComment) GetViewerCanUpdate() bool { return this.ViewerCanUpdate }

func (TeamDiscussionComment) IsUpdatableComment() {}

// Reasons why the current viewer can not update this comment.
func (this TeamDiscussionComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	if this.ViewerCannotUpdateReasons == nil {
		return nil
	}
	interfaceSlice := make([]CommentCannotUpdateReason, 0, len(this.ViewerCannotUpdateReasons))
	for _, concrete := range this.ViewerCannotUpdateReasons {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

// The connection type for TeamDiscussionComment.
type TeamDiscussionCommentConnection struct {
	// A list of edges.
	Edges []*TeamDiscussionCommentEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*TeamDiscussionComment `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type TeamDiscussionCommentEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *TeamDiscussionComment `json:"node,omitempty"`
}

// Ways in which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrder struct {
	// The field by which to order nodes.
	Field TeamDiscussionCommentOrderField `json:"field"`
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
}

// The connection type for TeamDiscussion.
type TeamDiscussionConnection struct {
	// A list of edges.
	Edges []*TeamDiscussionEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*TeamDiscussion `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type TeamDiscussionEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *TeamDiscussion `json:"node,omitempty"`
}

// Ways in which team discussion connections can be ordered.
type TeamDiscussionOrder struct {
	// The field by which to order nodes.
	Field TeamDiscussionOrderField `json:"field"`
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
}

// An edge in a connection.
type TeamEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *Team `json:"node,omitempty"`
}

// The connection type for User.
type TeamMemberConnection struct {
	// A list of edges.
	Edges []*TeamMemberEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a user who is a member of a team.
type TeamMemberEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The HTTP path to the organization's member access page.
	MemberAccessResourcePath string `json:"memberAccessResourcePath"`
	// The HTTP URL to the organization's member access page.
	MemberAccessURL string `json:"memberAccessUrl"`
	Node            User   `json:"node"`
	// The role the member has on the team.
	Role TeamMemberRole `json:"role"`
}

// Ordering options for team member connections
type TeamMemberOrder struct {
	// The field to order team members by.
	Field TeamMemberOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Ways in which team connections can be ordered.
type TeamOrder struct {
	// The field in which to order nodes by.
	Field TeamOrderField `json:"field"`
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
}

// Audit log entry for a team.remove_member event.
type TeamRemoveMemberAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the team was mapped to an LDAP Group.
	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (TeamRemoveMemberAuditEntry) IsAuditEntry() {}

// The action name
func (this TeamRemoveMemberAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this TeamRemoveMemberAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this TeamRemoveMemberAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this TeamRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return this.ActorLocation }

// The username of the user who initiated the action
func (this TeamRemoveMemberAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this TeamRemoveMemberAuditEntry) GetActorResourcePath() *string { return this.ActorResourcePath }

// The HTTP URL for the actor.
func (this TeamRemoveMemberAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this TeamRemoveMemberAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this TeamRemoveMemberAuditEntry) GetOperationType() *OperationType { return this.OperationType }

// The user affected by the action
func (this TeamRemoveMemberAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this TeamRemoveMemberAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this TeamRemoveMemberAuditEntry) GetUserResourcePath() *string { return this.UserResourcePath }

// The HTTP URL for the user.
func (this TeamRemoveMemberAuditEntry) GetUserURL() *string { return this.UserURL }

func (TeamRemoveMemberAuditEntry) IsNode() {}

// ID of the object.
func (this TeamRemoveMemberAuditEntry) GetID() string { return this.ID }

func (TeamRemoveMemberAuditEntry) IsOrganizationAuditEntry() {}

func (TeamRemoveMemberAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this TeamRemoveMemberAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this TeamRemoveMemberAuditEntry) GetOrganizationName() *string { return this.OrganizationName }

// The HTTP path for the organization
func (this TeamRemoveMemberAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this TeamRemoveMemberAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (TeamRemoveMemberAuditEntry) IsTeamAuditEntryData() {}

// The team associated with the action
func (this TeamRemoveMemberAuditEntry) GetTeam() *Team { return this.Team }

// The name of the team
func (this TeamRemoveMemberAuditEntry) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this TeamRemoveMemberAuditEntry) GetTeamResourcePath() *string { return this.TeamResourcePath }

// The HTTP URL for this team
func (this TeamRemoveMemberAuditEntry) GetTeamURL() *string { return this.TeamURL }

// Audit log entry for a team.remove_repository event.
type TeamRemoveRepositoryAuditEntry struct {
	// The action name
	Action string `json:"action"`
	// The user who initiated the action
	Actor AuditEntryActor `json:"actor,omitempty"`
	// The IP address of the actor
	ActorIP *string `json:"actorIp,omitempty"`
	// A readable representation of the actor's location
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
	// The username of the user who initiated the action
	ActorLogin *string `json:"actorLogin,omitempty"`
	// The HTTP path for the actor.
	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
	// The HTTP URL for the actor.
	ActorURL *string `json:"actorUrl,omitempty"`
	// The time the action was initiated
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Whether the team was mapped to an LDAP Group.
	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
	// The corresponding operation type for the action
	OperationType *OperationType `json:"operationType,omitempty"`
	// The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`
	// The name of the Organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The HTTP path for the organization
	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
	// The HTTP URL for the organization
	OrganizationURL *string `json:"organizationUrl,omitempty"`
	// The repository associated with the action
	Repository *Repository `json:"repository,omitempty"`
	// The name of the repository
	RepositoryName *string `json:"repositoryName,omitempty"`
	// The HTTP path for the repository
	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
	// The HTTP URL for the repository
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
	// The team associated with the action
	Team *Team `json:"team,omitempty"`
	// The name of the team
	TeamName *string `json:"teamName,omitempty"`
	// The HTTP path for this team
	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
	// The HTTP URL for this team
	TeamURL *string `json:"teamUrl,omitempty"`
	// The user affected by the action
	User *User `json:"user,omitempty"`
	// For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin *string `json:"userLogin,omitempty"`
	// The HTTP path for the user.
	UserResourcePath *string `json:"userResourcePath,omitempty"`
	// The HTTP URL for the user.
	UserURL *string `json:"userUrl,omitempty"`
}

func (TeamRemoveRepositoryAuditEntry) IsAuditEntry() {}

// The action name
func (this TeamRemoveRepositoryAuditEntry) GetAction() string { return this.Action }

// The user who initiated the action
func (this TeamRemoveRepositoryAuditEntry) GetActor() AuditEntryActor { return this.Actor }

// The IP address of the actor
func (this TeamRemoveRepositoryAuditEntry) GetActorIP() *string { return this.ActorIP }

// A readable representation of the actor's location
func (this TeamRemoveRepositoryAuditEntry) GetActorLocation() *ActorLocation {
	return this.ActorLocation
}

// The username of the user who initiated the action
func (this TeamRemoveRepositoryAuditEntry) GetActorLogin() *string { return this.ActorLogin }

// The HTTP path for the actor.
func (this TeamRemoveRepositoryAuditEntry) GetActorResourcePath() *string {
	return this.ActorResourcePath
}

// The HTTP URL for the actor.
func (this TeamRemoveRepositoryAuditEntry) GetActorURL() *string { return this.ActorURL }

// The time the action was initiated
func (this TeamRemoveRepositoryAuditEntry) GetCreatedAt() string { return this.CreatedAt }

// The corresponding operation type for the action
func (this TeamRemoveRepositoryAuditEntry) GetOperationType() *OperationType {
	return this.OperationType
}

// The user affected by the action
func (this TeamRemoveRepositoryAuditEntry) GetUser() *User { return this.User }

// For actions involving two users, the actor is the initiator and the user is the affected user.
func (this TeamRemoveRepositoryAuditEntry) GetUserLogin() *string { return this.UserLogin }

// The HTTP path for the user.
func (this TeamRemoveRepositoryAuditEntry) GetUserResourcePath() *string {
	return this.UserResourcePath
}

// The HTTP URL for the user.
func (this TeamRemoveRepositoryAuditEntry) GetUserURL() *string { return this.UserURL }

func (TeamRemoveRepositoryAuditEntry) IsNode() {}

// ID of the object.
func (this TeamRemoveRepositoryAuditEntry) GetID() string { return this.ID }

func (TeamRemoveRepositoryAuditEntry) IsOrganizationAuditEntry() {}

func (TeamRemoveRepositoryAuditEntry) IsOrganizationAuditEntryData() {}

// The Organization associated with the Audit Entry.
func (this TeamRemoveRepositoryAuditEntry) GetOrganization() *Organization { return this.Organization }

// The name of the Organization.
func (this TeamRemoveRepositoryAuditEntry) GetOrganizationName() *string {
	return this.OrganizationName
}

// The HTTP path for the organization
func (this TeamRemoveRepositoryAuditEntry) GetOrganizationResourcePath() *string {
	return this.OrganizationResourcePath
}

// The HTTP URL for the organization
func (this TeamRemoveRepositoryAuditEntry) GetOrganizationURL() *string { return this.OrganizationURL }

func (TeamRemoveRepositoryAuditEntry) IsRepositoryAuditEntryData() {}

// The repository associated with the action
func (this TeamRemoveRepositoryAuditEntry) GetRepository() *Repository { return this.Repository }

// The name of the repository
func (this TeamRemoveRepositoryAuditEntry) GetRepositoryName() *string { return this.RepositoryName }

// The HTTP path for the repository
func (this TeamRemoveRepositoryAuditEntry) GetRepositoryResourcePath() *string {
	return this.RepositoryResourcePath
}

// The HTTP URL for the repository
func (this TeamRemoveRepositoryAuditEntry) GetRepositoryURL() *string { return this.RepositoryURL }

func (TeamRemoveRepositoryAuditEntry) IsTeamAuditEntryData() {}

// The team associated with the action
func (this TeamRemoveRepositoryAuditEntry) GetTeam() *Team { return this.Team }

// The name of the team
func (this TeamRemoveRepositoryAuditEntry) GetTeamName() *string { return this.TeamName }

// The HTTP path for this team
func (this TeamRemoveRepositoryAuditEntry) GetTeamResourcePath() *string {
	return this.TeamResourcePath
}

// The HTTP URL for this team
func (this TeamRemoveRepositoryAuditEntry) GetTeamURL() *string { return this.TeamURL }

// The connection type for Repository.
type TeamRepositoryConnection struct {
	// A list of edges.
	Edges []*TeamRepositoryEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Represents a team repository.
type TeamRepositoryEdge struct {
	// A cursor for use in pagination.
	Cursor string     `json:"cursor"`
	Node   Repository `json:"node"`
	// The permission level the team has on the repository
	Permission RepositoryPermission `json:"permission"`
}

// Ordering options for team repository connections
type TeamRepositoryOrder struct {
	// The field to order repositories by.
	Field TeamRepositoryOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A text match within a search result.
type TextMatch struct {
	// The specific text fragment within the property matched on.
	Fragment string `json:"fragment"`
	// Highlights within the matched fragment.
	Highlights []*TextMatchHighlight `json:"highlights"`
	// The property matched on.
	Property string `json:"property"`
}

// Represents a single highlight in a search result match.
type TextMatchHighlight struct {
	// The indice in the fragment where the matched text begins.
	BeginIndice int64 `json:"beginIndice"`
	// The indice in the fragment where the matched text ends.
	EndIndice int64 `json:"endIndice"`
	// The text matched.
	Text string `json:"text"`
}

// A topic aggregates entities that are related to a subject.
type Topic struct {
	ID string `json:"id"`
	// The topic's name.
	Name string `json:"name"`
	// A list of related topics, including aliases of this topic, sorted with the most relevant
	// first. Returns up to 10 Topics.
	//
	RelatedTopics []*Topic `json:"relatedTopics"`
	// A list of repositories.
	Repositories RepositoryConnection `json:"repositories"`
	// Returns a count of how many stargazers there are on this object
	//
	StargazerCount int64 `json:"stargazerCount"`
	// A list of users who have starred this starrable.
	Stargazers StargazerConnection `json:"stargazers"`
	// Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred"`
}

func (Topic) IsNode() {}

// ID of the object.
func (this Topic) GetID() string { return this.ID }

func (Topic) IsStarrable() {}

// Returns a count of how many stargazers there are on this object
func (this Topic) GetStargazerCount() int64 { return this.StargazerCount }

// A list of users who have starred this starrable.
func (this Topic) GetStargazers() StargazerConnection { return this.Stargazers }

// Returns a boolean indicating whether the viewing user has starred this starrable.
func (this Topic) GetViewerHasStarred() bool { return this.ViewerHasStarred }

// Autogenerated input type of TransferEnterpriseOrganization
type TransferEnterpriseOrganizationInput struct {
	// The ID of the organization to transfer.
	OrganizationID string `json:"organizationId"`
	// The ID of the enterprise where the organization should be transferred.
	DestinationEnterpriseID string `json:"destinationEnterpriseId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of TransferEnterpriseOrganization
type TransferEnterpriseOrganizationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organization for which a transfer was initiated.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of TransferIssue
type TransferIssueInput struct {
	// The Node ID of the issue to be transferred
	IssueID string `json:"issueId"`
	// The Node ID of the repository the issue should be transferred to
	RepositoryID string `json:"repositoryId"`
	// Whether to create labels if they don't exist in the target repository (matched by name)
	CreateLabelsIfMissing *bool `json:"createLabelsIfMissing,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of TransferIssue
type TransferIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was transferred
	Issue *Issue `json:"issue,omitempty"`
}

// Represents a 'transferred' event on a given issue or pull request.
type TransferredEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The repository this came from
	FromRepository *Repository `json:"fromRepository,omitempty"`
	ID             string      `json:"id"`
	// Identifies the issue associated with the event.
	Issue Issue `json:"issue"`
}

func (TransferredEvent) IsIssueTimelineItem() {}

func (TransferredEvent) IsIssueTimelineItems() {}

func (TransferredEvent) IsNode() {}

// ID of the object.
func (this TransferredEvent) GetID() string { return this.ID }

func (TransferredEvent) IsPullRequestTimelineItems() {}

// Represents a Git tree.
type Tree struct {
	// An abbreviated version of the Git object ID
	AbbreviatedOid string `json:"abbreviatedOid"`
	// The HTTP path for this Git object
	CommitResourcePath string `json:"commitResourcePath"`
	// The HTTP URL for this Git object
	CommitURL string `json:"commitUrl"`
	// A list of tree entries.
	Entries []*TreeEntry `json:"entries,omitempty"`
	ID      string       `json:"id"`
	// The Git object ID
	Oid string `json:"oid"`
	// The Repository the Git object belongs to
	Repository Repository `json:"repository"`
}

func (Tree) IsGitObject() {}

// An abbreviated version of the Git object ID
func (this Tree) GetAbbreviatedOid() string { return this.AbbreviatedOid }

// The HTTP path for this Git object
func (this Tree) GetCommitResourcePath() string { return this.CommitResourcePath }

// The HTTP URL for this Git object
func (this Tree) GetCommitURL() string { return this.CommitURL }
func (this Tree) GetID() string        { return this.ID }

// The Git object ID
func (this Tree) GetOid() string { return this.Oid }

// The Repository the Git object belongs to
func (this Tree) GetRepository() Repository { return this.Repository }

func (Tree) IsNode() {}

// ID of the object.

// Represents a Git tree entry.
type TreeEntry struct {
	// The extension of the file
	Extension *string `json:"extension,omitempty"`
	// Whether or not this tree entry is generated
	IsGenerated bool `json:"isGenerated"`
	// The programming language this file is written in.
	Language *Language `json:"language,omitempty"`
	// Number of lines in the file.
	LineCount *int64 `json:"lineCount,omitempty"`
	// Entry file mode.
	Mode int64 `json:"mode"`
	// Entry file name.
	Name string `json:"name"`
	// Entry file name. (Base64-encoded)
	NameRaw string `json:"nameRaw"`
	// Entry file object.
	Object GitObject `json:"object,omitempty"`
	// Entry file Git object ID.
	Oid string `json:"oid"`
	// The full path of the file.
	Path *string `json:"path,omitempty"`
	// The full path of the file. (Base64-encoded)
	PathRaw *string `json:"pathRaw,omitempty"`
	// The Repository the tree entry belongs to
	Repository Repository `json:"repository"`
	// Entry byte size
	Size int64 `json:"size"`
	// If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
	Submodule *Submodule `json:"submodule,omitempty"`
	// Entry file type.
	Type string `json:"type"`
}

// Autogenerated input type of UnarchiveProjectV2Item
type UnarchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from.
	ProjectID string `json:"projectId"`
	// The ID of the ProjectV2Item to unarchive.
	ItemID string `json:"itemId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnarchiveProjectV2Item
type UnarchiveProjectV2ItemPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item unarchived from the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

// Autogenerated input type of UnarchiveRepository
type UnarchiveRepositoryInput struct {
	// The ID of the repository to unarchive.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnarchiveRepository
type UnarchiveRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository that was unarchived.
	Repository *Repository `json:"repository,omitempty"`
}

// Represents an 'unassigned' event on any assignable object.
type UnassignedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the assignable associated with the event.
	Assignable Assignable `json:"assignable"`
	// Identifies the user or mannequin that was unassigned.
	Assignee Assignee `json:"assignee,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the subject (user) who was unassigned.
	User *User `json:"user,omitempty"`
}

func (UnassignedEvent) IsIssueTimelineItem() {}

func (UnassignedEvent) IsIssueTimelineItems() {}

func (UnassignedEvent) IsNode() {}

// ID of the object.
func (this UnassignedEvent) GetID() string { return this.ID }

func (UnassignedEvent) IsPullRequestTimelineItem() {}

func (UnassignedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UnfollowOrganization
type UnfollowOrganizationInput struct {
	// ID of the organization to unfollow.
	OrganizationID string `json:"organizationId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnfollowOrganization
type UnfollowOrganizationPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The organization that was unfollowed.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of UnfollowUser
type UnfollowUserInput struct {
	// ID of the user to unfollow.
	UserID string `json:"userId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnfollowUser
type UnfollowUserPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The user that was unfollowed.
	User *User `json:"user,omitempty"`
}

// Represents an unknown signature on a Commit or Tag.
type UnknownSignature struct {
	// Email used to sign this object.
	Email string `json:"email"`
	// True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid"`
	// Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload"`
	// ASCII-armored signature header from object.
	Signature string `json:"signature"`
	// GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`
	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state"`
	// True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub"`
}

func (UnknownSignature) IsGitSignature() {}

// Email used to sign this object.
func (this UnknownSignature) GetEmail() string { return this.Email }

// True if the signature is valid and verified by GitHub.
func (this UnknownSignature) GetIsValid() bool { return this.IsValid }

// Payload for GPG signing object. Raw ODB object without the signature header.
func (this UnknownSignature) GetPayload() string { return this.Payload }

// ASCII-armored signature header from object.
func (this UnknownSignature) GetSignature() string { return this.Signature }

// GitHub user corresponding to the email signing this commit.
func (this UnknownSignature) GetSigner() *User { return this.Signer }

// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
func (this UnknownSignature) GetState() GitSignatureState { return this.State }

// True if the signature was made with GitHub's signing key.
func (this UnknownSignature) GetWasSignedByGitHub() bool { return this.WasSignedByGitHub }

// Represents an 'unlabeled' event on a given issue or pull request.
type UnlabeledEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the label associated with the 'unlabeled' event.
	Label Label `json:"label"`
	// Identifies the `Labelable` associated with the event.
	Labelable Labelable `json:"labelable"`
}

func (UnlabeledEvent) IsIssueTimelineItem() {}

func (UnlabeledEvent) IsIssueTimelineItems() {}

func (UnlabeledEvent) IsNode() {}

// ID of the object.
func (this UnlabeledEvent) GetID() string { return this.ID }

func (UnlabeledEvent) IsPullRequestTimelineItem() {}

func (UnlabeledEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UnlinkProjectV2FromRepository
type UnlinkProjectV2FromRepositoryInput struct {
	// The ID of the project to unlink from the repository.
	ProjectID string `json:"projectId"`
	// The ID of the repository to unlink from the project.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnlinkProjectV2FromRepository
type UnlinkProjectV2FromRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository the project is no longer linked to.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of UnlinkProjectV2FromTeam
type UnlinkProjectV2FromTeamInput struct {
	// The ID of the project to unlink from the team.
	ProjectID string `json:"projectId"`
	// The ID of the team to unlink from the project.
	TeamID string `json:"teamId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnlinkProjectV2FromTeam
type UnlinkProjectV2FromTeamPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The team the project is unlinked from
	Team *Team `json:"team,omitempty"`
}

// Autogenerated input type of UnlinkRepositoryFromProject
type UnlinkRepositoryFromProjectInput struct {
	// The ID of the Project linked to the Repository.
	ProjectID string `json:"projectId"`
	// The ID of the Repository linked to the Project.
	RepositoryID string `json:"repositoryId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnlinkRepositoryFromProject
type UnlinkRepositoryFromProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The linked Project.
	Project *Project `json:"project,omitempty"`
	// The linked Repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of UnlockLockable
type UnlockLockableInput struct {
	// ID of the item to be unlocked.
	LockableID string `json:"lockableId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnlockLockable
type UnlockLockablePayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The item that was unlocked.
	UnlockedRecord Lockable `json:"unlockedRecord,omitempty"`
}

// Represents an 'unlocked' event on a given issue or pull request.
type UnlockedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Object that was unlocked.
	Lockable Lockable `json:"lockable"`
}

func (UnlockedEvent) IsIssueTimelineItem() {}

func (UnlockedEvent) IsIssueTimelineItems() {}

func (UnlockedEvent) IsNode() {}

// ID of the object.
func (this UnlockedEvent) GetID() string { return this.ID }

func (UnlockedEvent) IsPullRequestTimelineItem() {}

func (UnlockedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UnmarkDiscussionCommentAsAnswer
type UnmarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to unmark as an answer.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnmarkDiscussionCommentAsAnswer
type UnmarkDiscussionCommentAsAnswerPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The discussion that includes the comment.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of UnmarkFileAsViewed
type UnmarkFileAsViewedInput struct {
	// The Node ID of the pull request.
	PullRequestID string `json:"pullRequestId"`
	// The path of the file to mark as unviewed
	Path string `json:"path"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnmarkFileAsViewed
type UnmarkFileAsViewedPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of UnmarkIssueAsDuplicate
type UnmarkIssueAsDuplicateInput struct {
	// ID of the issue or pull request currently marked as a duplicate.
	DuplicateID string `json:"duplicateId"`
	// ID of the issue or pull request currently considered canonical/authoritative/original.
	CanonicalID string `json:"canonicalId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnmarkIssueAsDuplicate
type UnmarkIssueAsDuplicatePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue or pull request that was marked as a duplicate.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
}

// Autogenerated input type of UnmarkProjectV2AsTemplate
type UnmarkProjectV2AsTemplateInput struct {
	// The ID of the Project to unmark as a template.
	ProjectID string `json:"projectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnmarkProjectV2AsTemplate
type UnmarkProjectV2AsTemplatePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
type UnmarkedAsDuplicateEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// The authoritative issue or pull request which has been duplicated by another.
	Canonical IssueOrPullRequest `json:"canonical,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// The issue or pull request which has been marked as a duplicate of another.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
	ID        string             `json:"id"`
	// Canonical and duplicate belong to different repositories.
	IsCrossRepository bool `json:"isCrossRepository"`
}

func (UnmarkedAsDuplicateEvent) IsIssueTimelineItems() {}

func (UnmarkedAsDuplicateEvent) IsNode() {}

// ID of the object.
func (this UnmarkedAsDuplicateEvent) GetID() string { return this.ID }

func (UnmarkedAsDuplicateEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UnminimizeComment
type UnminimizeCommentInput struct {
	// The Node ID of the subject to modify.
	SubjectID string `json:"subjectId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnminimizeComment
type UnminimizeCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The comment that was unminimized.
	UnminimizedComment Minimizable `json:"unminimizedComment,omitempty"`
}

// Autogenerated input type of UnpinIssue
type UnpinIssueInput struct {
	// The ID of the issue to be unpinned
	IssueID string `json:"issueId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnpinIssue
type UnpinIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue that was unpinned
	Issue *Issue `json:"issue,omitempty"`
}

// Represents an 'unpinned' event on a given issue or pull request.
type UnpinnedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Identifies the issue associated with the event.
	Issue Issue `json:"issue"`
}

func (UnpinnedEvent) IsIssueTimelineItems() {}

func (UnpinnedEvent) IsNode() {}

// ID of the object.
func (this UnpinnedEvent) GetID() string { return this.ID }

func (UnpinnedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UnresolveReviewThread
type UnresolveReviewThreadInput struct {
	// The ID of the thread to unresolve
	ThreadID string `json:"threadId"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UnresolveReviewThread
type UnresolveReviewThreadPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The thread to resolve.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

// Represents an 'unsubscribed' event on a given `Subscribable`.
type UnsubscribedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// Object referenced by event.
	Subscribable Subscribable `json:"subscribable"`
}

func (UnsubscribedEvent) IsIssueTimelineItem() {}

func (UnsubscribedEvent) IsIssueTimelineItems() {}

func (UnsubscribedEvent) IsNode() {}

// ID of the object.
func (this UnsubscribedEvent) GetID() string { return this.ID }

func (UnsubscribedEvent) IsPullRequestTimelineItem() {}

func (UnsubscribedEvent) IsPullRequestTimelineItems() {}

// Autogenerated input type of UpdateBranchProtectionRule
type UpdateBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be updated.
	BranchProtectionRuleID string `json:"branchProtectionRuleId"`
	// The glob-like pattern used to determine matching branches.
	Pattern *string `json:"pattern,omitempty"`
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews *bool `json:"requiresApprovingReviews,omitempty"`
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty"`
	// Are commits required to be signed.
	RequiresCommitSignatures *bool `json:"requiresCommitSignatures,omitempty"`
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory *bool `json:"requiresLinearHistory,omitempty"`
	// Is branch creation a protected operation.
	BlocksCreations *bool `json:"blocksCreations,omitempty"`
	// Are force pushes allowed on this branch.
	AllowsForcePushes *bool `json:"allowsForcePushes,omitempty"`
	// Can this branch be deleted.
	AllowsDeletions *bool `json:"allowsDeletions,omitempty"`
	// Can admins overwrite branch protection.
	IsAdminEnforced *bool `json:"isAdminEnforced,omitempty"`
	// Are status checks required to update matching branches.
	RequiresStatusChecks *bool `json:"requiresStatusChecks,omitempty"`
	// Are branches required to be up to date before merging.
	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks,omitempty"`
	// Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews,omitempty"`
	// Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews *bool `json:"dismissesStaleReviews,omitempty"`
	// Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals,omitempty"`
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	BypassPullRequestActorIds []string `json:"bypassPullRequestActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	BypassForcePushActorIds []string `json:"bypassForcePushActorIds,omitempty"`
	// Is pushing to matching branches restricted.
	RestrictsPushes *bool `json:"restrictsPushes,omitempty"`
	// A list of User, Team, or App IDs allowed to push to matching branches.
	PushActorIds []string `json:"pushActorIds,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`
	// The list of required status checks
	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
	// Are successful deployments required before merging.
	RequiresDeployments *bool `json:"requiresDeployments,omitempty"`
	// The list of required deployment environments
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`
	// Are conversations required to be resolved before merging.
	RequiresConversationResolution *bool `json:"requiresConversationResolution,omitempty"`
	// Whether the most recent push must be approved by someone other than the person who pushed it
	RequireLastPushApproval *bool `json:"requireLastPushApproval,omitempty"`
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *bool `json:"lockBranch,omitempty"`
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge *bool `json:"lockAllowsFetchAndMerge,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateBranchProtectionRule
type UpdateBranchProtectionRulePayload struct {
	// The newly created BranchProtectionRule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of UpdateCheckRun
type UpdateCheckRunInput struct {
	// The node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The node of the check.
	CheckRunID string `json:"checkRunId"`
	// The name of the check.
	Name *string `json:"name,omitempty"`
	// The URL of the integrator's site that has the full details of the check.
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// A reference for the run on the integrator's system.
	ExternalID *string `json:"externalId,omitempty"`
	// The current status.
	Status *RequestableCheckStatusState `json:"status,omitempty"`
	// The time that the check run began.
	StartedAt *string `json:"startedAt,omitempty"`
	// The final conclusion of the check.
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// The time that the check run finished.
	CompletedAt *string `json:"completedAt,omitempty"`
	// Descriptive details about the run.
	Output *CheckRunOutput `json:"output,omitempty"`
	// Possible further actions the integrator can perform, which a user may trigger.
	Actions []*CheckRunAction `json:"actions,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateCheckRun
type UpdateCheckRunPayload struct {
	// The updated check run.
	CheckRun *CheckRun `json:"checkRun,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of UpdateCheckSuitePreferences
type UpdateCheckSuitePreferencesInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// The check suite preferences to modify.
	AutoTriggerPreferences []*CheckSuiteAutoTriggerPreference `json:"autoTriggerPreferences"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateCheckSuitePreferences
type UpdateCheckSuitePreferencesPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of UpdateDiscussionComment
type UpdateDiscussionCommentInput struct {
	// The Node ID of the discussion comment to update.
	CommentID string `json:"commentId"`
	// The new contents of the comment body.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateDiscussionComment
type UpdateDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The modified discussion comment.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

// Autogenerated input type of UpdateDiscussion
type UpdateDiscussionInput struct {
	// The Node ID of the discussion to update.
	DiscussionID string `json:"discussionId"`
	// The new discussion title.
	Title *string `json:"title,omitempty"`
	// The new contents of the discussion body.
	Body *string `json:"body,omitempty"`
	// The Node ID of a discussion category within the same repository to change this discussion to.
	CategoryID *string `json:"categoryId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateDiscussion
type UpdateDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The modified discussion.
	Discussion *Discussion `json:"discussion,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseAdministratorRole
type UpdateEnterpriseAdministratorRoleInput struct {
	// The ID of the Enterprise which the admin belongs to.
	EnterpriseID string `json:"enterpriseId"`
	// The login of a administrator whose role is being changed.
	Login string `json:"login"`
	// The new role for the Enterprise administrator.
	Role EnterpriseAdministratorRole `json:"role"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseAdministratorRole
type UpdateEnterpriseAdministratorRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of changing the administrator's role.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the enterprise on which to set the allow private repository forking setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the allow private repository forking setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// The value for the allow private repository forking policy on the enterprise.
	PolicyValue *EnterpriseAllowPrivateRepositoryForkingPolicyValue `json:"policyValue,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated allow private repository forking setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the allow private repository forking setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
type UpdateEnterpriseDefaultRepositoryPermissionSettingInput struct {
	// The ID of the enterprise on which to set the base repository permission setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the base repository permission setting on the enterprise.
	SettingValue EnterpriseDefaultRepositoryPermissionSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated base repository permission setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the base repository permission setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput struct {
	// The ID of the enterprise on which to set the members can change repository visibility setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can change repository visibility setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can change repository visibility setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can change repository visibility setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can create repositories setting.
	EnterpriseID string `json:"enterpriseId"`
	// Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
	SettingValue *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"settingValue,omitempty"`
	// When false, allow member organizations to set their own repository creation member privileges.
	MembersCanCreateRepositoriesPolicyEnabled *bool `json:"membersCanCreateRepositoriesPolicyEnabled,omitempty"`
	// Allow members to create public repositories. Defaults to current value.
	MembersCanCreatePublicRepositories *bool `json:"membersCanCreatePublicRepositories,omitempty"`
	// Allow members to create private repositories. Defaults to current value.
	MembersCanCreatePrivateRepositories *bool `json:"membersCanCreatePrivateRepositories,omitempty"`
	// Allow members to create internal repositories. Defaults to current value.
	MembersCanCreateInternalRepositories *bool `json:"membersCanCreateInternalRepositories,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can create repositories setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can create repositories setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
type UpdateEnterpriseMembersCanDeleteIssuesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete issues setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can delete issues setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can delete issues setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can delete issues setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete repositories setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can delete repositories setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can delete repositories setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can delete repositories setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput struct {
	// The ID of the enterprise on which to set the members can invite collaborators setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can invite collaborators setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can invite collaborators setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can invite collaborators setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
type UpdateEnterpriseMembersCanMakePurchasesSettingInput struct {
	// The ID of the enterprise on which to set the members can make purchases setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can make purchases setting on the enterprise.
	SettingValue EnterpriseMembersCanMakePurchasesSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can make purchases setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can make purchases setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput struct {
	// The ID of the enterprise on which to set the members can update protected branches setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can update protected branches setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can update protected branches setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can update protected branches setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput struct {
	// The ID of the enterprise on which to set the members can view dependency insights setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the members can view dependency insights setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated members can view dependency insights setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the members can view dependency insights setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
type UpdateEnterpriseOrganizationProjectsSettingInput struct {
	// The ID of the enterprise on which to set the organization projects setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the organization projects setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
type UpdateEnterpriseOrganizationProjectsSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated organization projects setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the organization projects setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
type UpdateEnterpriseOwnerOrganizationRoleInput struct {
	// The ID of the Enterprise which the owner belongs to.
	EnterpriseID string `json:"enterpriseId"`
	// The ID of the organization for membership change.
	OrganizationID string `json:"organizationId"`
	// The role to assume in the organization.
	OrganizationRole RoleInOrganization `json:"organizationRole"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
type UpdateEnterpriseOwnerOrganizationRolePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of changing the owner's organization role.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseProfile
type UpdateEnterpriseProfileInput struct {
	// The Enterprise ID to update.
	EnterpriseID string `json:"enterpriseId"`
	// The name of the enterprise.
	Name *string `json:"name,omitempty"`
	// The description of the enterprise.
	Description *string `json:"description,omitempty"`
	// The URL of the enterprise's website.
	WebsiteURL *string `json:"websiteUrl,omitempty"`
	// The location of the enterprise.
	Location *string `json:"location,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseProfile
type UpdateEnterpriseProfilePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
type UpdateEnterpriseRepositoryProjectsSettingInput struct {
	// The ID of the enterprise on which to set the repository projects setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the repository projects setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
type UpdateEnterpriseRepositoryProjectsSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated repository projects setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the repository projects setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
type UpdateEnterpriseTeamDiscussionsSettingInput struct {
	// The ID of the enterprise on which to set the team discussions setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the team discussions setting on the enterprise.
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
type UpdateEnterpriseTeamDiscussionsSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated team discussions setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the team discussions setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput struct {
	// The ID of the enterprise on which to set the two factor authentication required setting.
	EnterpriseID string `json:"enterpriseId"`
	// The value for the two factor authentication required setting on the enterprise.
	SettingValue EnterpriseEnabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The enterprise with the updated two factor authentication required setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// A message confirming the result of updating the two factor authentication required setting.
	Message *string `json:"message,omitempty"`
}

// Autogenerated input type of UpdateEnvironment
type UpdateEnvironmentInput struct {
	// The node ID of the environment.
	EnvironmentID string `json:"environmentId"`
	// The wait timer in minutes.
	WaitTimer *int64 `json:"waitTimer,omitempty"`
	// The ids of users or teams that can approve deployments to this environment
	Reviewers []string `json:"reviewers,omitempty"`
	// Whether deployments to this environment can be approved by the user who created the deployment.
	PreventSelfReview *bool `json:"preventSelfReview,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateEnvironment
type UpdateEnvironmentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated environment.
	Environment *Environment `json:"environment,omitempty"`
}

// Autogenerated input type of UpdateIpAllowListEnabledSetting
type UpdateIPAllowListEnabledSettingInput struct {
	// The ID of the owner on which to set the IP allow list enabled setting.
	OwnerID string `json:"ownerId"`
	// The value for the IP allow list enabled setting.
	SettingValue IPAllowListEnabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateIpAllowListEnabledSetting
type UpdateIPAllowListEnabledSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The IP allow list owner on which the setting was updated.
	Owner IPAllowListOwner `json:"owner,omitempty"`
}

// Autogenerated input type of UpdateIpAllowListEntry
type UpdateIPAllowListEntryInput struct {
	// The ID of the IP allow list entry to update.
	IPAllowListEntryID string `json:"ipAllowListEntryId"`
	// An IP address or range of addresses in CIDR notation.
	AllowListValue string `json:"allowListValue"`
	// An optional name for the IP allow list entry.
	Name *string `json:"name,omitempty"`
	// Whether the IP allow list entry is active when an IP allow list is enabled.
	IsActive bool `json:"isActive"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateIpAllowListEntry
type UpdateIPAllowListEntryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The IP allow list entry that was updated.
	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

// Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
type UpdateIPAllowListForInstalledAppsEnabledSettingInput struct {
	// The ID of the owner.
	OwnerID string `json:"ownerId"`
	// The value for the IP allow list configuration for installed GitHub Apps setting.
	SettingValue IPAllowListForInstalledAppsEnabledSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
type UpdateIPAllowListForInstalledAppsEnabledSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The IP allow list owner on which the setting was updated.
	Owner IPAllowListOwner `json:"owner,omitempty"`
}

// Autogenerated input type of UpdateIssueComment
type UpdateIssueCommentInput struct {
	// The ID of the IssueComment to modify.
	ID string `json:"id"`
	// The updated text of the comment.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateIssueComment
type UpdateIssueCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated comment.
	IssueComment *IssueComment `json:"issueComment,omitempty"`
}

// Autogenerated input type of UpdateIssue
type UpdateIssueInput struct {
	// The ID of the Issue to modify.
	ID string `json:"id"`
	// The title for the issue.
	Title *string `json:"title,omitempty"`
	// The body for the issue description.
	Body *string `json:"body,omitempty"`
	// An array of Node IDs of users for this issue.
	AssigneeIds []string `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this issue.
	MilestoneID *string `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this issue.
	LabelIds []string `json:"labelIds,omitempty"`
	// The desired issue state.
	State *IssueState `json:"state,omitempty"`
	// An array of Node IDs for projects associated with this issue.
	ProjectIds []string `json:"projectIds,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateIssue
type UpdateIssuePayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The issue.
	Issue *Issue `json:"issue,omitempty"`
}

// Autogenerated input type of UpdateNotificationRestrictionSetting
type UpdateNotificationRestrictionSettingInput struct {
	// The ID of the owner on which to set the restrict notifications setting.
	OwnerID string `json:"ownerId"`
	// The value for the restrict notifications setting.
	SettingValue NotificationRestrictionSettingValue `json:"settingValue"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateNotificationRestrictionSetting
type UpdateNotificationRestrictionSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The owner on which the setting was updated.
	Owner VerifiableDomainOwner `json:"owner,omitempty"`
}

// Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the organization on which to set the allow private repository forking setting.
	OrganizationID string `json:"organizationId"`
	// Enable forking of private repositories in the organization?
	ForkingEnabled bool `json:"forkingEnabled"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of updating the allow private repository forking setting.
	Message *string `json:"message,omitempty"`
	// The organization with the updated allow private repository forking setting.
	Organization *Organization `json:"organization,omitempty"`
}

// Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
type UpdateOrganizationWebCommitSignoffSettingInput struct {
	// The ID of the organization on which to set the web commit signoff setting.
	OrganizationID string `json:"organizationId"`
	// Enable signoff on web-based commits for repositories in the organization?
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
type UpdateOrganizationWebCommitSignoffSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of updating the web commit signoff setting.
	Message *string `json:"message,omitempty"`
	// The organization with the updated web commit signoff setting.
	Organization *Organization `json:"organization,omitempty"`
}

// Only allow users with bypass permission to update matching refs.
type UpdateParameters struct {
	// Branch can pull changes from its upstream repository
	UpdateAllowsFetchAndMerge bool `json:"updateAllowsFetchAndMerge"`
}

func (UpdateParameters) IsRuleParameters() {}

// Only allow users with bypass permission to update matching refs.
type UpdateParametersInput struct {
	// Branch can pull changes from its upstream repository
	UpdateAllowsFetchAndMerge bool `json:"updateAllowsFetchAndMerge"`
}

// Autogenerated input type of UpdateProjectCard
type UpdateProjectCardInput struct {
	// The ProjectCard ID to update.
	ProjectCardID string `json:"projectCardId"`
	// Whether or not the ProjectCard should be archived
	IsArchived *bool `json:"isArchived,omitempty"`
	// The note of ProjectCard.
	Note *string `json:"note,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectCard
type UpdateProjectCardPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated ProjectCard.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
}

// Autogenerated input type of UpdateProjectColumn
type UpdateProjectColumnInput struct {
	// The ProjectColumn ID to update.
	ProjectColumnID string `json:"projectColumnId"`
	// The name of project column.
	Name string `json:"name"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectColumn
type UpdateProjectColumnPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated project column.
	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
}

// Autogenerated input type of UpdateProject
type UpdateProjectInput struct {
	// The Project ID to update.
	ProjectID string `json:"projectId"`
	// The name of project.
	Name *string `json:"name,omitempty"`
	// The description of project.
	Body *string `json:"body,omitempty"`
	// Whether the project is open or closed.
	State *ProjectState `json:"state,omitempty"`
	// Whether the project is public or not.
	Public *bool `json:"public,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProject
type UpdateProjectPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated project.
	Project *Project `json:"project,omitempty"`
}

// Autogenerated input type of UpdateProjectV2Collaborators
type UpdateProjectV2CollaboratorsInput struct {
	// The ID of the project to update the collaborators for.
	ProjectID string `json:"projectId"`
	// The collaborators to update.
	Collaborators []*ProjectV2Collaborator `json:"collaborators"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectV2Collaborators
type UpdateProjectV2CollaboratorsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The collaborators granted a role
	Collaborators *ProjectV2ActorConnection `json:"collaborators,omitempty"`
}

// Autogenerated input type of UpdateProjectV2DraftIssue
type UpdateProjectV2DraftIssueInput struct {
	// The ID of the draft issue to update.
	DraftIssueID string `json:"draftIssueId"`
	// The title of the draft issue.
	Title *string `json:"title,omitempty"`
	// The body of the draft issue.
	Body *string `json:"body,omitempty"`
	// The IDs of the assignees of the draft issue.
	AssigneeIds []string `json:"assigneeIds,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectV2DraftIssue
type UpdateProjectV2DraftIssuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The draft issue updated in the project.
	DraftIssue *DraftIssue `json:"draftIssue,omitempty"`
}

// Autogenerated input type of UpdateProjectV2
type UpdateProjectV2Input struct {
	// The ID of the Project to update.
	ProjectID string `json:"projectId"`
	// Set the title of the project.
	Title *string `json:"title,omitempty"`
	// Set the short description of the project.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// Set the readme description of the project.
	Readme *string `json:"readme,omitempty"`
	// Set the project to closed or open.
	Closed *bool `json:"closed,omitempty"`
	// Set the project to public or private.
	Public *bool `json:"public,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated input type of UpdateProjectV2ItemFieldValue
type UpdateProjectV2ItemFieldValueInput struct {
	// The ID of the Project.
	ProjectID string `json:"projectId"`
	// The ID of the item to be updated.
	ItemID string `json:"itemId"`
	// The ID of the field to be updated.
	FieldID string `json:"fieldId"`
	// The value which will be set on the field.
	Value ProjectV2FieldValue `json:"value"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectV2ItemFieldValue
type UpdateProjectV2ItemFieldValuePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated item.
	ProjectV2Item *ProjectV2Item `json:"projectV2Item,omitempty"`
}

// Autogenerated input type of UpdateProjectV2ItemPosition
type UpdateProjectV2ItemPositionInput struct {
	// The ID of the Project.
	ProjectID string `json:"projectId"`
	// The ID of the item to be moved.
	ItemID string `json:"itemId"`
	// The ID of the item to position this item after. If omitted or set to null the item will be moved to top.
	AfterID *string `json:"afterId,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateProjectV2ItemPosition
type UpdateProjectV2ItemPositionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The items in the new order
	Items *ProjectV2ItemConnection `json:"items,omitempty"`
}

// Autogenerated return type of UpdateProjectV2
type UpdateProjectV2Payload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated Project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

// Autogenerated input type of UpdatePullRequestBranch
type UpdatePullRequestBranchInput struct {
	// The Node ID of the pull request.
	PullRequestID string `json:"pullRequestId"`
	// The head ref oid for the upstream branch.
	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
	// The update branch method to use. If omitted, defaults to 'MERGE'
	UpdateMethod *PullRequestBranchUpdateMethod `json:"updateMethod,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdatePullRequestBranch
type UpdatePullRequestBranchPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of UpdatePullRequest
type UpdatePullRequestInput struct {
	// The Node ID of the pull request.
	PullRequestID string `json:"pullRequestId"`
	// The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository.
	//
	BaseRefName *string `json:"baseRefName,omitempty"`
	// The title of the pull request.
	Title *string `json:"title,omitempty"`
	// The contents of the pull request.
	Body *string `json:"body,omitempty"`
	// The target state of the pull request.
	State *PullRequestUpdateState `json:"state,omitempty"`
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainerCanModify,omitempty"`
	// An array of Node IDs of users for this pull request.
	AssigneeIds []string `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this pull request.
	MilestoneID *string `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this pull request.
	LabelIds []string `json:"labelIds,omitempty"`
	// An array of Node IDs for projects associated with this pull request.
	ProjectIds []string `json:"projectIds,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdatePullRequest
type UpdatePullRequestPayload struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

// Autogenerated input type of UpdatePullRequestReviewComment
type UpdatePullRequestReviewCommentInput struct {
	// The Node ID of the comment to modify.
	PullRequestReviewCommentID string `json:"pullRequestReviewCommentId"`
	// The text of the comment.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdatePullRequestReviewComment
type UpdatePullRequestReviewCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated comment.
	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment,omitempty"`
}

// Autogenerated input type of UpdatePullRequestReview
type UpdatePullRequestReviewInput struct {
	// The Node ID of the pull request review to modify.
	PullRequestReviewID string `json:"pullRequestReviewId"`
	// The contents of the pull request review body.
	Body string `json:"body"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdatePullRequestReview
type UpdatePullRequestReviewPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

// Autogenerated input type of UpdateRef
type UpdateRefInput struct {
	// The Node ID of the Ref to be updated.
	RefID string `json:"refId"`
	// The GitObjectID that the Ref shall be updated to target.
	Oid string `json:"oid"`
	// Permit updates of branch Refs that are not fast-forwards?
	Force *bool `json:"force,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateRef
type UpdateRefPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated Ref.
	Ref *Ref `json:"ref,omitempty"`
}

// Autogenerated input type of UpdateRepository
type UpdateRepositoryInput struct {
	// The ID of the repository to update.
	RepositoryID string `json:"repositoryId"`
	// The new name of the repository.
	Name *string `json:"name,omitempty"`
	// A new description for the repository. Pass an empty string to erase the existing description.
	Description *string `json:"description,omitempty"`
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	Template *bool `json:"template,omitempty"`
	// The URL for a web page about this repository. Pass an empty string to erase the existing URL.
	HomepageURL *string `json:"homepageUrl,omitempty"`
	// Indicates if the repository should have the wiki feature enabled.
	HasWikiEnabled *bool `json:"hasWikiEnabled,omitempty"`
	// Indicates if the repository should have the issues feature enabled.
	HasIssuesEnabled *bool `json:"hasIssuesEnabled,omitempty"`
	// Indicates if the repository should have the project boards feature enabled.
	HasProjectsEnabled *bool `json:"hasProjectsEnabled,omitempty"`
	// Indicates if the repository should have the discussions feature enabled.
	HasDiscussionsEnabled *bool `json:"hasDiscussionsEnabled,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateRepository
type UpdateRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of UpdateRepositoryRuleset
type UpdateRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be updated.
	RepositoryRulesetID string `json:"repositoryRulesetId"`
	// The name of the ruleset.
	Name *string `json:"name,omitempty"`
	// The target of the ruleset.
	Target *RepositoryRulesetTarget `json:"target,omitempty"`
	// The list of rules for this ruleset
	Rules []*RepositoryRuleInput `json:"rules,omitempty"`
	// The list of conditions for this ruleset
	Conditions *RepositoryRuleConditionsInput `json:"conditions,omitempty"`
	// The enforcement level for this ruleset
	Enforcement *RuleEnforcement `json:"enforcement,omitempty"`
	// A list of actors that are allowed to bypass rules in this ruleset.
	BypassActors []*RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateRepositoryRuleset
type UpdateRepositoryRulesetPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The newly created Ruleset.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
}

// Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
type UpdateRepositoryWebCommitSignoffSettingInput struct {
	// The ID of the repository to update.
	RepositoryID string `json:"repositoryId"`
	// Indicates if the repository should require signoff on web-based commits.
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
type UpdateRepositoryWebCommitSignoffSettingPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// A message confirming the result of updating the web commit signoff setting.
	Message *string `json:"message,omitempty"`
	// The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

// Autogenerated input type of UpdateSponsorshipPreferences
type UpdateSponsorshipPreferencesInput struct {
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	SponsorID *string `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	SponsorLogin *string `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	SponsorableID *string `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
	// Whether the sponsor should receive email updates from the sponsorable.
	ReceiveEmails *bool `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateSponsorshipPreferences
type UpdateSponsorshipPreferencesPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The sponsorship that was updated.
	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
}

// Autogenerated input type of UpdateSubscription
type UpdateSubscriptionInput struct {
	// The Node ID of the subscribable object to modify.
	SubscribableID string `json:"subscribableId"`
	// The new state of the subscription.
	State SubscriptionState `json:"state"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateSubscription
type UpdateSubscriptionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The input subscribable entity.
	Subscribable Subscribable `json:"subscribable,omitempty"`
}

// Autogenerated input type of UpdateTeamDiscussionComment
type UpdateTeamDiscussionCommentInput struct {
	// The ID of the comment to modify.
	ID string `json:"id"`
	// The updated text of the comment.
	Body string `json:"body"`
	// The current version of the body content.
	BodyVersion *string `json:"bodyVersion,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateTeamDiscussionComment
type UpdateTeamDiscussionCommentPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated comment.
	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
}

// Autogenerated input type of UpdateTeamDiscussion
type UpdateTeamDiscussionInput struct {
	// The Node ID of the discussion to modify.
	ID string `json:"id"`
	// The updated title of the discussion.
	Title *string `json:"title,omitempty"`
	// The updated text of the discussion.
	Body *string `json:"body,omitempty"`
	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	BodyVersion *string `json:"bodyVersion,omitempty"`
	// If provided, sets the pinned state of the updated discussion.
	Pinned *bool `json:"pinned,omitempty"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateTeamDiscussion
type UpdateTeamDiscussionPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The updated discussion.
	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
}

// Autogenerated input type of UpdateTeamsRepository
type UpdateTeamsRepositoryInput struct {
	// Repository ID being granted access to.
	RepositoryID string `json:"repositoryId"`
	// A list of teams being granted access. Limit: 10
	TeamIds []string `json:"teamIds"`
	// Permission that should be granted to the teams.
	Permission RepositoryPermission `json:"permission"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateTeamsRepository
type UpdateTeamsRepositoryPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The repository that was updated.
	Repository *Repository `json:"repository,omitempty"`
	// The teams granted permission on the repository.
	Teams []*Team `json:"teams,omitempty"`
}

// Autogenerated input type of UpdateTopics
type UpdateTopicsInput struct {
	// The Node ID of the repository.
	RepositoryID string `json:"repositoryId"`
	// An array of topic names.
	TopicNames []string `json:"topicNames"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of UpdateTopics
type UpdateTopicsPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// Names of the provided topics that are not valid.
	InvalidTopicNames []string `json:"invalidTopicNames,omitempty"`
	// The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

// A user is an individual's account on GitHub that owns repositories and can make new content.
type User struct {
	// Determine if this repository owner has any items that can be pinned to their profile.
	AnyPinnableItems bool `json:"anyPinnableItems"`
	// A URL pointing to the user's public avatar.
	AvatarURL string `json:"avatarUrl"`
	// The user's public profile bio.
	Bio *string `json:"bio,omitempty"`
	// The user's public profile bio as HTML.
	BioHTML string `json:"bioHTML"`
	// Could this user receive email notifications, if the organization had notification restrictions enabled?
	CanReceiveOrganizationEmailsWhenNotificationsRestricted bool `json:"canReceiveOrganizationEmailsWhenNotificationsRestricted"`
	// A list of commit comments made by this user.
	CommitComments CommitCommentConnection `json:"commitComments"`
	// The user's public profile company.
	Company *string `json:"company,omitempty"`
	// The user's public profile company as HTML.
	CompanyHTML string `json:"companyHTML"`
	// The collection of contributions this user has made to different repositories.
	ContributionsCollection *ContributionsCollection `json:"contributionsCollection"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The user's publicly visible profile email.
	Email string `json:"email"`
	// A list of enterprises that the user belongs to.
	Enterprises *EnterpriseConnection `json:"enterprises,omitempty"`
	// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
	EstimatedNextSponsorsPayoutInCents int64 `json:"estimatedNextSponsorsPayoutInCents"`
	// A list of users the given user is followed by.
	Followers FollowerConnection `json:"followers"`
	// A list of users the given user is following.
	Following FollowingConnection `json:"following"`
	// Find gist by repo name.
	Gist *Gist `json:"gist,omitempty"`
	// A list of gist comments made by this user.
	GistComments GistCommentConnection `json:"gistComments"`
	// A list of the Gists the user has created.
	Gists GistConnection `json:"gists"`
	// True if this user/organization has a GitHub Sponsors listing.
	HasSponsorsListing bool `json:"hasSponsorsListing"`
	// The hovercard information for this user in a given context
	Hovercard Hovercard `json:"hovercard"`
	ID        string    `json:"id"`
	// The interaction ability settings for this user.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
	// Whether or not this user is a participant in the GitHub Security Bug Bounty.
	IsBountyHunter bool `json:"isBountyHunter"`
	// Whether or not this user is a participant in the GitHub Campus Experts Program.
	IsCampusExpert bool `json:"isCampusExpert"`
	// Whether or not this user is a GitHub Developer Program member.
	IsDeveloperProgramMember bool `json:"isDeveloperProgramMember"`
	// Whether or not this user is a GitHub employee.
	IsEmployee bool `json:"isEmployee"`
	// Whether or not this user is following the viewer. Inverse of viewerIsFollowing
	IsFollowingViewer bool `json:"isFollowingViewer"`
	// Whether or not this user is a member of the GitHub Stars Program.
	IsGitHubStar bool `json:"isGitHubStar"`
	// Whether or not the user has marked themselves as for hire.
	IsHireable bool `json:"isHireable"`
	// Whether or not this user is a site administrator.
	IsSiteAdmin bool `json:"isSiteAdmin"`
	// Whether the given account is sponsoring this user/organization.
	IsSponsoredBy bool `json:"isSponsoredBy"`
	// True if the viewer is sponsored by this user/organization.
	IsSponsoringViewer bool `json:"isSponsoringViewer"`
	// Whether or not this user is the viewing user.
	IsViewer bool `json:"isViewer"`
	// A list of issue comments made by this user.
	IssueComments IssueCommentConnection `json:"issueComments"`
	// A list of issues associated with this user.
	Issues IssueConnection `json:"issues"`
	// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
	ItemShowcase ProfileItemShowcase `json:"itemShowcase"`
	// The user's public profile location.
	Location *string `json:"location,omitempty"`
	// The username used to login.
	Login string `json:"login"`
	// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
	MonthlyEstimatedSponsorsIncomeInCents int64 `json:"monthlyEstimatedSponsorsIncomeInCents"`
	// The user's public profile name.
	Name *string `json:"name,omitempty"`
	// A list of notification threads for the viewer. Returns an empty list for a user other than
	// the current viewer.
	//
	// Combining both filterBy and query arguments will result in an error.
	// Please favor using the query argument.
	//
	NotificationThreads NotificationThreadConnection `json:"notificationThreads"`
	// Find an organization by its login that the user belongs to.
	Organization *Organization `json:"organization,omitempty"`
	// Verified email addresses that match verified domains for a specified organization the user is a member of.
	OrganizationVerifiedDomainEmails []string `json:"organizationVerifiedDomainEmails"`
	// A list of organizations the user belongs to.
	Organizations OrganizationConnection `json:"organizations"`
	// A list of packages under the owner.
	Packages PackageConnection `json:"packages"`
	// A list of repositories and gists this profile owner can pin to their profile.
	PinnableItems PinnableItemConnection `json:"pinnableItems"`
	// A list of repositories and gists this profile owner has pinned to their profile
	PinnedItems PinnableItemConnection `json:"pinnedItems"`
	// Returns how many more items this profile owner can pin to their profile.
	PinnedItemsRemaining int64 `json:"pinnedItemsRemaining"`
	// Find project by number.
	Project *Project `json:"project,omitempty"`
	// Find a project by number.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
	// A list of projects under the owner.
	Projects ProjectConnection `json:"projects"`
	// The HTTP path listing user's projects
	ProjectsResourcePath string `json:"projectsResourcePath"`
	// The HTTP URL listing user's projects
	ProjectsURL string `json:"projectsUrl"`
	// A list of projects under the owner.
	ProjectsV2 ProjectV2Connection `json:"projectsV2"`
	// The user's profile pronouns
	Pronouns *string `json:"pronouns,omitempty"`
	// A list of public keys associated with this user.
	PublicKeys PublicKeyConnection `json:"publicKeys"`
	// A list of pull requests associated with this user.
	PullRequests PullRequestConnection `json:"pullRequests"`
	// Recent projects that this user has modified in the context of the owner.
	RecentProjects ProjectV2Connection `json:"recentProjects"`
	// A list of repositories that the user owns.
	Repositories RepositoryConnection `json:"repositories"`
	// A list of repositories that the user recently contributed to.
	RepositoriesContributedTo RepositoryConnection `json:"repositoriesContributedTo"`
	// Find Repository.
	Repository *Repository `json:"repository,omitempty"`
	// Discussion comments this user has authored.
	RepositoryDiscussionComments DiscussionCommentConnection `json:"repositoryDiscussionComments"`
	// Discussions this user has started.
	RepositoryDiscussions DiscussionConnection `json:"repositoryDiscussions"`
	// The HTTP path for this user
	ResourcePath string `json:"resourcePath"`
	// Replies this user has saved
	SavedReplies *SavedReplyConnection `json:"savedReplies,omitempty"`
	// The user's social media accounts, ordered as they appear on the user's profile.
	SocialAccounts SocialAccountConnection `json:"socialAccounts"`
	// List of users and organizations this entity is sponsoring.
	Sponsoring SponsorConnection `json:"sponsoring"`
	// List of sponsors for this user or organization.
	Sponsors SponsorConnection `json:"sponsors"`
	// Events involving this sponsorable, such as new sponsorships.
	SponsorsActivities SponsorsActivityConnection `json:"sponsorsActivities"`
	// The GitHub Sponsors listing for this user or organization.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
	// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`
	// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`
	// List of sponsorship updates sent from this sponsorable to sponsors.
	SponsorshipNewsletters SponsorshipNewsletterConnection `json:"sponsorshipNewsletters"`
	// The sponsorships where this user or organization is the maintainer receiving the funds.
	SponsorshipsAsMaintainer SponsorshipConnection `json:"sponsorshipsAsMaintainer"`
	// The sponsorships where this user or organization is the funder.
	SponsorshipsAsSponsor SponsorshipConnection `json:"sponsorshipsAsSponsor"`
	// Repositories the user has starred.
	StarredRepositories StarredRepositoryConnection `json:"starredRepositories"`
	// The user's description of what they're currently doing.
	Status *UserStatus `json:"status,omitempty"`
	// Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
	//
	TopRepositories RepositoryConnection `json:"topRepositories"`
	// The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
	TotalSponsorshipAmountAsSponsorInCents *int64 `json:"totalSponsorshipAmountAsSponsorInCents,omitempty"`
	// The user's Twitter username.
	TwitterUsername *string `json:"twitterUsername,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this user
	URL string `json:"url"`
	// Can the viewer pin repositories and gists to the profile?
	ViewerCanChangePinnedItems bool `json:"viewerCanChangePinnedItems"`
	// Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects"`
	// Whether or not the viewer is able to follow the user.
	ViewerCanFollow bool `json:"viewerCanFollow"`
	// Whether or not the viewer is able to sponsor this user/organization.
	ViewerCanSponsor bool `json:"viewerCanSponsor"`
	// Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
	ViewerIsFollowing bool `json:"viewerIsFollowing"`
	// True if the viewer is sponsoring this user/organization.
	ViewerIsSponsoring bool `json:"viewerIsSponsoring"`
	// A list of repositories the given user is watching.
	Watching RepositoryConnection `json:"watching"`
	// A URL pointing to the user's public website/blog.
	WebsiteURL *string `json:"websiteUrl,omitempty"`
}

func (User) IsActor() {}

// A URL pointing to the actor's public avatar.
func (this User) GetAvatarURL() string { return this.AvatarURL }

// The username of the actor.
func (this User) GetLogin() string { return this.Login }

// The HTTP path for this actor.
func (this User) GetResourcePath() string { return this.ResourcePath }

// The HTTP URL for this actor.
func (this User) GetURL() string { return this.URL }

func (User) IsAssignee() {}

func (User) IsAuditEntryActor() {}

func (User) IsBranchActorAllowanceActor() {}

func (User) IsClaimable() {}

func (User) IsDeploymentReviewer() {}

func (User) IsEnterpriseMember() {}

func (User) IsNode() {}

// ID of the object.
func (this User) GetID() string { return this.ID }

func (User) IsNotificationsList() {}

func (User) IsOrganizationOrUser() {}

func (User) IsPackageOwner() {}

// A list of packages under the owner.
func (this User) GetPackages() PackageConnection { return this.Packages }

func (User) IsProfileOwner() {}

// Determine if this repository owner has any items that can be pinned to their profile.
func (this User) GetAnyPinnableItems() bool { return this.AnyPinnableItems }

// The public profile email.
func (this User) GetEmail() *string { return &this.Email }

// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
func (this User) GetItemShowcase() ProfileItemShowcase { return this.ItemShowcase }

// The public profile location.
func (this User) GetLocation() *string { return this.Location }

// The username used to login.

// The public profile name.
func (this User) GetName() *string { return this.Name }

// A list of repositories and gists this profile owner can pin to their profile.
func (this User) GetPinnableItems() PinnableItemConnection { return this.PinnableItems }

// A list of repositories and gists this profile owner has pinned to their profile
func (this User) GetPinnedItems() PinnableItemConnection { return this.PinnedItems }

// Returns how many more items this profile owner can pin to their profile.
func (this User) GetPinnedItemsRemaining() int64 { return this.PinnedItemsRemaining }

// Can the viewer pin repositories and gists to the profile?
func (this User) GetViewerCanChangePinnedItems() bool { return this.ViewerCanChangePinnedItems }

// The public profile website URL.
func (this User) GetWebsiteURL() *string { return this.WebsiteURL }

func (User) IsProjectOwner() {}

// Find project by number.
func (this User) GetProject() *Project { return this.Project }

// A list of projects under the owner.
func (this User) GetProjects() ProjectConnection { return this.Projects }

// The HTTP path listing owners projects
func (this User) GetProjectsResourcePath() string { return this.ProjectsResourcePath }

// The HTTP URL listing owners projects
func (this User) GetProjectsURL() string { return this.ProjectsURL }

// Can the current viewer create new projects on this owner.
func (this User) GetViewerCanCreateProjects() bool { return this.ViewerCanCreateProjects }

func (User) IsProjectV2Actor() {}

func (User) IsProjectV2Owner() {}

// Find a project by number.
func (this User) GetProjectV2() *ProjectV2 { return this.ProjectV2 }

// A list of projects under the owner.
func (this User) GetProjectsV2() ProjectV2Connection { return this.ProjectsV2 }

func (User) IsProjectV2Recent() {}

// Recent projects that this user has modified in the context of the owner.
func (this User) GetRecentProjects() ProjectV2Connection { return this.RecentProjects }

func (User) IsPushAllowanceActor() {}

func (User) IsReactor() {}

func (User) IsRepositoryDiscussionAuthor() {}

// Discussions this user has started.
func (this User) GetRepositoryDiscussions() DiscussionConnection { return this.RepositoryDiscussions }

func (User) IsRepositoryDiscussionCommentAuthor() {}

// Discussion comments this user has authored.
func (this User) GetRepositoryDiscussionComments() DiscussionCommentConnection {
	return this.RepositoryDiscussionComments
}

func (User) IsRepositoryOwner() {}

// A URL pointing to the owner's public avatar.

// The username used to login.

// A list of repositories that the user owns.
func (this User) GetRepositories() RepositoryConnection { return this.Repositories }

// Find Repository.
func (this User) GetRepository() *Repository { return this.Repository }

// The HTTP URL for the owner.

// The HTTP URL for the owner.

func (User) IsRequestedReviewer() {}

func (User) IsReviewDismissalAllowanceActor() {}

func (User) IsSearchResultItem() {}

func (User) IsSponsor() {}

func (User) IsSponsorable() {}

// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
func (this User) GetEstimatedNextSponsorsPayoutInCents() int64 {
	return this.EstimatedNextSponsorsPayoutInCents
}

// True if this user/organization has a GitHub Sponsors listing.
func (this User) GetHasSponsorsListing() bool { return this.HasSponsorsListing }

// Whether the given account is sponsoring this user/organization.
func (this User) GetIsSponsoredBy() bool { return this.IsSponsoredBy }

// True if the viewer is sponsored by this user/organization.
func (this User) GetIsSponsoringViewer() bool { return this.IsSponsoringViewer }

// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
func (this User) GetMonthlyEstimatedSponsorsIncomeInCents() int64 {
	return this.MonthlyEstimatedSponsorsIncomeInCents
}

// List of users and organizations this entity is sponsoring.
func (this User) GetSponsoring() SponsorConnection { return this.Sponsoring }

// List of sponsors for this user or organization.
func (this User) GetSponsors() SponsorConnection { return this.Sponsors }

// Events involving this sponsorable, such as new sponsorships.
func (this User) GetSponsorsActivities() SponsorsActivityConnection { return this.SponsorsActivities }

// The GitHub Sponsors listing for this user or organization.
func (this User) GetSponsorsListing() *SponsorsListing { return this.SponsorsListing }

// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
func (this User) GetSponsorshipForViewerAsSponsor() *Sponsorship {
	return this.SponsorshipForViewerAsSponsor
}

// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
func (this User) GetSponsorshipForViewerAsSponsorable() *Sponsorship {
	return this.SponsorshipForViewerAsSponsorable
}

// List of sponsorship updates sent from this sponsorable to sponsors.
func (this User) GetSponsorshipNewsletters() SponsorshipNewsletterConnection {
	return this.SponsorshipNewsletters
}

// The sponsorships where this user or organization is the maintainer receiving the funds.
func (this User) GetSponsorshipsAsMaintainer() SponsorshipConnection {
	return this.SponsorshipsAsMaintainer
}

// The sponsorships where this user or organization is the funder.
func (this User) GetSponsorshipsAsSponsor() SponsorshipConnection { return this.SponsorshipsAsSponsor }

// The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
func (this User) GetTotalSponsorshipAmountAsSponsorInCents() *int64 {
	return this.TotalSponsorshipAmountAsSponsorInCents
}

// Whether or not the viewer is able to sponsor this user/organization.
func (this User) GetViewerCanSponsor() bool { return this.ViewerCanSponsor }

// True if the viewer is sponsoring this user/organization.
func (this User) GetViewerIsSponsoring() bool { return this.ViewerIsSponsoring }

func (User) IsSponsorableItem() {}

func (User) IsSponsorsListingFeatureableItem() {}

func (User) IsUniformResourceLocatable() {}

// The HTML path to this resource.

// The URL to this resource.

// Represents a 'user_blocked' event on a given user.
type UserBlockedEvent struct {
	// Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`
	// Number of days that the user was blocked for.
	BlockDuration UserBlockDuration `json:"blockDuration"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	ID        string `json:"id"`
	// The user who was blocked.
	Subject *User `json:"subject,omitempty"`
}

func (UserBlockedEvent) IsIssueTimelineItem() {}

func (UserBlockedEvent) IsIssueTimelineItems() {}

func (UserBlockedEvent) IsNode() {}

// ID of the object.
func (this UserBlockedEvent) GetID() string { return this.ID }

func (UserBlockedEvent) IsPullRequestTimelineItem() {}

func (UserBlockedEvent) IsPullRequestTimelineItems() {}

// The connection type for User.
type UserConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edit on user content
type UserContentEdit struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the date and time when the object was deleted.
	DeletedAt *string `json:"deletedAt,omitempty"`
	// The actor who deleted this content
	DeletedBy Actor `json:"deletedBy,omitempty"`
	// A summary of the changes for this edit
	Diff *string `json:"diff,omitempty"`
	// When this content was edited
	EditedAt string `json:"editedAt"`
	// The actor who edited this content
	Editor Actor  `json:"editor,omitempty"`
	ID     string `json:"id"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
}

func (UserContentEdit) IsNode() {}

// ID of the object.
func (this UserContentEdit) GetID() string { return this.ID }

// A list of edits to content.
type UserContentEditConnection struct {
	// A list of edges.
	Edges []*UserContentEditEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*UserContentEdit `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type UserContentEditEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *UserContentEdit `json:"node,omitempty"`
}

// Represents a user.
type UserEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
}

// Email attributes from External Identity
type UserEmailMetadata struct {
	// Boolean to identify primary emails
	Primary *bool `json:"primary,omitempty"`
	// Type of email
	Type *string `json:"type,omitempty"`
	// Email id
	Value string `json:"value"`
}

// The user's description of what they're currently doing.
type UserStatus struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// An emoji summarizing the user's status.
	Emoji *string `json:"emoji,omitempty"`
	// The status emoji as HTML.
	EmojiHTML *string `json:"emojiHTML,omitempty"`
	// If set, the status will not be shown after this date.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	ID        string  `json:"id"`
	// Whether this status indicates the user is not fully available on GitHub.
	IndicatesLimitedAvailability bool `json:"indicatesLimitedAvailability"`
	// A brief message describing what the user is doing.
	Message *string `json:"message,omitempty"`
	// The organization whose members can see this status. If null, this status is publicly visible.
	Organization *Organization `json:"organization,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The user who has this status.
	User User `json:"user"`
}

func (UserStatus) IsNode() {}

// ID of the object.
func (this UserStatus) GetID() string { return this.ID }

// The connection type for UserStatus.
type UserStatusConnection struct {
	// A list of edges.
	Edges []*UserStatusEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*UserStatus `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type UserStatusEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *UserStatus `json:"node,omitempty"`
}

// Ordering options for user status connections.
type UserStatusOrder struct {
	// The field to order user statuses by.
	Field UserStatusOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// A domain that can be verified or approved for an organization or an enterprise.
type VerifiableDomain struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The DNS host name that should be used for verification.
	DNSHostName *string `json:"dnsHostName,omitempty"`
	// The unicode encoded domain.
	Domain string `json:"domain"`
	// Whether a TXT record for verification with the expected host name was found.
	HasFoundHostName bool `json:"hasFoundHostName"`
	// Whether a TXT record for verification with the expected verification token was found.
	HasFoundVerificationToken bool   `json:"hasFoundVerificationToken"`
	ID                        string `json:"id"`
	// Whether or not the domain is approved.
	IsApproved bool `json:"isApproved"`
	// Whether this domain is required to exist for an organization or enterprise policy to be enforced.
	IsRequiredForPolicyEnforcement bool `json:"isRequiredForPolicyEnforcement"`
	// Whether or not the domain is verified.
	IsVerified bool `json:"isVerified"`
	// The owner of the domain.
	Owner VerifiableDomainOwner `json:"owner"`
	// The punycode encoded domain.
	PunycodeEncodedDomain string `json:"punycodeEncodedDomain"`
	// The time that the current verification token will expire.
	TokenExpirationTime *string `json:"tokenExpirationTime,omitempty"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The current verification token for the domain.
	VerificationToken *string `json:"verificationToken,omitempty"`
}

func (VerifiableDomain) IsNode() {}

// ID of the object.
func (this VerifiableDomain) GetID() string { return this.ID }

// The connection type for VerifiableDomain.
type VerifiableDomainConnection struct {
	// A list of edges.
	Edges []*VerifiableDomainEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*VerifiableDomain `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type VerifiableDomainEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *VerifiableDomain `json:"node,omitempty"`
}

// Ordering options for verifiable domain connections.
type VerifiableDomainOrder struct {
	// The field to order verifiable domains by.
	Field VerifiableDomainOrderField `json:"field"`
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
}

// Autogenerated input type of VerifyVerifiableDomain
type VerifyVerifiableDomainInput struct {
	// The ID of the verifiable domain to verify.
	ID string `json:"id"`
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

// Autogenerated return type of VerifyVerifiableDomain
type VerifyVerifiableDomainPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	// The verifiable domain that was verified.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

// A hovercard context with a message describing how the viewer is related.
type ViewerHovercardContext struct {
	// A string describing this context
	Message string `json:"message"`
	// An octicon to accompany this context
	Octicon string `json:"octicon"`
	// Identifies the user who is related to this context.
	Viewer User `json:"viewer"`
}

func (ViewerHovercardContext) IsHovercardContext() {}

// A string describing this context
func (this ViewerHovercardContext) GetMessage() string { return this.Message }

// An octicon to accompany this context
func (this ViewerHovercardContext) GetOcticon() string { return this.Octicon }

// A workflow contains meta information about an Actions workflow file.
type Workflow struct {
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	ID         string `json:"id"`
	// The name of the workflow.
	Name string `json:"name"`
	// The HTTP path for this workflow
	ResourcePath string `json:"resourcePath"`
	// The runs of the workflow.
	Runs WorkflowRunConnection `json:"runs"`
	// The state of the workflow.
	State WorkflowState `json:"state"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this workflow
	URL string `json:"url"`
}

func (Workflow) IsNode() {}

// ID of the object.
func (this Workflow) GetID() string { return this.ID }

func (Workflow) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this Workflow) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this Workflow) GetURL() string { return this.URL }

// A workflow that must run for this rule to pass
type WorkflowFileReference struct {
	// The path to the workflow file
	Path string `json:"path"`
	// The ref (branch or tag) of the workflow file to use
	Ref *string `json:"ref,omitempty"`
	// The ID of the repository where the workflow is defined
	RepositoryID int64 `json:"repositoryId"`
	// The commit SHA of the workflow file to use
	Sha *string `json:"sha,omitempty"`
}

// A workflow that must run for this rule to pass
type WorkflowFileReferenceInput struct {
	// The path to the workflow file
	Path string `json:"path"`
	// The ref (branch or tag) of the workflow file to use
	Ref *string `json:"ref,omitempty"`
	// The ID of the repository where the workflow is defined
	RepositoryID int64 `json:"repositoryId"`
	// The commit SHA of the workflow file to use
	Sha *string `json:"sha,omitempty"`
}

// A workflow run.
type WorkflowRun struct {
	// The check suite this workflow run belongs to.
	CheckSuite CheckSuite `json:"checkSuite"`
	// Identifies the date and time when the object was created.
	CreatedAt string `json:"createdAt"`
	// Identifies the primary key from the database.
	DatabaseID *int64 `json:"databaseId,omitempty"`
	// The log of deployment reviews
	DeploymentReviews DeploymentReviewConnection `json:"deploymentReviews"`
	// The event that triggered the workflow run
	Event string `json:"event"`
	// The workflow file
	File *WorkflowRunFile `json:"file,omitempty"`
	ID   string           `json:"id"`
	// The pending deployment requests of all check runs in this workflow run
	PendingDeploymentRequests DeploymentRequestConnection `json:"pendingDeploymentRequests"`
	// The HTTP path for this workflow run
	ResourcePath string `json:"resourcePath"`
	// A number that uniquely identifies this workflow run in its parent workflow.
	RunNumber int64 `json:"runNumber"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The HTTP URL for this workflow run
	URL string `json:"url"`
	// The workflow executed in this workflow run.
	Workflow Workflow `json:"workflow"`
}

func (WorkflowRun) IsNode() {}

// ID of the object.
func (this WorkflowRun) GetID() string { return this.ID }

func (WorkflowRun) IsNotificationsSubject() {}

func (WorkflowRun) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this WorkflowRun) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this WorkflowRun) GetURL() string { return this.URL }

// The connection type for WorkflowRun.
type WorkflowRunConnection struct {
	// A list of edges.
	Edges []*WorkflowRunEdge `json:"edges,omitempty"`
	// A list of nodes.
	Nodes []*WorkflowRun `json:"nodes,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type WorkflowRunEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node *WorkflowRun `json:"node,omitempty"`
}

// An executed workflow file for a workflow run.
type WorkflowRunFile struct {
	ID string `json:"id"`
	// The path of the workflow file relative to its repository.
	Path string `json:"path"`
	// The direct link to the file in the repository which stores the workflow file.
	RepositoryFileURL string `json:"repositoryFileUrl"`
	// The repository name and owner which stores the workflow file.
	RepositoryName string `json:"repositoryName"`
	// The HTTP path for this workflow run file
	ResourcePath string `json:"resourcePath"`
	// The parent workflow run execution for this file.
	Run WorkflowRun `json:"run"`
	// The HTTP URL for this workflow run file
	URL string `json:"url"`
	// If the viewer has permissions to push to the repository which stores the workflow.
	ViewerCanPushRepository bool `json:"viewerCanPushRepository"`
	// If the viewer has permissions to read the repository which stores the workflow.
	ViewerCanReadRepository bool `json:"viewerCanReadRepository"`
}

func (WorkflowRunFile) IsNode() {}

// ID of the object.
func (this WorkflowRunFile) GetID() string { return this.ID }

func (WorkflowRunFile) IsUniformResourceLocatable() {}

// The HTML path to this resource.
func (this WorkflowRunFile) GetResourcePath() string { return this.ResourcePath }

// The URL to this resource.
func (this WorkflowRunFile) GetURL() string { return this.URL }

// Ways in which lists of workflow runs can be ordered upon return.
type WorkflowRunOrder struct {
	// The field by which to order workflows.
	Field WorkflowRunOrderField `json:"field"`
	// The direction in which to order workflow runs by the specified field.
	Direction OrderDirection `json:"direction"`
}

// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
type WorkflowsParameters struct {
	// Workflows that must pass for this rule to pass.
	Workflows []*WorkflowFileReference `json:"workflows"`
}

func (WorkflowsParameters) IsRuleParameters() {}

// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
type WorkflowsParametersInput struct {
	// Workflows that must pass for this rule to pass.
	Workflows []*WorkflowFileReferenceInput `json:"workflows"`
}

// The actor's type.
type ActorType string

const (
	// Indicates a user actor.
	ActorTypeUser ActorType = "USER"
	// Indicates a team actor.
	ActorTypeTeam ActorType = "TEAM"
)

var AllActorType = []ActorType{
	ActorTypeUser,
	ActorTypeTeam,
}

func (e ActorType) IsValid() bool {
	switch e {
	case ActorTypeUser, ActorTypeTeam:
		return true
	}
	return false
}

func (e ActorType) String() string {
	return string(e)
}

func (e *ActorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActorType", str)
	}
	return nil
}

func (e ActorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Audit Log connections can be ordered.
type AuditLogOrderField string

const (
	// Order audit log entries by timestamp
	AuditLogOrderFieldCreatedAt AuditLogOrderField = "CREATED_AT"
)

var AllAuditLogOrderField = []AuditLogOrderField{
	AuditLogOrderFieldCreatedAt,
}

func (e AuditLogOrderField) IsValid() bool {
	switch e {
	case AuditLogOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e AuditLogOrderField) String() string {
	return string(e)
}

func (e *AuditLogOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditLogOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditLogOrderField", str)
	}
	return nil
}

func (e AuditLogOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents an annotation's information level.
type CheckAnnotationLevel string

const (
	// An annotation indicating an inescapable error.
	CheckAnnotationLevelFailure CheckAnnotationLevel = "FAILURE"
	// An annotation indicating some information.
	CheckAnnotationLevelNotice CheckAnnotationLevel = "NOTICE"
	// An annotation indicating an ignorable error.
	CheckAnnotationLevelWarning CheckAnnotationLevel = "WARNING"
)

var AllCheckAnnotationLevel = []CheckAnnotationLevel{
	CheckAnnotationLevelFailure,
	CheckAnnotationLevelNotice,
	CheckAnnotationLevelWarning,
}

func (e CheckAnnotationLevel) IsValid() bool {
	switch e {
	case CheckAnnotationLevelFailure, CheckAnnotationLevelNotice, CheckAnnotationLevelWarning:
		return true
	}
	return false
}

func (e CheckAnnotationLevel) String() string {
	return string(e)
}

func (e *CheckAnnotationLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckAnnotationLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckAnnotationLevel", str)
	}
	return nil
}

func (e CheckAnnotationLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a check suite or run conclusion.
type CheckConclusionState string

const (
	// The check suite or run requires action.
	CheckConclusionStateActionRequired CheckConclusionState = "ACTION_REQUIRED"
	// The check suite or run has timed out.
	CheckConclusionStateTimedOut CheckConclusionState = "TIMED_OUT"
	// The check suite or run has been cancelled.
	CheckConclusionStateCancelled CheckConclusionState = "CANCELLED"
	// The check suite or run has failed.
	CheckConclusionStateFailure CheckConclusionState = "FAILURE"
	// The check suite or run has succeeded.
	CheckConclusionStateSuccess CheckConclusionState = "SUCCESS"
	// The check suite or run was neutral.
	CheckConclusionStateNeutral CheckConclusionState = "NEUTRAL"
	// The check suite or run was skipped.
	CheckConclusionStateSkipped CheckConclusionState = "SKIPPED"
	// The check suite or run has failed at startup.
	CheckConclusionStateStartupFailure CheckConclusionState = "STARTUP_FAILURE"
	// The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckConclusionStateStale CheckConclusionState = "STALE"
)

var AllCheckConclusionState = []CheckConclusionState{
	CheckConclusionStateActionRequired,
	CheckConclusionStateTimedOut,
	CheckConclusionStateCancelled,
	CheckConclusionStateFailure,
	CheckConclusionStateSuccess,
	CheckConclusionStateNeutral,
	CheckConclusionStateSkipped,
	CheckConclusionStateStartupFailure,
	CheckConclusionStateStale,
}

func (e CheckConclusionState) IsValid() bool {
	switch e {
	case CheckConclusionStateActionRequired, CheckConclusionStateTimedOut, CheckConclusionStateCancelled, CheckConclusionStateFailure, CheckConclusionStateSuccess, CheckConclusionStateNeutral, CheckConclusionStateSkipped, CheckConclusionStateStartupFailure, CheckConclusionStateStale:
		return true
	}
	return false
}

func (e CheckConclusionState) String() string {
	return string(e)
}

func (e *CheckConclusionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckConclusionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckConclusionState", str)
	}
	return nil
}

func (e CheckConclusionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a check run in a status rollup.
type CheckRunState string

const (
	// The check run requires action.
	CheckRunStateActionRequired CheckRunState = "ACTION_REQUIRED"
	// The check run has been cancelled.
	CheckRunStateCancelled CheckRunState = "CANCELLED"
	// The check run has been completed.
	CheckRunStateCompleted CheckRunState = "COMPLETED"
	// The check run has failed.
	CheckRunStateFailure CheckRunState = "FAILURE"
	// The check run is in progress.
	CheckRunStateInProgress CheckRunState = "IN_PROGRESS"
	// The check run was neutral.
	CheckRunStateNeutral CheckRunState = "NEUTRAL"
	// The check run is in pending state.
	CheckRunStatePending CheckRunState = "PENDING"
	// The check run has been queued.
	CheckRunStateQueued CheckRunState = "QUEUED"
	// The check run was skipped.
	CheckRunStateSkipped CheckRunState = "SKIPPED"
	// The check run was marked stale by GitHub. Only GitHub can use this conclusion.
	CheckRunStateStale CheckRunState = "STALE"
	// The check run has failed at startup.
	CheckRunStateStartupFailure CheckRunState = "STARTUP_FAILURE"
	// The check run has succeeded.
	CheckRunStateSuccess CheckRunState = "SUCCESS"
	// The check run has timed out.
	CheckRunStateTimedOut CheckRunState = "TIMED_OUT"
	// The check run is in waiting state.
	CheckRunStateWaiting CheckRunState = "WAITING"
)

var AllCheckRunState = []CheckRunState{
	CheckRunStateActionRequired,
	CheckRunStateCancelled,
	CheckRunStateCompleted,
	CheckRunStateFailure,
	CheckRunStateInProgress,
	CheckRunStateNeutral,
	CheckRunStatePending,
	CheckRunStateQueued,
	CheckRunStateSkipped,
	CheckRunStateStale,
	CheckRunStateStartupFailure,
	CheckRunStateSuccess,
	CheckRunStateTimedOut,
	CheckRunStateWaiting,
}

func (e CheckRunState) IsValid() bool {
	switch e {
	case CheckRunStateActionRequired, CheckRunStateCancelled, CheckRunStateCompleted, CheckRunStateFailure, CheckRunStateInProgress, CheckRunStateNeutral, CheckRunStatePending, CheckRunStateQueued, CheckRunStateSkipped, CheckRunStateStale, CheckRunStateStartupFailure, CheckRunStateSuccess, CheckRunStateTimedOut, CheckRunStateWaiting:
		return true
	}
	return false
}

func (e CheckRunState) String() string {
	return string(e)
}

func (e *CheckRunState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckRunState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckRunState", str)
	}
	return nil
}

func (e CheckRunState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types of check runs.
type CheckRunType string

const (
	// Every check run available.
	CheckRunTypeAll CheckRunType = "ALL"
	// The latest check run.
	CheckRunTypeLatest CheckRunType = "LATEST"
)

var AllCheckRunType = []CheckRunType{
	CheckRunTypeAll,
	CheckRunTypeLatest,
}

func (e CheckRunType) IsValid() bool {
	switch e {
	case CheckRunTypeAll, CheckRunTypeLatest:
		return true
	}
	return false
}

func (e CheckRunType) String() string {
	return string(e)
}

func (e *CheckRunType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckRunType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckRunType", str)
	}
	return nil
}

func (e CheckRunType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a check suite or run status.
type CheckStatusState string

const (
	// The check suite or run has been queued.
	CheckStatusStateQueued CheckStatusState = "QUEUED"
	// The check suite or run is in progress.
	CheckStatusStateInProgress CheckStatusState = "IN_PROGRESS"
	// The check suite or run has been completed.
	CheckStatusStateCompleted CheckStatusState = "COMPLETED"
	// The check suite or run is in waiting state.
	CheckStatusStateWaiting CheckStatusState = "WAITING"
	// The check suite or run is in pending state.
	CheckStatusStatePending CheckStatusState = "PENDING"
	// The check suite or run has been requested.
	CheckStatusStateRequested CheckStatusState = "REQUESTED"
)

var AllCheckStatusState = []CheckStatusState{
	CheckStatusStateQueued,
	CheckStatusStateInProgress,
	CheckStatusStateCompleted,
	CheckStatusStateWaiting,
	CheckStatusStatePending,
	CheckStatusStateRequested,
}

func (e CheckStatusState) IsValid() bool {
	switch e {
	case CheckStatusStateQueued, CheckStatusStateInProgress, CheckStatusStateCompleted, CheckStatusStateWaiting, CheckStatusStatePending, CheckStatusStateRequested:
		return true
	}
	return false
}

func (e CheckStatusState) String() string {
	return string(e)
}

func (e *CheckStatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckStatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckStatusState", str)
	}
	return nil
}

func (e CheckStatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Collaborators affiliation level with a subject.
type CollaboratorAffiliation string

const (
	// All outside collaborators of an organization-owned subject.
	CollaboratorAffiliationOutside CollaboratorAffiliation = "OUTSIDE"
	// All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
	CollaboratorAffiliationDirect CollaboratorAffiliation = "DIRECT"
	// All collaborators the authenticated user can see.
	CollaboratorAffiliationAll CollaboratorAffiliation = "ALL"
)

var AllCollaboratorAffiliation = []CollaboratorAffiliation{
	CollaboratorAffiliationOutside,
	CollaboratorAffiliationDirect,
	CollaboratorAffiliationAll,
}

func (e CollaboratorAffiliation) IsValid() bool {
	switch e {
	case CollaboratorAffiliationOutside, CollaboratorAffiliationDirect, CollaboratorAffiliationAll:
		return true
	}
	return false
}

func (e CollaboratorAffiliation) String() string {
	return string(e)
}

func (e *CollaboratorAffiliation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollaboratorAffiliation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollaboratorAffiliation", str)
	}
	return nil
}

func (e CollaboratorAffiliation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A comment author association with repository.
type CommentAuthorAssociation string

const (
	// Author is a member of the organization that owns the repository.
	CommentAuthorAssociationMember CommentAuthorAssociation = "MEMBER"
	// Author is the owner of the repository.
	CommentAuthorAssociationOwner CommentAuthorAssociation = "OWNER"
	// Author is a placeholder for an unclaimed user.
	CommentAuthorAssociationMannequin CommentAuthorAssociation = "MANNEQUIN"
	// Author has been invited to collaborate on the repository.
	CommentAuthorAssociationCollaborator CommentAuthorAssociation = "COLLABORATOR"
	// Author has previously committed to the repository.
	CommentAuthorAssociationContributor CommentAuthorAssociation = "CONTRIBUTOR"
	// Author has not previously committed to the repository.
	CommentAuthorAssociationFirstTimeContributor CommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	// Author has not previously committed to GitHub.
	CommentAuthorAssociationFirstTimer CommentAuthorAssociation = "FIRST_TIMER"
	// Author has no association with the repository.
	CommentAuthorAssociationNone CommentAuthorAssociation = "NONE"
)

var AllCommentAuthorAssociation = []CommentAuthorAssociation{
	CommentAuthorAssociationMember,
	CommentAuthorAssociationOwner,
	CommentAuthorAssociationMannequin,
	CommentAuthorAssociationCollaborator,
	CommentAuthorAssociationContributor,
	CommentAuthorAssociationFirstTimeContributor,
	CommentAuthorAssociationFirstTimer,
	CommentAuthorAssociationNone,
}

func (e CommentAuthorAssociation) IsValid() bool {
	switch e {
	case CommentAuthorAssociationMember, CommentAuthorAssociationOwner, CommentAuthorAssociationMannequin, CommentAuthorAssociationCollaborator, CommentAuthorAssociationContributor, CommentAuthorAssociationFirstTimeContributor, CommentAuthorAssociationFirstTimer, CommentAuthorAssociationNone:
		return true
	}
	return false
}

func (e CommentAuthorAssociation) String() string {
	return string(e)
}

func (e *CommentAuthorAssociation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentAuthorAssociation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentAuthorAssociation", str)
	}
	return nil
}

func (e CommentAuthorAssociation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible errors that will prevent a user from updating a comment.
type CommentCannotUpdateReason string

const (
	// Unable to create comment because repository is archived.
	CommentCannotUpdateReasonArchived CommentCannotUpdateReason = "ARCHIVED"
	// You must be the author or have write access to this repository to update this comment.
	CommentCannotUpdateReasonInsufficientAccess CommentCannotUpdateReason = "INSUFFICIENT_ACCESS"
	// Unable to create comment because issue is locked.
	CommentCannotUpdateReasonLocked CommentCannotUpdateReason = "LOCKED"
	// You must be logged in to update this comment.
	CommentCannotUpdateReasonLoginRequired CommentCannotUpdateReason = "LOGIN_REQUIRED"
	// Repository is under maintenance.
	CommentCannotUpdateReasonMaintenance CommentCannotUpdateReason = "MAINTENANCE"
	// At least one email address must be verified to update this comment.
	CommentCannotUpdateReasonVerifiedEmailRequired CommentCannotUpdateReason = "VERIFIED_EMAIL_REQUIRED"
	// You cannot update this comment
	CommentCannotUpdateReasonDenied CommentCannotUpdateReason = "DENIED"
)

var AllCommentCannotUpdateReason = []CommentCannotUpdateReason{
	CommentCannotUpdateReasonArchived,
	CommentCannotUpdateReasonInsufficientAccess,
	CommentCannotUpdateReasonLocked,
	CommentCannotUpdateReasonLoginRequired,
	CommentCannotUpdateReasonMaintenance,
	CommentCannotUpdateReasonVerifiedEmailRequired,
	CommentCannotUpdateReasonDenied,
}

func (e CommentCannotUpdateReason) IsValid() bool {
	switch e {
	case CommentCannotUpdateReasonArchived, CommentCannotUpdateReasonInsufficientAccess, CommentCannotUpdateReasonLocked, CommentCannotUpdateReasonLoginRequired, CommentCannotUpdateReasonMaintenance, CommentCannotUpdateReasonVerifiedEmailRequired, CommentCannotUpdateReasonDenied:
		return true
	}
	return false
}

func (e CommentCannotUpdateReason) String() string {
	return string(e)
}

func (e *CommentCannotUpdateReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentCannotUpdateReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentCannotUpdateReason", str)
	}
	return nil
}

func (e CommentCannotUpdateReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which commit contribution connections can be ordered.
type CommitContributionOrderField string

const (
	// Order commit contributions by when they were made.
	CommitContributionOrderFieldOccurredAt CommitContributionOrderField = "OCCURRED_AT"
	// Order commit contributions by how many commits they represent.
	CommitContributionOrderFieldCommitCount CommitContributionOrderField = "COMMIT_COUNT"
)

var AllCommitContributionOrderField = []CommitContributionOrderField{
	CommitContributionOrderFieldOccurredAt,
	CommitContributionOrderFieldCommitCount,
}

func (e CommitContributionOrderField) IsValid() bool {
	switch e {
	case CommitContributionOrderFieldOccurredAt, CommitContributionOrderFieldCommitCount:
		return true
	}
	return false
}

func (e CommitContributionOrderField) String() string {
	return string(e)
}

func (e *CommitContributionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommitContributionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommitContributionOrderField", str)
	}
	return nil
}

func (e CommitContributionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The status of a git comparison between two refs.
type ComparisonStatus string

const (
	// The head ref is both ahead and behind of the base ref, indicating git history has diverged.
	ComparisonStatusDiverged ComparisonStatus = "DIVERGED"
	// The head ref is ahead of the base ref.
	ComparisonStatusAhead ComparisonStatus = "AHEAD"
	// The head ref is behind the base ref.
	ComparisonStatusBehind ComparisonStatus = "BEHIND"
	// The head ref and base ref are identical.
	ComparisonStatusIdentical ComparisonStatus = "IDENTICAL"
)

var AllComparisonStatus = []ComparisonStatus{
	ComparisonStatusDiverged,
	ComparisonStatusAhead,
	ComparisonStatusBehind,
	ComparisonStatusIdentical,
}

func (e ComparisonStatus) IsValid() bool {
	switch e {
	case ComparisonStatusDiverged, ComparisonStatusAhead, ComparisonStatusBehind, ComparisonStatusIdentical:
		return true
	}
	return false
}

func (e ComparisonStatus) String() string {
	return string(e)
}

func (e *ComparisonStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparisonStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparisonStatus", str)
	}
	return nil
}

func (e ComparisonStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Varying levels of contributions from none to many.
type ContributionLevel string

const (
	// No contributions occurred.
	ContributionLevelNone ContributionLevel = "NONE"
	// Lowest 25% of days of contributions.
	ContributionLevelFirstQuartile ContributionLevel = "FIRST_QUARTILE"
	// Second lowest 25% of days of contributions. More contributions than the first quartile.
	ContributionLevelSecondQuartile ContributionLevel = "SECOND_QUARTILE"
	// Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
	ContributionLevelThirdQuartile ContributionLevel = "THIRD_QUARTILE"
	// Highest 25% of days of contributions. More contributions than the third quartile.
	ContributionLevelFourthQuartile ContributionLevel = "FOURTH_QUARTILE"
)

var AllContributionLevel = []ContributionLevel{
	ContributionLevelNone,
	ContributionLevelFirstQuartile,
	ContributionLevelSecondQuartile,
	ContributionLevelThirdQuartile,
	ContributionLevelFourthQuartile,
}

func (e ContributionLevel) IsValid() bool {
	switch e {
	case ContributionLevelNone, ContributionLevelFirstQuartile, ContributionLevelSecondQuartile, ContributionLevelThirdQuartile, ContributionLevelFourthQuartile:
		return true
	}
	return false
}

func (e ContributionLevel) String() string {
	return string(e)
}

func (e *ContributionLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContributionLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContributionLevel", str)
	}
	return nil
}

func (e ContributionLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible base permissions for repositories.
type DefaultRepositoryPermissionField string

const (
	// No access
	DefaultRepositoryPermissionFieldNone DefaultRepositoryPermissionField = "NONE"
	// Can read repos by default
	DefaultRepositoryPermissionFieldRead DefaultRepositoryPermissionField = "READ"
	// Can read and write repos by default
	DefaultRepositoryPermissionFieldWrite DefaultRepositoryPermissionField = "WRITE"
	// Can read, write, and administrate repos by default
	DefaultRepositoryPermissionFieldAdmin DefaultRepositoryPermissionField = "ADMIN"
)

var AllDefaultRepositoryPermissionField = []DefaultRepositoryPermissionField{
	DefaultRepositoryPermissionFieldNone,
	DefaultRepositoryPermissionFieldRead,
	DefaultRepositoryPermissionFieldWrite,
	DefaultRepositoryPermissionFieldAdmin,
}

func (e DefaultRepositoryPermissionField) IsValid() bool {
	switch e {
	case DefaultRepositoryPermissionFieldNone, DefaultRepositoryPermissionFieldRead, DefaultRepositoryPermissionFieldWrite, DefaultRepositoryPermissionFieldAdmin:
		return true
	}
	return false
}

func (e DefaultRepositoryPermissionField) String() string {
	return string(e)
}

func (e *DefaultRepositoryPermissionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DefaultRepositoryPermissionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DefaultRepositoryPermissionField", str)
	}
	return nil
}

func (e DefaultRepositoryPermissionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible ecosystems of a dependency graph package.
type DependencyGraphEcosystem string

const (
	// Ruby gems hosted at RubyGems.org
	DependencyGraphEcosystemRubygems DependencyGraphEcosystem = "RUBYGEMS"
	// JavaScript packages hosted at npmjs.com
	DependencyGraphEcosystemNpm DependencyGraphEcosystem = "NPM"
	// Python packages hosted at PyPI.org
	DependencyGraphEcosystemPip DependencyGraphEcosystem = "PIP"
	// Java artifacts hosted at the Maven central repository
	DependencyGraphEcosystemMaven DependencyGraphEcosystem = "MAVEN"
	// .NET packages hosted at the NuGet Gallery
	DependencyGraphEcosystemNuget DependencyGraphEcosystem = "NUGET"
	// PHP packages hosted at packagist.org
	DependencyGraphEcosystemComposer DependencyGraphEcosystem = "COMPOSER"
	// Go modules
	DependencyGraphEcosystemGo DependencyGraphEcosystem = "GO"
	// GitHub Actions
	DependencyGraphEcosystemActions DependencyGraphEcosystem = "ACTIONS"
	// Rust crates
	DependencyGraphEcosystemRust DependencyGraphEcosystem = "RUST"
	// Dart packages hosted at pub.dev
	DependencyGraphEcosystemPub DependencyGraphEcosystem = "PUB"
	// Swift packages
	DependencyGraphEcosystemSwift DependencyGraphEcosystem = "SWIFT"
)

var AllDependencyGraphEcosystem = []DependencyGraphEcosystem{
	DependencyGraphEcosystemRubygems,
	DependencyGraphEcosystemNpm,
	DependencyGraphEcosystemPip,
	DependencyGraphEcosystemMaven,
	DependencyGraphEcosystemNuget,
	DependencyGraphEcosystemComposer,
	DependencyGraphEcosystemGo,
	DependencyGraphEcosystemActions,
	DependencyGraphEcosystemRust,
	DependencyGraphEcosystemPub,
	DependencyGraphEcosystemSwift,
}

func (e DependencyGraphEcosystem) IsValid() bool {
	switch e {
	case DependencyGraphEcosystemRubygems, DependencyGraphEcosystemNpm, DependencyGraphEcosystemPip, DependencyGraphEcosystemMaven, DependencyGraphEcosystemNuget, DependencyGraphEcosystemComposer, DependencyGraphEcosystemGo, DependencyGraphEcosystemActions, DependencyGraphEcosystemRust, DependencyGraphEcosystemPub, DependencyGraphEcosystemSwift:
		return true
	}
	return false
}

func (e DependencyGraphEcosystem) String() string {
	return string(e)
}

func (e *DependencyGraphEcosystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DependencyGraphEcosystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DependencyGraphEcosystem", str)
	}
	return nil
}

func (e DependencyGraphEcosystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which deployment connections can be ordered.
type DeploymentOrderField string

const (
	// Order collection by creation time
	DeploymentOrderFieldCreatedAt DeploymentOrderField = "CREATED_AT"
)

var AllDeploymentOrderField = []DeploymentOrderField{
	DeploymentOrderFieldCreatedAt,
}

func (e DeploymentOrderField) IsValid() bool {
	switch e {
	case DeploymentOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e DeploymentOrderField) String() string {
	return string(e)
}

func (e *DeploymentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentOrderField", str)
	}
	return nil
}

func (e DeploymentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible protection rule types.
type DeploymentProtectionRuleType string

const (
	// Required reviewers
	DeploymentProtectionRuleTypeRequiredReviewers DeploymentProtectionRuleType = "REQUIRED_REVIEWERS"
	// Wait timer
	DeploymentProtectionRuleTypeWaitTimer DeploymentProtectionRuleType = "WAIT_TIMER"
)

var AllDeploymentProtectionRuleType = []DeploymentProtectionRuleType{
	DeploymentProtectionRuleTypeRequiredReviewers,
	DeploymentProtectionRuleTypeWaitTimer,
}

func (e DeploymentProtectionRuleType) IsValid() bool {
	switch e {
	case DeploymentProtectionRuleTypeRequiredReviewers, DeploymentProtectionRuleTypeWaitTimer:
		return true
	}
	return false
}

func (e DeploymentProtectionRuleType) String() string {
	return string(e)
}

func (e *DeploymentProtectionRuleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentProtectionRuleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentProtectionRuleType", str)
	}
	return nil
}

func (e DeploymentProtectionRuleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a deployment review.
type DeploymentReviewState string

const (
	// The deployment was approved.
	DeploymentReviewStateApproved DeploymentReviewState = "APPROVED"
	// The deployment was rejected.
	DeploymentReviewStateRejected DeploymentReviewState = "REJECTED"
)

var AllDeploymentReviewState = []DeploymentReviewState{
	DeploymentReviewStateApproved,
	DeploymentReviewStateRejected,
}

func (e DeploymentReviewState) IsValid() bool {
	switch e {
	case DeploymentReviewStateApproved, DeploymentReviewStateRejected:
		return true
	}
	return false
}

func (e DeploymentReviewState) String() string {
	return string(e)
}

func (e *DeploymentReviewState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentReviewState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentReviewState", str)
	}
	return nil
}

func (e DeploymentReviewState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states in which a deployment can be.
type DeploymentState string

const (
	// The pending deployment was not updated after 30 minutes.
	DeploymentStateAbandoned DeploymentState = "ABANDONED"
	// The deployment is currently active.
	DeploymentStateActive DeploymentState = "ACTIVE"
	// An inactive transient deployment.
	DeploymentStateDestroyed DeploymentState = "DESTROYED"
	// The deployment experienced an error.
	DeploymentStateError DeploymentState = "ERROR"
	// The deployment has failed.
	DeploymentStateFailure DeploymentState = "FAILURE"
	// The deployment is inactive.
	DeploymentStateInactive DeploymentState = "INACTIVE"
	// The deployment is pending.
	DeploymentStatePending DeploymentState = "PENDING"
	// The deployment was successful.
	DeploymentStateSuccess DeploymentState = "SUCCESS"
	// The deployment has queued
	DeploymentStateQueued DeploymentState = "QUEUED"
	// The deployment is in progress.
	DeploymentStateInProgress DeploymentState = "IN_PROGRESS"
	// The deployment is waiting.
	DeploymentStateWaiting DeploymentState = "WAITING"
)

var AllDeploymentState = []DeploymentState{
	DeploymentStateAbandoned,
	DeploymentStateActive,
	DeploymentStateDestroyed,
	DeploymentStateError,
	DeploymentStateFailure,
	DeploymentStateInactive,
	DeploymentStatePending,
	DeploymentStateSuccess,
	DeploymentStateQueued,
	DeploymentStateInProgress,
	DeploymentStateWaiting,
}

func (e DeploymentState) IsValid() bool {
	switch e {
	case DeploymentStateAbandoned, DeploymentStateActive, DeploymentStateDestroyed, DeploymentStateError, DeploymentStateFailure, DeploymentStateInactive, DeploymentStatePending, DeploymentStateSuccess, DeploymentStateQueued, DeploymentStateInProgress, DeploymentStateWaiting:
		return true
	}
	return false
}

func (e DeploymentState) String() string {
	return string(e)
}

func (e *DeploymentState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentState", str)
	}
	return nil
}

func (e DeploymentState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a deployment status.
type DeploymentStatusState string

const (
	// The deployment is pending.
	DeploymentStatusStatePending DeploymentStatusState = "PENDING"
	// The deployment was successful.
	DeploymentStatusStateSuccess DeploymentStatusState = "SUCCESS"
	// The deployment has failed.
	DeploymentStatusStateFailure DeploymentStatusState = "FAILURE"
	// The deployment is inactive.
	DeploymentStatusStateInactive DeploymentStatusState = "INACTIVE"
	// The deployment experienced an error.
	DeploymentStatusStateError DeploymentStatusState = "ERROR"
	// The deployment is queued
	DeploymentStatusStateQueued DeploymentStatusState = "QUEUED"
	// The deployment is in progress.
	DeploymentStatusStateInProgress DeploymentStatusState = "IN_PROGRESS"
	// The deployment is waiting.
	DeploymentStatusStateWaiting DeploymentStatusState = "WAITING"
)

var AllDeploymentStatusState = []DeploymentStatusState{
	DeploymentStatusStatePending,
	DeploymentStatusStateSuccess,
	DeploymentStatusStateFailure,
	DeploymentStatusStateInactive,
	DeploymentStatusStateError,
	DeploymentStatusStateQueued,
	DeploymentStatusStateInProgress,
	DeploymentStatusStateWaiting,
}

func (e DeploymentStatusState) IsValid() bool {
	switch e {
	case DeploymentStatusStatePending, DeploymentStatusStateSuccess, DeploymentStatusStateFailure, DeploymentStatusStateInactive, DeploymentStatusStateError, DeploymentStatusStateQueued, DeploymentStatusStateInProgress, DeploymentStatusStateWaiting:
		return true
	}
	return false
}

func (e DeploymentStatusState) String() string {
	return string(e)
}

func (e *DeploymentStatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentStatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentStatusState", str)
	}
	return nil
}

func (e DeploymentStatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible sides of a diff.
type DiffSide string

const (
	// The left side of the diff.
	DiffSideLeft DiffSide = "LEFT"
	// The right side of the diff.
	DiffSideRight DiffSide = "RIGHT"
)

var AllDiffSide = []DiffSide{
	DiffSideLeft,
	DiffSideRight,
}

func (e DiffSide) IsValid() bool {
	switch e {
	case DiffSideLeft, DiffSideRight:
		return true
	}
	return false
}

func (e DiffSide) String() string {
	return string(e)
}

func (e *DiffSide) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiffSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiffSide", str)
	}
	return nil
}

func (e DiffSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible reasons for closing a discussion.
type DiscussionCloseReason string

const (
	// The discussion has been resolved
	DiscussionCloseReasonResolved DiscussionCloseReason = "RESOLVED"
	// The discussion is no longer relevant
	DiscussionCloseReasonOutdated DiscussionCloseReason = "OUTDATED"
	// The discussion is a duplicate of another
	DiscussionCloseReasonDuplicate DiscussionCloseReason = "DUPLICATE"
)

var AllDiscussionCloseReason = []DiscussionCloseReason{
	DiscussionCloseReasonResolved,
	DiscussionCloseReasonOutdated,
	DiscussionCloseReasonDuplicate,
}

func (e DiscussionCloseReason) IsValid() bool {
	switch e {
	case DiscussionCloseReasonResolved, DiscussionCloseReasonOutdated, DiscussionCloseReasonDuplicate:
		return true
	}
	return false
}

func (e DiscussionCloseReason) String() string {
	return string(e)
}

func (e *DiscussionCloseReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionCloseReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionCloseReason", str)
	}
	return nil
}

func (e DiscussionCloseReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which discussion connections can be ordered.
type DiscussionOrderField string

const (
	// Order discussions by creation time.
	DiscussionOrderFieldCreatedAt DiscussionOrderField = "CREATED_AT"
	// Order discussions by most recent modification time.
	DiscussionOrderFieldUpdatedAt DiscussionOrderField = "UPDATED_AT"
)

var AllDiscussionOrderField = []DiscussionOrderField{
	DiscussionOrderFieldCreatedAt,
	DiscussionOrderFieldUpdatedAt,
}

func (e DiscussionOrderField) IsValid() bool {
	switch e {
	case DiscussionOrderFieldCreatedAt, DiscussionOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e DiscussionOrderField) String() string {
	return string(e)
}

func (e *DiscussionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionOrderField", str)
	}
	return nil
}

func (e DiscussionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which discussion poll option connections can be ordered.
type DiscussionPollOptionOrderField string

const (
	// Order poll options by the order that the poll author specified when creating the poll.
	DiscussionPollOptionOrderFieldAuthoredOrder DiscussionPollOptionOrderField = "AUTHORED_ORDER"
	// Order poll options by the number of votes it has.
	DiscussionPollOptionOrderFieldVoteCount DiscussionPollOptionOrderField = "VOTE_COUNT"
)

var AllDiscussionPollOptionOrderField = []DiscussionPollOptionOrderField{
	DiscussionPollOptionOrderFieldAuthoredOrder,
	DiscussionPollOptionOrderFieldVoteCount,
}

func (e DiscussionPollOptionOrderField) IsValid() bool {
	switch e {
	case DiscussionPollOptionOrderFieldAuthoredOrder, DiscussionPollOptionOrderFieldVoteCount:
		return true
	}
	return false
}

func (e DiscussionPollOptionOrderField) String() string {
	return string(e)
}

func (e *DiscussionPollOptionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionPollOptionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionPollOptionOrderField", str)
	}
	return nil
}

func (e DiscussionPollOptionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a discussion.
type DiscussionState string

const (
	// A discussion that is open
	DiscussionStateOpen DiscussionState = "OPEN"
	// A discussion that has been closed
	DiscussionStateClosed DiscussionState = "CLOSED"
)

var AllDiscussionState = []DiscussionState{
	DiscussionStateOpen,
	DiscussionStateClosed,
}

func (e DiscussionState) IsValid() bool {
	switch e {
	case DiscussionStateOpen, DiscussionStateClosed:
		return true
	}
	return false
}

func (e DiscussionState) String() string {
	return string(e)
}

func (e *DiscussionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionState", str)
	}
	return nil
}

func (e DiscussionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible state reasons of a discussion.
type DiscussionStateReason string

const (
	// The discussion has been resolved
	DiscussionStateReasonResolved DiscussionStateReason = "RESOLVED"
	// The discussion is no longer relevant
	DiscussionStateReasonOutdated DiscussionStateReason = "OUTDATED"
	// The discussion is a duplicate of another
	DiscussionStateReasonDuplicate DiscussionStateReason = "DUPLICATE"
	// The discussion was reopened
	DiscussionStateReasonReopened DiscussionStateReason = "REOPENED"
)

var AllDiscussionStateReason = []DiscussionStateReason{
	DiscussionStateReasonResolved,
	DiscussionStateReasonOutdated,
	DiscussionStateReasonDuplicate,
	DiscussionStateReasonReopened,
}

func (e DiscussionStateReason) IsValid() bool {
	switch e {
	case DiscussionStateReasonResolved, DiscussionStateReasonOutdated, DiscussionStateReasonDuplicate, DiscussionStateReasonReopened:
		return true
	}
	return false
}

func (e DiscussionStateReason) String() string {
	return string(e)
}

func (e *DiscussionStateReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionStateReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionStateReason", str)
	}
	return nil
}

func (e DiscussionStateReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible reasons that a Dependabot alert was dismissed.
type DismissReason string

const (
	// A fix has already been started
	DismissReasonFixStarted DismissReason = "FIX_STARTED"
	// No bandwidth to fix this
	DismissReasonNoBandwidth DismissReason = "NO_BANDWIDTH"
	// Risk is tolerable to this project
	DismissReasonTolerableRisk DismissReason = "TOLERABLE_RISK"
	// This alert is inaccurate or incorrect
	DismissReasonInaccurate DismissReason = "INACCURATE"
	// Vulnerable code is not actually used
	DismissReasonNotUsed DismissReason = "NOT_USED"
)

var AllDismissReason = []DismissReason{
	DismissReasonFixStarted,
	DismissReasonNoBandwidth,
	DismissReasonTolerableRisk,
	DismissReasonInaccurate,
	DismissReasonNotUsed,
}

func (e DismissReason) IsValid() bool {
	switch e {
	case DismissReasonFixStarted, DismissReasonNoBandwidth, DismissReasonTolerableRisk, DismissReasonInaccurate, DismissReasonNotUsed:
		return true
	}
	return false
}

func (e DismissReason) String() string {
	return string(e)
}

func (e *DismissReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DismissReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DismissReason", str)
	}
	return nil
}

func (e DismissReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which enterprise administrator invitation connections can be ordered.
type EnterpriseAdministratorInvitationOrderField string

const (
	// Order enterprise administrator member invitations by creation time
	EnterpriseAdministratorInvitationOrderFieldCreatedAt EnterpriseAdministratorInvitationOrderField = "CREATED_AT"
)

var AllEnterpriseAdministratorInvitationOrderField = []EnterpriseAdministratorInvitationOrderField{
	EnterpriseAdministratorInvitationOrderFieldCreatedAt,
}

func (e EnterpriseAdministratorInvitationOrderField) IsValid() bool {
	switch e {
	case EnterpriseAdministratorInvitationOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e EnterpriseAdministratorInvitationOrderField) String() string {
	return string(e)
}

func (e *EnterpriseAdministratorInvitationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAdministratorInvitationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAdministratorInvitationOrderField", str)
	}
	return nil
}

func (e EnterpriseAdministratorInvitationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible administrator roles in an enterprise account.
type EnterpriseAdministratorRole string

const (
	// Represents an owner of the enterprise account.
	EnterpriseAdministratorRoleOwner EnterpriseAdministratorRole = "OWNER"
	// Represents a billing manager of the enterprise account.
	EnterpriseAdministratorRoleBillingManager EnterpriseAdministratorRole = "BILLING_MANAGER"
)

var AllEnterpriseAdministratorRole = []EnterpriseAdministratorRole{
	EnterpriseAdministratorRoleOwner,
	EnterpriseAdministratorRoleBillingManager,
}

func (e EnterpriseAdministratorRole) IsValid() bool {
	switch e {
	case EnterpriseAdministratorRoleOwner, EnterpriseAdministratorRoleBillingManager:
		return true
	}
	return false
}

func (e EnterpriseAdministratorRole) String() string {
	return string(e)
}

func (e *EnterpriseAdministratorRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAdministratorRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAdministratorRole", str)
	}
	return nil
}

func (e EnterpriseAdministratorRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the enterprise allow private repository forking policy value.
type EnterpriseAllowPrivateRepositoryForkingPolicyValue string

const (
	// Members can fork a repository to an organization within this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizations EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS"
	// Members can fork a repository only within the same organization (intra-org).
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganization EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION"
	// Members can fork a repository to their user account or within the same organization.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganizationUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION_USER_ACCOUNTS"
	// Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizationsUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS"
	// Members can fork a repository to their user account.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueUserAccounts EnterpriseAllowPrivateRepositoryForkingPolicyValue = "USER_ACCOUNTS"
	// Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEverywhere EnterpriseAllowPrivateRepositoryForkingPolicyValue = "EVERYWHERE"
)

var AllEnterpriseAllowPrivateRepositoryForkingPolicyValue = []EnterpriseAllowPrivateRepositoryForkingPolicyValue{
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizations,
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganization,
	EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganizationUserAccounts,
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizationsUserAccounts,
	EnterpriseAllowPrivateRepositoryForkingPolicyValueUserAccounts,
	EnterpriseAllowPrivateRepositoryForkingPolicyValueEverywhere,
}

func (e EnterpriseAllowPrivateRepositoryForkingPolicyValue) IsValid() bool {
	switch e {
	case EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizations, EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganization, EnterpriseAllowPrivateRepositoryForkingPolicyValueSameOrganizationUserAccounts, EnterpriseAllowPrivateRepositoryForkingPolicyValueEnterpriseOrganizationsUserAccounts, EnterpriseAllowPrivateRepositoryForkingPolicyValueUserAccounts, EnterpriseAllowPrivateRepositoryForkingPolicyValueEverywhere:
		return true
	}
	return false
}

func (e EnterpriseAllowPrivateRepositoryForkingPolicyValue) String() string {
	return string(e)
}

func (e *EnterpriseAllowPrivateRepositoryForkingPolicyValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAllowPrivateRepositoryForkingPolicyValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAllowPrivateRepositoryForkingPolicyValue", str)
	}
	return nil
}

func (e EnterpriseAllowPrivateRepositoryForkingPolicyValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the enterprise base repository permission setting.
type EnterpriseDefaultRepositoryPermissionSettingValue string

const (
	// Organizations in the enterprise choose base repository permissions for their members.
	EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy EnterpriseDefaultRepositoryPermissionSettingValue = "NO_POLICY"
	// Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueAdmin EnterpriseDefaultRepositoryPermissionSettingValue = "ADMIN"
	// Organization members will be able to clone, pull, and push all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueWrite EnterpriseDefaultRepositoryPermissionSettingValue = "WRITE"
	// Organization members will be able to clone and pull all organization repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueRead EnterpriseDefaultRepositoryPermissionSettingValue = "READ"
	// Organization members will only be able to clone and pull public repositories.
	EnterpriseDefaultRepositoryPermissionSettingValueNone EnterpriseDefaultRepositoryPermissionSettingValue = "NONE"
)

var AllEnterpriseDefaultRepositoryPermissionSettingValue = []EnterpriseDefaultRepositoryPermissionSettingValue{
	EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy,
	EnterpriseDefaultRepositoryPermissionSettingValueAdmin,
	EnterpriseDefaultRepositoryPermissionSettingValueWrite,
	EnterpriseDefaultRepositoryPermissionSettingValueRead,
	EnterpriseDefaultRepositoryPermissionSettingValueNone,
}

func (e EnterpriseDefaultRepositoryPermissionSettingValue) IsValid() bool {
	switch e {
	case EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy, EnterpriseDefaultRepositoryPermissionSettingValueAdmin, EnterpriseDefaultRepositoryPermissionSettingValueWrite, EnterpriseDefaultRepositoryPermissionSettingValueRead, EnterpriseDefaultRepositoryPermissionSettingValueNone:
		return true
	}
	return false
}

func (e EnterpriseDefaultRepositoryPermissionSettingValue) String() string {
	return string(e)
}

func (e *EnterpriseDefaultRepositoryPermissionSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseDefaultRepositoryPermissionSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseDefaultRepositoryPermissionSettingValue", str)
	}
	return nil
}

func (e EnterpriseDefaultRepositoryPermissionSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for an enabled/disabled enterprise setting.
type EnterpriseEnabledDisabledSettingValue string

const (
	// The setting is enabled for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueEnabled EnterpriseEnabledDisabledSettingValue = "ENABLED"
	// The setting is disabled for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueDisabled EnterpriseEnabledDisabledSettingValue = "DISABLED"
	// There is no policy set for organizations in the enterprise.
	EnterpriseEnabledDisabledSettingValueNoPolicy EnterpriseEnabledDisabledSettingValue = "NO_POLICY"
)

var AllEnterpriseEnabledDisabledSettingValue = []EnterpriseEnabledDisabledSettingValue{
	EnterpriseEnabledDisabledSettingValueEnabled,
	EnterpriseEnabledDisabledSettingValueDisabled,
	EnterpriseEnabledDisabledSettingValueNoPolicy,
}

func (e EnterpriseEnabledDisabledSettingValue) IsValid() bool {
	switch e {
	case EnterpriseEnabledDisabledSettingValueEnabled, EnterpriseEnabledDisabledSettingValueDisabled, EnterpriseEnabledDisabledSettingValueNoPolicy:
		return true
	}
	return false
}

func (e EnterpriseEnabledDisabledSettingValue) String() string {
	return string(e)
}

func (e *EnterpriseEnabledDisabledSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseEnabledDisabledSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseEnabledDisabledSettingValue", str)
	}
	return nil
}

func (e EnterpriseEnabledDisabledSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for an enabled/no policy enterprise setting.
type EnterpriseEnabledSettingValue string

const (
	// The setting is enabled for organizations in the enterprise.
	EnterpriseEnabledSettingValueEnabled EnterpriseEnabledSettingValue = "ENABLED"
	// There is no policy set for organizations in the enterprise.
	EnterpriseEnabledSettingValueNoPolicy EnterpriseEnabledSettingValue = "NO_POLICY"
)

var AllEnterpriseEnabledSettingValue = []EnterpriseEnabledSettingValue{
	EnterpriseEnabledSettingValueEnabled,
	EnterpriseEnabledSettingValueNoPolicy,
}

func (e EnterpriseEnabledSettingValue) IsValid() bool {
	switch e {
	case EnterpriseEnabledSettingValueEnabled, EnterpriseEnabledSettingValueNoPolicy:
		return true
	}
	return false
}

func (e EnterpriseEnabledSettingValue) String() string {
	return string(e)
}

func (e *EnterpriseEnabledSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseEnabledSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseEnabledSettingValue", str)
	}
	return nil
}

func (e EnterpriseEnabledSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which enterprise member connections can be ordered.
type EnterpriseMemberOrderField string

const (
	// Order enterprise members by login
	EnterpriseMemberOrderFieldLogin EnterpriseMemberOrderField = "LOGIN"
	// Order enterprise members by creation time
	EnterpriseMemberOrderFieldCreatedAt EnterpriseMemberOrderField = "CREATED_AT"
)

var AllEnterpriseMemberOrderField = []EnterpriseMemberOrderField{
	EnterpriseMemberOrderFieldLogin,
	EnterpriseMemberOrderFieldCreatedAt,
}

func (e EnterpriseMemberOrderField) IsValid() bool {
	switch e {
	case EnterpriseMemberOrderFieldLogin, EnterpriseMemberOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e EnterpriseMemberOrderField) String() string {
	return string(e)
}

func (e *EnterpriseMemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseMemberOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseMemberOrderField", str)
	}
	return nil
}

func (e EnterpriseMemberOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the enterprise members can create repositories setting.
type EnterpriseMembersCanCreateRepositoriesSettingValue string

const (
	// Organization administrators choose whether to allow members to create repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueNoPolicy EnterpriseMembersCanCreateRepositoriesSettingValue = "NO_POLICY"
	// Members will be able to create public and private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueAll EnterpriseMembersCanCreateRepositoriesSettingValue = "ALL"
	// Members will be able to create only public repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValuePublic EnterpriseMembersCanCreateRepositoriesSettingValue = "PUBLIC"
	// Members will be able to create only private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValuePrivate EnterpriseMembersCanCreateRepositoriesSettingValue = "PRIVATE"
	// Members will not be able to create public or private repositories.
	EnterpriseMembersCanCreateRepositoriesSettingValueDisabled EnterpriseMembersCanCreateRepositoriesSettingValue = "DISABLED"
)

var AllEnterpriseMembersCanCreateRepositoriesSettingValue = []EnterpriseMembersCanCreateRepositoriesSettingValue{
	EnterpriseMembersCanCreateRepositoriesSettingValueNoPolicy,
	EnterpriseMembersCanCreateRepositoriesSettingValueAll,
	EnterpriseMembersCanCreateRepositoriesSettingValuePublic,
	EnterpriseMembersCanCreateRepositoriesSettingValuePrivate,
	EnterpriseMembersCanCreateRepositoriesSettingValueDisabled,
}

func (e EnterpriseMembersCanCreateRepositoriesSettingValue) IsValid() bool {
	switch e {
	case EnterpriseMembersCanCreateRepositoriesSettingValueNoPolicy, EnterpriseMembersCanCreateRepositoriesSettingValueAll, EnterpriseMembersCanCreateRepositoriesSettingValuePublic, EnterpriseMembersCanCreateRepositoriesSettingValuePrivate, EnterpriseMembersCanCreateRepositoriesSettingValueDisabled:
		return true
	}
	return false
}

func (e EnterpriseMembersCanCreateRepositoriesSettingValue) String() string {
	return string(e)
}

func (e *EnterpriseMembersCanCreateRepositoriesSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseMembersCanCreateRepositoriesSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseMembersCanCreateRepositoriesSettingValue", str)
	}
	return nil
}

func (e EnterpriseMembersCanCreateRepositoriesSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the members can make purchases setting.
type EnterpriseMembersCanMakePurchasesSettingValue string

const (
	// The setting is enabled for organizations in the enterprise.
	EnterpriseMembersCanMakePurchasesSettingValueEnabled EnterpriseMembersCanMakePurchasesSettingValue = "ENABLED"
	// The setting is disabled for organizations in the enterprise.
	EnterpriseMembersCanMakePurchasesSettingValueDisabled EnterpriseMembersCanMakePurchasesSettingValue = "DISABLED"
)

var AllEnterpriseMembersCanMakePurchasesSettingValue = []EnterpriseMembersCanMakePurchasesSettingValue{
	EnterpriseMembersCanMakePurchasesSettingValueEnabled,
	EnterpriseMembersCanMakePurchasesSettingValueDisabled,
}

func (e EnterpriseMembersCanMakePurchasesSettingValue) IsValid() bool {
	switch e {
	case EnterpriseMembersCanMakePurchasesSettingValueEnabled, EnterpriseMembersCanMakePurchasesSettingValueDisabled:
		return true
	}
	return false
}

func (e EnterpriseMembersCanMakePurchasesSettingValue) String() string {
	return string(e)
}

func (e *EnterpriseMembersCanMakePurchasesSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseMembersCanMakePurchasesSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseMembersCanMakePurchasesSettingValue", str)
	}
	return nil
}

func (e EnterpriseMembersCanMakePurchasesSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values we have for filtering Platform::Objects::User#enterprises.
type EnterpriseMembershipType string

const (
	// Returns all enterprises in which the user is a member, admin, or billing manager.
	EnterpriseMembershipTypeAll EnterpriseMembershipType = "ALL"
	// Returns all enterprises in which the user is an admin.
	EnterpriseMembershipTypeAdmin EnterpriseMembershipType = "ADMIN"
	// Returns all enterprises in which the user is a billing manager.
	EnterpriseMembershipTypeBillingManager EnterpriseMembershipType = "BILLING_MANAGER"
	// Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
	EnterpriseMembershipTypeOrgMembership EnterpriseMembershipType = "ORG_MEMBERSHIP"
)

var AllEnterpriseMembershipType = []EnterpriseMembershipType{
	EnterpriseMembershipTypeAll,
	EnterpriseMembershipTypeAdmin,
	EnterpriseMembershipTypeBillingManager,
	EnterpriseMembershipTypeOrgMembership,
}

func (e EnterpriseMembershipType) IsValid() bool {
	switch e {
	case EnterpriseMembershipTypeAll, EnterpriseMembershipTypeAdmin, EnterpriseMembershipTypeBillingManager, EnterpriseMembershipTypeOrgMembership:
		return true
	}
	return false
}

func (e EnterpriseMembershipType) String() string {
	return string(e)
}

func (e *EnterpriseMembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseMembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseMembershipType", str)
	}
	return nil
}

func (e EnterpriseMembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which enterprise connections can be ordered.
type EnterpriseOrderField string

const (
	// Order enterprises by name
	EnterpriseOrderFieldName EnterpriseOrderField = "NAME"
)

var AllEnterpriseOrderField = []EnterpriseOrderField{
	EnterpriseOrderFieldName,
}

func (e EnterpriseOrderField) IsValid() bool {
	switch e {
	case EnterpriseOrderFieldName:
		return true
	}
	return false
}

func (e EnterpriseOrderField) String() string {
	return string(e)
}

func (e *EnterpriseOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseOrderField", str)
	}
	return nil
}

func (e EnterpriseOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Enterprise Server installation connections can be ordered.
type EnterpriseServerInstallationOrderField string

const (
	// Order Enterprise Server installations by host name
	EnterpriseServerInstallationOrderFieldHostName EnterpriseServerInstallationOrderField = "HOST_NAME"
	// Order Enterprise Server installations by customer name
	EnterpriseServerInstallationOrderFieldCustomerName EnterpriseServerInstallationOrderField = "CUSTOMER_NAME"
	// Order Enterprise Server installations by creation time
	EnterpriseServerInstallationOrderFieldCreatedAt EnterpriseServerInstallationOrderField = "CREATED_AT"
)

var AllEnterpriseServerInstallationOrderField = []EnterpriseServerInstallationOrderField{
	EnterpriseServerInstallationOrderFieldHostName,
	EnterpriseServerInstallationOrderFieldCustomerName,
	EnterpriseServerInstallationOrderFieldCreatedAt,
}

func (e EnterpriseServerInstallationOrderField) IsValid() bool {
	switch e {
	case EnterpriseServerInstallationOrderFieldHostName, EnterpriseServerInstallationOrderFieldCustomerName, EnterpriseServerInstallationOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e EnterpriseServerInstallationOrderField) String() string {
	return string(e)
}

func (e *EnterpriseServerInstallationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseServerInstallationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseServerInstallationOrderField", str)
	}
	return nil
}

func (e EnterpriseServerInstallationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Enterprise Server user account email connections can be ordered.
type EnterpriseServerUserAccountEmailOrderField string

const (
	// Order emails by email
	EnterpriseServerUserAccountEmailOrderFieldEmail EnterpriseServerUserAccountEmailOrderField = "EMAIL"
)

var AllEnterpriseServerUserAccountEmailOrderField = []EnterpriseServerUserAccountEmailOrderField{
	EnterpriseServerUserAccountEmailOrderFieldEmail,
}

func (e EnterpriseServerUserAccountEmailOrderField) IsValid() bool {
	switch e {
	case EnterpriseServerUserAccountEmailOrderFieldEmail:
		return true
	}
	return false
}

func (e EnterpriseServerUserAccountEmailOrderField) String() string {
	return string(e)
}

func (e *EnterpriseServerUserAccountEmailOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseServerUserAccountEmailOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseServerUserAccountEmailOrderField", str)
	}
	return nil
}

func (e EnterpriseServerUserAccountEmailOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Enterprise Server user account connections can be ordered.
type EnterpriseServerUserAccountOrderField string

const (
	// Order user accounts by login
	EnterpriseServerUserAccountOrderFieldLogin EnterpriseServerUserAccountOrderField = "LOGIN"
	// Order user accounts by creation time on the Enterprise Server installation
	EnterpriseServerUserAccountOrderFieldRemoteCreatedAt EnterpriseServerUserAccountOrderField = "REMOTE_CREATED_AT"
)

var AllEnterpriseServerUserAccountOrderField = []EnterpriseServerUserAccountOrderField{
	EnterpriseServerUserAccountOrderFieldLogin,
	EnterpriseServerUserAccountOrderFieldRemoteCreatedAt,
}

func (e EnterpriseServerUserAccountOrderField) IsValid() bool {
	switch e {
	case EnterpriseServerUserAccountOrderFieldLogin, EnterpriseServerUserAccountOrderFieldRemoteCreatedAt:
		return true
	}
	return false
}

func (e EnterpriseServerUserAccountOrderField) String() string {
	return string(e)
}

func (e *EnterpriseServerUserAccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseServerUserAccountOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseServerUserAccountOrderField", str)
	}
	return nil
}

func (e EnterpriseServerUserAccountOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Enterprise Server user accounts upload connections can be ordered.
type EnterpriseServerUserAccountsUploadOrderField string

const (
	// Order user accounts uploads by creation time
	EnterpriseServerUserAccountsUploadOrderFieldCreatedAt EnterpriseServerUserAccountsUploadOrderField = "CREATED_AT"
)

var AllEnterpriseServerUserAccountsUploadOrderField = []EnterpriseServerUserAccountsUploadOrderField{
	EnterpriseServerUserAccountsUploadOrderFieldCreatedAt,
}

func (e EnterpriseServerUserAccountsUploadOrderField) IsValid() bool {
	switch e {
	case EnterpriseServerUserAccountsUploadOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e EnterpriseServerUserAccountsUploadOrderField) String() string {
	return string(e)
}

func (e *EnterpriseServerUserAccountsUploadOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseServerUserAccountsUploadOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseServerUserAccountsUploadOrderField", str)
	}
	return nil
}

func (e EnterpriseServerUserAccountsUploadOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Synchronization state of the Enterprise Server user accounts upload
type EnterpriseServerUserAccountsUploadSyncState string

const (
	// The synchronization of the upload is pending.
	EnterpriseServerUserAccountsUploadSyncStatePending EnterpriseServerUserAccountsUploadSyncState = "PENDING"
	// The synchronization of the upload succeeded.
	EnterpriseServerUserAccountsUploadSyncStateSuccess EnterpriseServerUserAccountsUploadSyncState = "SUCCESS"
	// The synchronization of the upload failed.
	EnterpriseServerUserAccountsUploadSyncStateFailure EnterpriseServerUserAccountsUploadSyncState = "FAILURE"
)

var AllEnterpriseServerUserAccountsUploadSyncState = []EnterpriseServerUserAccountsUploadSyncState{
	EnterpriseServerUserAccountsUploadSyncStatePending,
	EnterpriseServerUserAccountsUploadSyncStateSuccess,
	EnterpriseServerUserAccountsUploadSyncStateFailure,
}

func (e EnterpriseServerUserAccountsUploadSyncState) IsValid() bool {
	switch e {
	case EnterpriseServerUserAccountsUploadSyncStatePending, EnterpriseServerUserAccountsUploadSyncStateSuccess, EnterpriseServerUserAccountsUploadSyncStateFailure:
		return true
	}
	return false
}

func (e EnterpriseServerUserAccountsUploadSyncState) String() string {
	return string(e)
}

func (e *EnterpriseServerUserAccountsUploadSyncState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseServerUserAccountsUploadSyncState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseServerUserAccountsUploadSyncState", str)
	}
	return nil
}

func (e EnterpriseServerUserAccountsUploadSyncState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible roles for enterprise membership.
type EnterpriseUserAccountMembershipRole string

const (
	// The user is a member of an organization in the enterprise.
	EnterpriseUserAccountMembershipRoleMember EnterpriseUserAccountMembershipRole = "MEMBER"
	// The user is an owner of an organization in the enterprise.
	EnterpriseUserAccountMembershipRoleOwner EnterpriseUserAccountMembershipRole = "OWNER"
	// The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises.
	EnterpriseUserAccountMembershipRoleUnaffiliated EnterpriseUserAccountMembershipRole = "UNAFFILIATED"
)

var AllEnterpriseUserAccountMembershipRole = []EnterpriseUserAccountMembershipRole{
	EnterpriseUserAccountMembershipRoleMember,
	EnterpriseUserAccountMembershipRoleOwner,
	EnterpriseUserAccountMembershipRoleUnaffiliated,
}

func (e EnterpriseUserAccountMembershipRole) IsValid() bool {
	switch e {
	case EnterpriseUserAccountMembershipRoleMember, EnterpriseUserAccountMembershipRoleOwner, EnterpriseUserAccountMembershipRoleUnaffiliated:
		return true
	}
	return false
}

func (e EnterpriseUserAccountMembershipRole) String() string {
	return string(e)
}

func (e *EnterpriseUserAccountMembershipRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseUserAccountMembershipRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseUserAccountMembershipRole", str)
	}
	return nil
}

func (e EnterpriseUserAccountMembershipRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible GitHub Enterprise deployments where this user can exist.
type EnterpriseUserDeployment string

const (
	// The user is part of a GitHub Enterprise Cloud deployment.
	EnterpriseUserDeploymentCloud EnterpriseUserDeployment = "CLOUD"
	// The user is part of a GitHub Enterprise Server deployment.
	EnterpriseUserDeploymentServer EnterpriseUserDeployment = "SERVER"
)

var AllEnterpriseUserDeployment = []EnterpriseUserDeployment{
	EnterpriseUserDeploymentCloud,
	EnterpriseUserDeploymentServer,
}

func (e EnterpriseUserDeployment) IsValid() bool {
	switch e {
	case EnterpriseUserDeploymentCloud, EnterpriseUserDeploymentServer:
		return true
	}
	return false
}

func (e EnterpriseUserDeployment) String() string {
	return string(e)
}

func (e *EnterpriseUserDeployment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseUserDeployment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseUserDeployment", str)
	}
	return nil
}

func (e EnterpriseUserDeployment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which environments connections can be ordered
type EnvironmentOrderField string

const (
	// Order environments by name.
	EnvironmentOrderFieldName EnvironmentOrderField = "NAME"
)

var AllEnvironmentOrderField = []EnvironmentOrderField{
	EnvironmentOrderFieldName,
}

func (e EnvironmentOrderField) IsValid() bool {
	switch e {
	case EnvironmentOrderFieldName:
		return true
	}
	return false
}

func (e EnvironmentOrderField) String() string {
	return string(e)
}

func (e *EnvironmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvironmentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvironmentOrderField", str)
	}
	return nil
}

func (e EnvironmentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible viewed states of a file .
type FileViewedState string

const (
	// The file has new changes since last viewed.
	FileViewedStateDismissed FileViewedState = "DISMISSED"
	// The file has been marked as viewed.
	FileViewedStateViewed FileViewedState = "VIEWED"
	// The file has not been marked as viewed.
	FileViewedStateUnviewed FileViewedState = "UNVIEWED"
)

var AllFileViewedState = []FileViewedState{
	FileViewedStateDismissed,
	FileViewedStateViewed,
	FileViewedStateUnviewed,
}

func (e FileViewedState) IsValid() bool {
	switch e {
	case FileViewedStateDismissed, FileViewedStateViewed, FileViewedStateUnviewed:
		return true
	}
	return false
}

func (e FileViewedState) String() string {
	return string(e)
}

func (e *FileViewedState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileViewedState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileViewedState", str)
	}
	return nil
}

func (e FileViewedState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible funding platforms for repository funding links.
type FundingPlatform string

const (
	// GitHub funding platform.
	FundingPlatformGithub FundingPlatform = "GITHUB"
	// Patreon funding platform.
	FundingPlatformPatreon FundingPlatform = "PATREON"
	// Open Collective funding platform.
	FundingPlatformOpenCollective FundingPlatform = "OPEN_COLLECTIVE"
	// Ko-fi funding platform.
	FundingPlatformKoFi FundingPlatform = "KO_FI"
	// Tidelift funding platform.
	FundingPlatformTidelift FundingPlatform = "TIDELIFT"
	// Community Bridge funding platform.
	FundingPlatformCommunityBridge FundingPlatform = "COMMUNITY_BRIDGE"
	// Liberapay funding platform.
	FundingPlatformLiberapay FundingPlatform = "LIBERAPAY"
	// IssueHunt funding platform.
	FundingPlatformIssuehunt FundingPlatform = "ISSUEHUNT"
	// Otechie funding platform.
	FundingPlatformOtechie FundingPlatform = "OTECHIE"
	// LFX Crowdfunding funding platform.
	FundingPlatformLfxCrowdfunding FundingPlatform = "LFX_CROWDFUNDING"
	// Custom funding platform.
	FundingPlatformCustom FundingPlatform = "CUSTOM"
)

var AllFundingPlatform = []FundingPlatform{
	FundingPlatformGithub,
	FundingPlatformPatreon,
	FundingPlatformOpenCollective,
	FundingPlatformKoFi,
	FundingPlatformTidelift,
	FundingPlatformCommunityBridge,
	FundingPlatformLiberapay,
	FundingPlatformIssuehunt,
	FundingPlatformOtechie,
	FundingPlatformLfxCrowdfunding,
	FundingPlatformCustom,
}

func (e FundingPlatform) IsValid() bool {
	switch e {
	case FundingPlatformGithub, FundingPlatformPatreon, FundingPlatformOpenCollective, FundingPlatformKoFi, FundingPlatformTidelift, FundingPlatformCommunityBridge, FundingPlatformLiberapay, FundingPlatformIssuehunt, FundingPlatformOtechie, FundingPlatformLfxCrowdfunding, FundingPlatformCustom:
		return true
	}
	return false
}

func (e FundingPlatform) String() string {
	return string(e)
}

func (e *FundingPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FundingPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FundingPlatform", str)
	}
	return nil
}

func (e FundingPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which gist connections can be ordered.
type GistOrderField string

const (
	// Order gists by creation time
	GistOrderFieldCreatedAt GistOrderField = "CREATED_AT"
	// Order gists by update time
	GistOrderFieldUpdatedAt GistOrderField = "UPDATED_AT"
	// Order gists by push time
	GistOrderFieldPushedAt GistOrderField = "PUSHED_AT"
)

var AllGistOrderField = []GistOrderField{
	GistOrderFieldCreatedAt,
	GistOrderFieldUpdatedAt,
	GistOrderFieldPushedAt,
}

func (e GistOrderField) IsValid() bool {
	switch e {
	case GistOrderFieldCreatedAt, GistOrderFieldUpdatedAt, GistOrderFieldPushedAt:
		return true
	}
	return false
}

func (e GistOrderField) String() string {
	return string(e)
}

func (e *GistOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GistOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GistOrderField", str)
	}
	return nil
}

func (e GistOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a Gist
type GistPrivacy string

const (
	// Public
	GistPrivacyPublic GistPrivacy = "PUBLIC"
	// Secret
	GistPrivacySecret GistPrivacy = "SECRET"
	// Gists that are public and secret
	GistPrivacyAll GistPrivacy = "ALL"
)

var AllGistPrivacy = []GistPrivacy{
	GistPrivacyPublic,
	GistPrivacySecret,
	GistPrivacyAll,
}

func (e GistPrivacy) IsValid() bool {
	switch e {
	case GistPrivacyPublic, GistPrivacySecret, GistPrivacyAll:
		return true
	}
	return false
}

func (e GistPrivacy) String() string {
	return string(e)
}

func (e *GistPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GistPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GistPrivacy", str)
	}
	return nil
}

func (e GistPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The state of a Git signature.
type GitSignatureState string

const (
	// Valid signature and verified by GitHub
	GitSignatureStateValid GitSignatureState = "VALID"
	// Invalid signature
	GitSignatureStateInvalid GitSignatureState = "INVALID"
	// Malformed signature
	GitSignatureStateMalformedSig GitSignatureState = "MALFORMED_SIG"
	// Key used for signing not known to GitHub
	GitSignatureStateUnknownKey GitSignatureState = "UNKNOWN_KEY"
	// Invalid email used for signing
	GitSignatureStateBadEmail GitSignatureState = "BAD_EMAIL"
	// Email used for signing unverified on GitHub
	GitSignatureStateUnverifiedEmail GitSignatureState = "UNVERIFIED_EMAIL"
	// Email used for signing not known to GitHub
	GitSignatureStateNoUser GitSignatureState = "NO_USER"
	// Unknown signature type
	GitSignatureStateUnknownSigType GitSignatureState = "UNKNOWN_SIG_TYPE"
	// Unsigned
	GitSignatureStateUnsigned GitSignatureState = "UNSIGNED"
	// Internal error - the GPG verification service is unavailable at the moment
	GitSignatureStateGpgverifyUnavailable GitSignatureState = "GPGVERIFY_UNAVAILABLE"
	// Internal error - the GPG verification service misbehaved
	GitSignatureStateGpgverifyError GitSignatureState = "GPGVERIFY_ERROR"
	// The usage flags for the key that signed this don't allow signing
	GitSignatureStateNotSigningKey GitSignatureState = "NOT_SIGNING_KEY"
	// Signing key expired
	GitSignatureStateExpiredKey GitSignatureState = "EXPIRED_KEY"
	// Valid signature, pending certificate revocation checking
	GitSignatureStateOcspPending GitSignatureState = "OCSP_PENDING"
	// Valid signature, though certificate revocation check failed
	GitSignatureStateOcspError GitSignatureState = "OCSP_ERROR"
	// The signing certificate or its chain could not be verified
	GitSignatureStateBadCert GitSignatureState = "BAD_CERT"
	// One or more certificates in chain has been revoked
	GitSignatureStateOcspRevoked GitSignatureState = "OCSP_REVOKED"
)

var AllGitSignatureState = []GitSignatureState{
	GitSignatureStateValid,
	GitSignatureStateInvalid,
	GitSignatureStateMalformedSig,
	GitSignatureStateUnknownKey,
	GitSignatureStateBadEmail,
	GitSignatureStateUnverifiedEmail,
	GitSignatureStateNoUser,
	GitSignatureStateUnknownSigType,
	GitSignatureStateUnsigned,
	GitSignatureStateGpgverifyUnavailable,
	GitSignatureStateGpgverifyError,
	GitSignatureStateNotSigningKey,
	GitSignatureStateExpiredKey,
	GitSignatureStateOcspPending,
	GitSignatureStateOcspError,
	GitSignatureStateBadCert,
	GitSignatureStateOcspRevoked,
}

func (e GitSignatureState) IsValid() bool {
	switch e {
	case GitSignatureStateValid, GitSignatureStateInvalid, GitSignatureStateMalformedSig, GitSignatureStateUnknownKey, GitSignatureStateBadEmail, GitSignatureStateUnverifiedEmail, GitSignatureStateNoUser, GitSignatureStateUnknownSigType, GitSignatureStateUnsigned, GitSignatureStateGpgverifyUnavailable, GitSignatureStateGpgverifyError, GitSignatureStateNotSigningKey, GitSignatureStateExpiredKey, GitSignatureStateOcspPending, GitSignatureStateOcspError, GitSignatureStateBadCert, GitSignatureStateOcspRevoked:
		return true
	}
	return false
}

func (e GitSignatureState) String() string {
	return string(e)
}

func (e *GitSignatureState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GitSignatureState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GitSignatureState", str)
	}
	return nil
}

func (e GitSignatureState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states in which authentication can be configured with an identity provider.
type IdentityProviderConfigurationState string

const (
	// Authentication with an identity provider is configured and enforced.
	IdentityProviderConfigurationStateEnforced IdentityProviderConfigurationState = "ENFORCED"
	// Authentication with an identity provider is configured but not enforced.
	IdentityProviderConfigurationStateConfigured IdentityProviderConfigurationState = "CONFIGURED"
	// Authentication with an identity provider is not configured.
	IdentityProviderConfigurationStateUnconfigured IdentityProviderConfigurationState = "UNCONFIGURED"
)

var AllIdentityProviderConfigurationState = []IdentityProviderConfigurationState{
	IdentityProviderConfigurationStateEnforced,
	IdentityProviderConfigurationStateConfigured,
	IdentityProviderConfigurationStateUnconfigured,
}

func (e IdentityProviderConfigurationState) IsValid() bool {
	switch e {
	case IdentityProviderConfigurationStateEnforced, IdentityProviderConfigurationStateConfigured, IdentityProviderConfigurationStateUnconfigured:
		return true
	}
	return false
}

func (e IdentityProviderConfigurationState) String() string {
	return string(e)
}

func (e *IdentityProviderConfigurationState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityProviderConfigurationState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityProviderConfigurationState", str)
	}
	return nil
}

func (e IdentityProviderConfigurationState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the IP allow list enabled setting.
type IPAllowListEnabledSettingValue string

const (
	// The setting is enabled for the owner.
	IPAllowListEnabledSettingValueEnabled IPAllowListEnabledSettingValue = "ENABLED"
	// The setting is disabled for the owner.
	IPAllowListEnabledSettingValueDisabled IPAllowListEnabledSettingValue = "DISABLED"
)

var AllIPAllowListEnabledSettingValue = []IPAllowListEnabledSettingValue{
	IPAllowListEnabledSettingValueEnabled,
	IPAllowListEnabledSettingValueDisabled,
}

func (e IPAllowListEnabledSettingValue) IsValid() bool {
	switch e {
	case IPAllowListEnabledSettingValueEnabled, IPAllowListEnabledSettingValueDisabled:
		return true
	}
	return false
}

func (e IPAllowListEnabledSettingValue) String() string {
	return string(e)
}

func (e *IPAllowListEnabledSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IPAllowListEnabledSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IpAllowListEnabledSettingValue", str)
	}
	return nil
}

func (e IPAllowListEnabledSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which IP allow list entry connections can be ordered.
type IPAllowListEntryOrderField string

const (
	// Order IP allow list entries by creation time.
	IPAllowListEntryOrderFieldCreatedAt IPAllowListEntryOrderField = "CREATED_AT"
	// Order IP allow list entries by the allow list value.
	IPAllowListEntryOrderFieldAllowListValue IPAllowListEntryOrderField = "ALLOW_LIST_VALUE"
)

var AllIPAllowListEntryOrderField = []IPAllowListEntryOrderField{
	IPAllowListEntryOrderFieldCreatedAt,
	IPAllowListEntryOrderFieldAllowListValue,
}

func (e IPAllowListEntryOrderField) IsValid() bool {
	switch e {
	case IPAllowListEntryOrderFieldCreatedAt, IPAllowListEntryOrderFieldAllowListValue:
		return true
	}
	return false
}

func (e IPAllowListEntryOrderField) String() string {
	return string(e)
}

func (e *IPAllowListEntryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IPAllowListEntryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IpAllowListEntryOrderField", str)
	}
	return nil
}

func (e IPAllowListEntryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the IP allow list configuration for installed GitHub Apps setting.
type IPAllowListForInstalledAppsEnabledSettingValue string

const (
	// The setting is enabled for the owner.
	IPAllowListForInstalledAppsEnabledSettingValueEnabled IPAllowListForInstalledAppsEnabledSettingValue = "ENABLED"
	// The setting is disabled for the owner.
	IPAllowListForInstalledAppsEnabledSettingValueDisabled IPAllowListForInstalledAppsEnabledSettingValue = "DISABLED"
)

var AllIPAllowListForInstalledAppsEnabledSettingValue = []IPAllowListForInstalledAppsEnabledSettingValue{
	IPAllowListForInstalledAppsEnabledSettingValueEnabled,
	IPAllowListForInstalledAppsEnabledSettingValueDisabled,
}

func (e IPAllowListForInstalledAppsEnabledSettingValue) IsValid() bool {
	switch e {
	case IPAllowListForInstalledAppsEnabledSettingValueEnabled, IPAllowListForInstalledAppsEnabledSettingValueDisabled:
		return true
	}
	return false
}

func (e IPAllowListForInstalledAppsEnabledSettingValue) String() string {
	return string(e)
}

func (e *IPAllowListForInstalledAppsEnabledSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IPAllowListForInstalledAppsEnabledSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IpAllowListForInstalledAppsEnabledSettingValue", str)
	}
	return nil
}

func (e IPAllowListForInstalledAppsEnabledSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible state reasons of a closed issue.
type IssueClosedStateReason string

const (
	// An issue that has been closed as completed
	IssueClosedStateReasonCompleted IssueClosedStateReason = "COMPLETED"
	// An issue that has been closed as not planned
	IssueClosedStateReasonNotPlanned IssueClosedStateReason = "NOT_PLANNED"
)

var AllIssueClosedStateReason = []IssueClosedStateReason{
	IssueClosedStateReasonCompleted,
	IssueClosedStateReasonNotPlanned,
}

func (e IssueClosedStateReason) IsValid() bool {
	switch e {
	case IssueClosedStateReasonCompleted, IssueClosedStateReasonNotPlanned:
		return true
	}
	return false
}

func (e IssueClosedStateReason) String() string {
	return string(e)
}

func (e *IssueClosedStateReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueClosedStateReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueClosedStateReason", str)
	}
	return nil
}

func (e IssueClosedStateReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which issue comment connections can be ordered.
type IssueCommentOrderField string

const (
	// Order issue comments by update time
	IssueCommentOrderFieldUpdatedAt IssueCommentOrderField = "UPDATED_AT"
)

var AllIssueCommentOrderField = []IssueCommentOrderField{
	IssueCommentOrderFieldUpdatedAt,
}

func (e IssueCommentOrderField) IsValid() bool {
	switch e {
	case IssueCommentOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e IssueCommentOrderField) String() string {
	return string(e)
}

func (e *IssueCommentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueCommentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueCommentOrderField", str)
	}
	return nil
}

func (e IssueCommentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which issue connections can be ordered.
type IssueOrderField string

const (
	// Order issues by creation time
	IssueOrderFieldCreatedAt IssueOrderField = "CREATED_AT"
	// Order issues by update time
	IssueOrderFieldUpdatedAt IssueOrderField = "UPDATED_AT"
	// Order issues by comment count
	IssueOrderFieldComments IssueOrderField = "COMMENTS"
)

var AllIssueOrderField = []IssueOrderField{
	IssueOrderFieldCreatedAt,
	IssueOrderFieldUpdatedAt,
	IssueOrderFieldComments,
}

func (e IssueOrderField) IsValid() bool {
	switch e {
	case IssueOrderFieldCreatedAt, IssueOrderFieldUpdatedAt, IssueOrderFieldComments:
		return true
	}
	return false
}

func (e IssueOrderField) String() string {
	return string(e)
}

func (e *IssueOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueOrderField", str)
	}
	return nil
}

func (e IssueOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of an issue.
type IssueState string

const (
	// An issue that is still open
	IssueStateOpen IssueState = "OPEN"
	// An issue that has been closed
	IssueStateClosed IssueState = "CLOSED"
)

var AllIssueState = []IssueState{
	IssueStateOpen,
	IssueStateClosed,
}

func (e IssueState) IsValid() bool {
	switch e {
	case IssueStateOpen, IssueStateClosed:
		return true
	}
	return false
}

func (e IssueState) String() string {
	return string(e)
}

func (e *IssueState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueState", str)
	}
	return nil
}

func (e IssueState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible state reasons of an issue.
type IssueStateReason string

const (
	// An issue that has been reopened
	IssueStateReasonReopened IssueStateReason = "REOPENED"
	// An issue that has been closed as not planned
	IssueStateReasonNotPlanned IssueStateReason = "NOT_PLANNED"
	// An issue that has been closed as completed
	IssueStateReasonCompleted IssueStateReason = "COMPLETED"
)

var AllIssueStateReason = []IssueStateReason{
	IssueStateReasonReopened,
	IssueStateReasonNotPlanned,
	IssueStateReasonCompleted,
}

func (e IssueStateReason) IsValid() bool {
	switch e {
	case IssueStateReasonReopened, IssueStateReasonNotPlanned, IssueStateReasonCompleted:
		return true
	}
	return false
}

func (e IssueStateReason) String() string {
	return string(e)
}

func (e *IssueStateReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueStateReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueStateReason", str)
	}
	return nil
}

func (e IssueStateReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible item types found in a timeline.
type IssueTimelineItemsItemType string

const (
	// Represents a comment on an Issue.
	IssueTimelineItemsItemTypeIssueComment IssueTimelineItemsItemType = "ISSUE_COMMENT"
	// Represents a mention made by one issue or pull request to another.
	IssueTimelineItemsItemTypeCrossReferencedEvent IssueTimelineItemsItemType = "CROSS_REFERENCED_EVENT"
	// Represents a 'added_to_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeAddedToProjectEvent IssueTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"
	// Represents an 'assigned' event on any assignable object.
	IssueTimelineItemsItemTypeAssignedEvent IssueTimelineItemsItemType = "ASSIGNED_EVENT"
	// Represents a 'closed' event on any `Closable`.
	IssueTimelineItemsItemTypeClosedEvent IssueTimelineItemsItemType = "CLOSED_EVENT"
	// Represents a 'comment_deleted' event on a given issue or pull request.
	IssueTimelineItemsItemTypeCommentDeletedEvent IssueTimelineItemsItemType = "COMMENT_DELETED_EVENT"
	// Represents a 'connected' event on a given issue or pull request.
	IssueTimelineItemsItemTypeConnectedEvent IssueTimelineItemsItemType = "CONNECTED_EVENT"
	// Represents a 'converted_note_to_issue' event on a given issue or pull request.
	IssueTimelineItemsItemTypeConvertedNoteToIssueEvent IssueTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
	// Represents a 'converted_to_discussion' event on a given issue.
	IssueTimelineItemsItemTypeConvertedToDiscussionEvent IssueTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
	// Represents a 'demilestoned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeDemilestonedEvent IssueTimelineItemsItemType = "DEMILESTONED_EVENT"
	// Represents a 'disconnected' event on a given issue or pull request.
	IssueTimelineItemsItemTypeDisconnectedEvent IssueTimelineItemsItemType = "DISCONNECTED_EVENT"
	// Represents a 'labeled' event on a given issue or pull request.
	IssueTimelineItemsItemTypeLabeledEvent IssueTimelineItemsItemType = "LABELED_EVENT"
	// Represents a 'locked' event on a given issue or pull request.
	IssueTimelineItemsItemTypeLockedEvent IssueTimelineItemsItemType = "LOCKED_EVENT"
	// Represents a 'marked_as_duplicate' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMarkedAsDuplicateEvent IssueTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"
	// Represents a 'mentioned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMentionedEvent IssueTimelineItemsItemType = "MENTIONED_EVENT"
	// Represents a 'milestoned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMilestonedEvent IssueTimelineItemsItemType = "MILESTONED_EVENT"
	// Represents a 'moved_columns_in_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeMovedColumnsInProjectEvent IssueTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"
	// Represents a 'pinned' event on a given issue or pull request.
	IssueTimelineItemsItemTypePinnedEvent IssueTimelineItemsItemType = "PINNED_EVENT"
	// Represents a 'referenced' event on a given `ReferencedSubject`.
	IssueTimelineItemsItemTypeReferencedEvent IssueTimelineItemsItemType = "REFERENCED_EVENT"
	// Represents a 'removed_from_project' event on a given issue or pull request.
	IssueTimelineItemsItemTypeRemovedFromProjectEvent IssueTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"
	// Represents a 'renamed' event on a given issue or pull request
	IssueTimelineItemsItemTypeRenamedTitleEvent IssueTimelineItemsItemType = "RENAMED_TITLE_EVENT"
	// Represents a 'reopened' event on any `Closable`.
	IssueTimelineItemsItemTypeReopenedEvent IssueTimelineItemsItemType = "REOPENED_EVENT"
	// Represents a 'subscribed' event on a given `Subscribable`.
	IssueTimelineItemsItemTypeSubscribedEvent IssueTimelineItemsItemType = "SUBSCRIBED_EVENT"
	// Represents a 'transferred' event on a given issue or pull request.
	IssueTimelineItemsItemTypeTransferredEvent IssueTimelineItemsItemType = "TRANSFERRED_EVENT"
	// Represents an 'unassigned' event on any assignable object.
	IssueTimelineItemsItemTypeUnassignedEvent IssueTimelineItemsItemType = "UNASSIGNED_EVENT"
	// Represents an 'unlabeled' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnlabeledEvent IssueTimelineItemsItemType = "UNLABELED_EVENT"
	// Represents an 'unlocked' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnlockedEvent IssueTimelineItemsItemType = "UNLOCKED_EVENT"
	// Represents a 'user_blocked' event on a given user.
	IssueTimelineItemsItemTypeUserBlockedEvent IssueTimelineItemsItemType = "USER_BLOCKED_EVENT"
	// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent IssueTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"
	// Represents an 'unpinned' event on a given issue or pull request.
	IssueTimelineItemsItemTypeUnpinnedEvent IssueTimelineItemsItemType = "UNPINNED_EVENT"
	// Represents an 'unsubscribed' event on a given `Subscribable`.
	IssueTimelineItemsItemTypeUnsubscribedEvent IssueTimelineItemsItemType = "UNSUBSCRIBED_EVENT"
)

var AllIssueTimelineItemsItemType = []IssueTimelineItemsItemType{
	IssueTimelineItemsItemTypeIssueComment,
	IssueTimelineItemsItemTypeCrossReferencedEvent,
	IssueTimelineItemsItemTypeAddedToProjectEvent,
	IssueTimelineItemsItemTypeAssignedEvent,
	IssueTimelineItemsItemTypeClosedEvent,
	IssueTimelineItemsItemTypeCommentDeletedEvent,
	IssueTimelineItemsItemTypeConnectedEvent,
	IssueTimelineItemsItemTypeConvertedNoteToIssueEvent,
	IssueTimelineItemsItemTypeConvertedToDiscussionEvent,
	IssueTimelineItemsItemTypeDemilestonedEvent,
	IssueTimelineItemsItemTypeDisconnectedEvent,
	IssueTimelineItemsItemTypeLabeledEvent,
	IssueTimelineItemsItemTypeLockedEvent,
	IssueTimelineItemsItemTypeMarkedAsDuplicateEvent,
	IssueTimelineItemsItemTypeMentionedEvent,
	IssueTimelineItemsItemTypeMilestonedEvent,
	IssueTimelineItemsItemTypeMovedColumnsInProjectEvent,
	IssueTimelineItemsItemTypePinnedEvent,
	IssueTimelineItemsItemTypeReferencedEvent,
	IssueTimelineItemsItemTypeRemovedFromProjectEvent,
	IssueTimelineItemsItemTypeRenamedTitleEvent,
	IssueTimelineItemsItemTypeReopenedEvent,
	IssueTimelineItemsItemTypeSubscribedEvent,
	IssueTimelineItemsItemTypeTransferredEvent,
	IssueTimelineItemsItemTypeUnassignedEvent,
	IssueTimelineItemsItemTypeUnlabeledEvent,
	IssueTimelineItemsItemTypeUnlockedEvent,
	IssueTimelineItemsItemTypeUserBlockedEvent,
	IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent,
	IssueTimelineItemsItemTypeUnpinnedEvent,
	IssueTimelineItemsItemTypeUnsubscribedEvent,
}

func (e IssueTimelineItemsItemType) IsValid() bool {
	switch e {
	case IssueTimelineItemsItemTypeIssueComment, IssueTimelineItemsItemTypeCrossReferencedEvent, IssueTimelineItemsItemTypeAddedToProjectEvent, IssueTimelineItemsItemTypeAssignedEvent, IssueTimelineItemsItemTypeClosedEvent, IssueTimelineItemsItemTypeCommentDeletedEvent, IssueTimelineItemsItemTypeConnectedEvent, IssueTimelineItemsItemTypeConvertedNoteToIssueEvent, IssueTimelineItemsItemTypeConvertedToDiscussionEvent, IssueTimelineItemsItemTypeDemilestonedEvent, IssueTimelineItemsItemTypeDisconnectedEvent, IssueTimelineItemsItemTypeLabeledEvent, IssueTimelineItemsItemTypeLockedEvent, IssueTimelineItemsItemTypeMarkedAsDuplicateEvent, IssueTimelineItemsItemTypeMentionedEvent, IssueTimelineItemsItemTypeMilestonedEvent, IssueTimelineItemsItemTypeMovedColumnsInProjectEvent, IssueTimelineItemsItemTypePinnedEvent, IssueTimelineItemsItemTypeReferencedEvent, IssueTimelineItemsItemTypeRemovedFromProjectEvent, IssueTimelineItemsItemTypeRenamedTitleEvent, IssueTimelineItemsItemTypeReopenedEvent, IssueTimelineItemsItemTypeSubscribedEvent, IssueTimelineItemsItemTypeTransferredEvent, IssueTimelineItemsItemTypeUnassignedEvent, IssueTimelineItemsItemTypeUnlabeledEvent, IssueTimelineItemsItemTypeUnlockedEvent, IssueTimelineItemsItemTypeUserBlockedEvent, IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent, IssueTimelineItemsItemTypeUnpinnedEvent, IssueTimelineItemsItemTypeUnsubscribedEvent:
		return true
	}
	return false
}

func (e IssueTimelineItemsItemType) String() string {
	return string(e)
}

func (e *IssueTimelineItemsItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueTimelineItemsItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueTimelineItemsItemType", str)
	}
	return nil
}

func (e IssueTimelineItemsItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which label connections can be ordered.
type LabelOrderField string

const (
	// Order labels by name
	LabelOrderFieldName LabelOrderField = "NAME"
	// Order labels by creation time
	LabelOrderFieldCreatedAt LabelOrderField = "CREATED_AT"
)

var AllLabelOrderField = []LabelOrderField{
	LabelOrderFieldName,
	LabelOrderFieldCreatedAt,
}

func (e LabelOrderField) IsValid() bool {
	switch e {
	case LabelOrderFieldName, LabelOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e LabelOrderField) String() string {
	return string(e)
}

func (e *LabelOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LabelOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LabelOrderField", str)
	}
	return nil
}

func (e LabelOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which language connections can be ordered.
type LanguageOrderField string

const (
	// Order languages by the size of all files containing the language
	LanguageOrderFieldSize LanguageOrderField = "SIZE"
)

var AllLanguageOrderField = []LanguageOrderField{
	LanguageOrderFieldSize,
}

func (e LanguageOrderField) IsValid() bool {
	switch e {
	case LanguageOrderFieldSize:
		return true
	}
	return false
}

func (e LanguageOrderField) String() string {
	return string(e)
}

func (e *LanguageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageOrderField", str)
	}
	return nil
}

func (e LanguageOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible reasons that an issue or pull request was locked.
type LockReason string

const (
	// The issue or pull request was locked because the conversation was off-topic.
	LockReasonOffTopic LockReason = "OFF_TOPIC"
	// The issue or pull request was locked because the conversation was too heated.
	LockReasonTooHeated LockReason = "TOO_HEATED"
	// The issue or pull request was locked because the conversation was resolved.
	LockReasonResolved LockReason = "RESOLVED"
	// The issue or pull request was locked because the conversation was spam.
	LockReasonSpam LockReason = "SPAM"
)

var AllLockReason = []LockReason{
	LockReasonOffTopic,
	LockReasonTooHeated,
	LockReasonResolved,
	LockReasonSpam,
}

func (e LockReason) IsValid() bool {
	switch e {
	case LockReasonOffTopic, LockReasonTooHeated, LockReasonResolved, LockReasonSpam:
		return true
	}
	return false
}

func (e LockReason) String() string {
	return string(e)
}

func (e *LockReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LockReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LockReason", str)
	}
	return nil
}

func (e LockReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which mannequins can be ordered.
type MannequinOrderField string

const (
	// Order mannequins alphabetically by their source login.
	MannequinOrderFieldLogin MannequinOrderField = "LOGIN"
	// Order mannequins why when they were created.
	MannequinOrderFieldCreatedAt MannequinOrderField = "CREATED_AT"
)

var AllMannequinOrderField = []MannequinOrderField{
	MannequinOrderFieldLogin,
	MannequinOrderFieldCreatedAt,
}

func (e MannequinOrderField) IsValid() bool {
	switch e {
	case MannequinOrderFieldLogin, MannequinOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e MannequinOrderField) String() string {
	return string(e)
}

func (e *MannequinOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MannequinOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MannequinOrderField", str)
	}
	return nil
}

func (e MannequinOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible default commit messages for merges.
type MergeCommitMessage string

const (
	// Default to the pull request's title.
	MergeCommitMessagePrTitle MergeCommitMessage = "PR_TITLE"
	// Default to the pull request's body.
	MergeCommitMessagePrBody MergeCommitMessage = "PR_BODY"
	// Default to a blank commit message.
	MergeCommitMessageBlank MergeCommitMessage = "BLANK"
)

var AllMergeCommitMessage = []MergeCommitMessage{
	MergeCommitMessagePrTitle,
	MergeCommitMessagePrBody,
	MergeCommitMessageBlank,
}

func (e MergeCommitMessage) IsValid() bool {
	switch e {
	case MergeCommitMessagePrTitle, MergeCommitMessagePrBody, MergeCommitMessageBlank:
		return true
	}
	return false
}

func (e MergeCommitMessage) String() string {
	return string(e)
}

func (e *MergeCommitMessage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MergeCommitMessage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MergeCommitMessage", str)
	}
	return nil
}

func (e MergeCommitMessage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible default commit titles for merges.
type MergeCommitTitle string

const (
	// Default to the pull request's title.
	MergeCommitTitlePrTitle MergeCommitTitle = "PR_TITLE"
	// Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitleMergeMessage MergeCommitTitle = "MERGE_MESSAGE"
)

var AllMergeCommitTitle = []MergeCommitTitle{
	MergeCommitTitlePrTitle,
	MergeCommitTitleMergeMessage,
}

func (e MergeCommitTitle) IsValid() bool {
	switch e {
	case MergeCommitTitlePrTitle, MergeCommitTitleMergeMessage:
		return true
	}
	return false
}

func (e MergeCommitTitle) String() string {
	return string(e)
}

func (e *MergeCommitTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MergeCommitTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MergeCommitTitle", str)
	}
	return nil
}

func (e MergeCommitTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a merge queue entry.
type MergeQueueEntryState string

const (
	// The entry is currently queued.
	MergeQueueEntryStateQueued MergeQueueEntryState = "QUEUED"
	// The entry is currently waiting for checks to pass.
	MergeQueueEntryStateAwaitingChecks MergeQueueEntryState = "AWAITING_CHECKS"
	// The entry is currently mergeable.
	MergeQueueEntryStateMergeable MergeQueueEntryState = "MERGEABLE"
	// The entry is currently unmergeable.
	MergeQueueEntryStateUnmergeable MergeQueueEntryState = "UNMERGEABLE"
	// The entry is currently locked.
	MergeQueueEntryStateLocked MergeQueueEntryState = "LOCKED"
)

var AllMergeQueueEntryState = []MergeQueueEntryState{
	MergeQueueEntryStateQueued,
	MergeQueueEntryStateAwaitingChecks,
	MergeQueueEntryStateMergeable,
	MergeQueueEntryStateUnmergeable,
	MergeQueueEntryStateLocked,
}

func (e MergeQueueEntryState) IsValid() bool {
	switch e {
	case MergeQueueEntryStateQueued, MergeQueueEntryStateAwaitingChecks, MergeQueueEntryStateMergeable, MergeQueueEntryStateUnmergeable, MergeQueueEntryStateLocked:
		return true
	}
	return false
}

func (e MergeQueueEntryState) String() string {
	return string(e)
}

func (e *MergeQueueEntryState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MergeQueueEntryState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MergeQueueEntryState", str)
	}
	return nil
}

func (e MergeQueueEntryState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible merging strategies for a merge queue.
type MergeQueueMergingStrategy string

const (
	// Entries only allowed to merge if they are passing.
	MergeQueueMergingStrategyAllgreen MergeQueueMergingStrategy = "ALLGREEN"
	// Failing Entires are allowed to merge if they are with a passing entry.
	MergeQueueMergingStrategyHeadgreen MergeQueueMergingStrategy = "HEADGREEN"
)

var AllMergeQueueMergingStrategy = []MergeQueueMergingStrategy{
	MergeQueueMergingStrategyAllgreen,
	MergeQueueMergingStrategyHeadgreen,
}

func (e MergeQueueMergingStrategy) IsValid() bool {
	switch e {
	case MergeQueueMergingStrategyAllgreen, MergeQueueMergingStrategyHeadgreen:
		return true
	}
	return false
}

func (e MergeQueueMergingStrategy) String() string {
	return string(e)
}

func (e *MergeQueueMergingStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MergeQueueMergingStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MergeQueueMergingStrategy", str)
	}
	return nil
}

func (e MergeQueueMergingStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Whether or not a PullRequest can be merged.
type MergeableState string

const (
	// The pull request can be merged.
	MergeableStateMergeable MergeableState = "MERGEABLE"
	// The pull request cannot be merged due to merge conflicts.
	MergeableStateConflicting MergeableState = "CONFLICTING"
	// The mergeability of the pull request is still being calculated.
	MergeableStateUnknown MergeableState = "UNKNOWN"
)

var AllMergeableState = []MergeableState{
	MergeableStateMergeable,
	MergeableStateConflicting,
	MergeableStateUnknown,
}

func (e MergeableState) IsValid() bool {
	switch e {
	case MergeableStateMergeable, MergeableStateConflicting, MergeableStateUnknown:
		return true
	}
	return false
}

func (e MergeableState) String() string {
	return string(e)
}

func (e *MergeableState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MergeableState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MergeableState", str)
	}
	return nil
}

func (e MergeableState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the different GitHub Enterprise Importer (GEI) migration sources.
type MigrationSourceType string

const (
	// An Azure DevOps migration source.
	MigrationSourceTypeAzureDevops MigrationSourceType = "AZURE_DEVOPS"
	// A Bitbucket Server migration source.
	MigrationSourceTypeBitbucketServer MigrationSourceType = "BITBUCKET_SERVER"
	// A GitHub Migration API source.
	MigrationSourceTypeGithubArchive MigrationSourceType = "GITHUB_ARCHIVE"
)

var AllMigrationSourceType = []MigrationSourceType{
	MigrationSourceTypeAzureDevops,
	MigrationSourceTypeBitbucketServer,
	MigrationSourceTypeGithubArchive,
}

func (e MigrationSourceType) IsValid() bool {
	switch e {
	case MigrationSourceTypeAzureDevops, MigrationSourceTypeBitbucketServer, MigrationSourceTypeGithubArchive:
		return true
	}
	return false
}

func (e MigrationSourceType) String() string {
	return string(e)
}

func (e *MigrationSourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MigrationSourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MigrationSourceType", str)
	}
	return nil
}

func (e MigrationSourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The GitHub Enterprise Importer (GEI) migration state.
type MigrationState string

const (
	// The migration has not started.
	MigrationStateNotStarted MigrationState = "NOT_STARTED"
	// The migration has been queued.
	MigrationStateQueued MigrationState = "QUEUED"
	// The migration is in progress.
	MigrationStateInProgress MigrationState = "IN_PROGRESS"
	// The migration has succeeded.
	MigrationStateSucceeded MigrationState = "SUCCEEDED"
	// The migration has failed.
	MigrationStateFailed MigrationState = "FAILED"
	// The migration needs to have its credentials validated.
	MigrationStatePendingValidation MigrationState = "PENDING_VALIDATION"
	// The migration has invalid credentials.
	MigrationStateFailedValidation MigrationState = "FAILED_VALIDATION"
)

var AllMigrationState = []MigrationState{
	MigrationStateNotStarted,
	MigrationStateQueued,
	MigrationStateInProgress,
	MigrationStateSucceeded,
	MigrationStateFailed,
	MigrationStatePendingValidation,
	MigrationStateFailedValidation,
}

func (e MigrationState) IsValid() bool {
	switch e {
	case MigrationStateNotStarted, MigrationStateQueued, MigrationStateInProgress, MigrationStateSucceeded, MigrationStateFailed, MigrationStatePendingValidation, MigrationStateFailedValidation:
		return true
	}
	return false
}

func (e MigrationState) String() string {
	return string(e)
}

func (e *MigrationState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MigrationState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MigrationState", str)
	}
	return nil
}

func (e MigrationState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which milestone connections can be ordered.
type MilestoneOrderField string

const (
	// Order milestones by when they are due.
	MilestoneOrderFieldDueDate MilestoneOrderField = "DUE_DATE"
	// Order milestones by when they were created.
	MilestoneOrderFieldCreatedAt MilestoneOrderField = "CREATED_AT"
	// Order milestones by when they were last updated.
	MilestoneOrderFieldUpdatedAt MilestoneOrderField = "UPDATED_AT"
	// Order milestones by their number.
	MilestoneOrderFieldNumber MilestoneOrderField = "NUMBER"
)

var AllMilestoneOrderField = []MilestoneOrderField{
	MilestoneOrderFieldDueDate,
	MilestoneOrderFieldCreatedAt,
	MilestoneOrderFieldUpdatedAt,
	MilestoneOrderFieldNumber,
}

func (e MilestoneOrderField) IsValid() bool {
	switch e {
	case MilestoneOrderFieldDueDate, MilestoneOrderFieldCreatedAt, MilestoneOrderFieldUpdatedAt, MilestoneOrderFieldNumber:
		return true
	}
	return false
}

func (e MilestoneOrderField) String() string {
	return string(e)
}

func (e *MilestoneOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MilestoneOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MilestoneOrderField", str)
	}
	return nil
}

func (e MilestoneOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a milestone.
type MilestoneState string

const (
	// A milestone that is still open.
	MilestoneStateOpen MilestoneState = "OPEN"
	// A milestone that has been closed.
	MilestoneStateClosed MilestoneState = "CLOSED"
)

var AllMilestoneState = []MilestoneState{
	MilestoneStateOpen,
	MilestoneStateClosed,
}

func (e MilestoneState) IsValid() bool {
	switch e {
	case MilestoneStateOpen, MilestoneStateClosed:
		return true
	}
	return false
}

func (e MilestoneState) String() string {
	return string(e)
}

func (e *MilestoneState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MilestoneState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MilestoneState", str)
	}
	return nil
}

func (e MilestoneState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason you received a notification about a subject.
type NotificationReason string

const (
	// You were assigned to the Issue/PR.
	NotificationReasonAssign NotificationReason = "ASSIGN"
	// You created the thread.
	NotificationReasonAuthor NotificationReason = "AUTHOR"
	// You commented on the thread.
	NotificationReasonComment NotificationReason = "COMMENT"
	// You accepted an invitation to contribute to the repository.
	NotificationReasonInvitation NotificationReason = "INVITATION"
	// You subscribed to the thread (via an Issue or Pull Request).
	NotificationReasonManual NotificationReason = "MANUAL"
	// You were specifically @mentioned in the content.
	NotificationReasonMention NotificationReason = "MENTION"
	// You were requested for review.
	NotificationReasonReviewRequested NotificationReason = "REVIEW_REQUESTED"
	// You were given credit for contributing to a Security Advisory.
	NotificationReasonSecurityAdvisoryCredit NotificationReason = "SECURITY_ADVISORY_CREDIT"
	// You have access to the notification subject's Dependabot alerts.
	NotificationReasonSecurityAlert NotificationReason = "SECURITY_ALERT"
	// You changed the thread state (for example, closing an Issue or merging a Pull Request).
	NotificationReasonStateChange NotificationReason = "STATE_CHANGE"
	// You are watching the subject of the notification.
	NotificationReasonSubscribed NotificationReason = "SUBSCRIBED"
	// You were on a team that was mentioned.
	NotificationReasonTeamMention NotificationReason = "TEAM_MENTION"
	// You are subscribed to continuous integration activity.
	NotificationReasonCiActivity NotificationReason = "CI_ACTIVITY"
	// You were requested for review for deployment.
	NotificationReasonApprovalRequested NotificationReason = "APPROVAL_REQUESTED"
	// You saved this notification
	NotificationReasonSaved NotificationReason = "SAVED"
	// A pull request you're subscribed to was marked ready for review.
	NotificationReasonReadyForReview NotificationReason = "READY_FOR_REVIEW"
	// New requests from members.
	NotificationReasonMemberFeatureRequested NotificationReason = "MEMBER_FEATURE_REQUESTED"
)

var AllNotificationReason = []NotificationReason{
	NotificationReasonAssign,
	NotificationReasonAuthor,
	NotificationReasonComment,
	NotificationReasonInvitation,
	NotificationReasonManual,
	NotificationReasonMention,
	NotificationReasonReviewRequested,
	NotificationReasonSecurityAdvisoryCredit,
	NotificationReasonSecurityAlert,
	NotificationReasonStateChange,
	NotificationReasonSubscribed,
	NotificationReasonTeamMention,
	NotificationReasonCiActivity,
	NotificationReasonApprovalRequested,
	NotificationReasonSaved,
	NotificationReasonReadyForReview,
	NotificationReasonMemberFeatureRequested,
}

func (e NotificationReason) IsValid() bool {
	switch e {
	case NotificationReasonAssign, NotificationReasonAuthor, NotificationReasonComment, NotificationReasonInvitation, NotificationReasonManual, NotificationReasonMention, NotificationReasonReviewRequested, NotificationReasonSecurityAdvisoryCredit, NotificationReasonSecurityAlert, NotificationReasonStateChange, NotificationReasonSubscribed, NotificationReasonTeamMention, NotificationReasonCiActivity, NotificationReasonApprovalRequested, NotificationReasonSaved, NotificationReasonReadyForReview, NotificationReasonMemberFeatureRequested:
		return true
	}
	return false
}

func (e NotificationReason) String() string {
	return string(e)
}

func (e *NotificationReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationReason", str)
	}
	return nil
}

func (e NotificationReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the notification restriction setting.
type NotificationRestrictionSettingValue string

const (
	// The setting is enabled for the owner.
	NotificationRestrictionSettingValueEnabled NotificationRestrictionSettingValue = "ENABLED"
	// The setting is disabled for the owner.
	NotificationRestrictionSettingValueDisabled NotificationRestrictionSettingValue = "DISABLED"
)

var AllNotificationRestrictionSettingValue = []NotificationRestrictionSettingValue{
	NotificationRestrictionSettingValueEnabled,
	NotificationRestrictionSettingValueDisabled,
}

func (e NotificationRestrictionSettingValue) IsValid() bool {
	switch e {
	case NotificationRestrictionSettingValueEnabled, NotificationRestrictionSettingValueDisabled:
		return true
	}
	return false
}

func (e NotificationRestrictionSettingValue) String() string {
	return string(e)
}

func (e *NotificationRestrictionSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationRestrictionSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationRestrictionSettingValue", str)
	}
	return nil
}

func (e NotificationRestrictionSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a notification.
type NotificationStatus string

const (
	// A notification is read
	NotificationStatusRead NotificationStatus = "READ"
	// A notification is unread
	NotificationStatusUnread NotificationStatus = "UNREAD"
	// A notification is archived
	NotificationStatusArchived NotificationStatus = "ARCHIVED"
	// A notification is done
	NotificationStatusDone NotificationStatus = "DONE"
)

var AllNotificationStatus = []NotificationStatus{
	NotificationStatusRead,
	NotificationStatusUnread,
	NotificationStatusArchived,
	NotificationStatusDone,
}

func (e NotificationStatus) IsValid() bool {
	switch e {
	case NotificationStatusRead, NotificationStatusUnread, NotificationStatusArchived, NotificationStatusDone:
		return true
	}
	return false
}

func (e NotificationStatus) String() string {
	return string(e)
}

func (e *NotificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationStatus", str)
	}
	return nil
}

func (e NotificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible subscription states of a notification thread.
type NotificationThreadSubscriptionState string

const (
	// The thread's list is ignored.
	NotificationThreadSubscriptionStateListIgnored NotificationThreadSubscriptionState = "LIST_IGNORED"
	// The thread's list is subscribed to.
	NotificationThreadSubscriptionStateListSubscribed NotificationThreadSubscriptionState = "LIST_SUBSCRIBED"
	// The thread is subscribed to.
	NotificationThreadSubscriptionStateThreadSubscribed NotificationThreadSubscriptionState = "THREAD_SUBSCRIBED"
	// The thread's type is subscribed to.
	NotificationThreadSubscriptionStateThreadTypeSubscribed NotificationThreadSubscriptionState = "THREAD_TYPE_SUBSCRIBED"
	// The thread is not subscribed to.
	NotificationThreadSubscriptionStateUnsubscribed NotificationThreadSubscriptionState = "UNSUBSCRIBED"
)

var AllNotificationThreadSubscriptionState = []NotificationThreadSubscriptionState{
	NotificationThreadSubscriptionStateListIgnored,
	NotificationThreadSubscriptionStateListSubscribed,
	NotificationThreadSubscriptionStateThreadSubscribed,
	NotificationThreadSubscriptionStateThreadTypeSubscribed,
	NotificationThreadSubscriptionStateUnsubscribed,
}

func (e NotificationThreadSubscriptionState) IsValid() bool {
	switch e {
	case NotificationThreadSubscriptionStateListIgnored, NotificationThreadSubscriptionStateListSubscribed, NotificationThreadSubscriptionStateThreadSubscribed, NotificationThreadSubscriptionStateThreadTypeSubscribed, NotificationThreadSubscriptionStateUnsubscribed:
		return true
	}
	return false
}

func (e NotificationThreadSubscriptionState) String() string {
	return string(e)
}

func (e *NotificationThreadSubscriptionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationThreadSubscriptionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationThreadSubscriptionState", str)
	}
	return nil
}

func (e NotificationThreadSubscriptionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The OIDC identity provider type
type OIDCProviderType string

const (
	// Azure Active Directory
	OIDCProviderTypeAad OIDCProviderType = "AAD"
)

var AllOIDCProviderType = []OIDCProviderType{
	OIDCProviderTypeAad,
}

func (e OIDCProviderType) IsValid() bool {
	switch e {
	case OIDCProviderTypeAad:
		return true
	}
	return false
}

func (e OIDCProviderType) String() string {
	return string(e)
}

func (e *OIDCProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OIDCProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OIDCProviderType", str)
	}
	return nil
}

func (e OIDCProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The state of an OAuth application when it was created.
type OauthApplicationCreateAuditEntryState string

const (
	// The OAuth application was active and allowed to have OAuth Accesses.
	OauthApplicationCreateAuditEntryStateActive OauthApplicationCreateAuditEntryState = "ACTIVE"
	// The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
	OauthApplicationCreateAuditEntryStateSuspended OauthApplicationCreateAuditEntryState = "SUSPENDED"
	// The OAuth application was in the process of being deleted.
	OauthApplicationCreateAuditEntryStatePendingDeletion OauthApplicationCreateAuditEntryState = "PENDING_DELETION"
)

var AllOauthApplicationCreateAuditEntryState = []OauthApplicationCreateAuditEntryState{
	OauthApplicationCreateAuditEntryStateActive,
	OauthApplicationCreateAuditEntryStateSuspended,
	OauthApplicationCreateAuditEntryStatePendingDeletion,
}

func (e OauthApplicationCreateAuditEntryState) IsValid() bool {
	switch e {
	case OauthApplicationCreateAuditEntryStateActive, OauthApplicationCreateAuditEntryStateSuspended, OauthApplicationCreateAuditEntryStatePendingDeletion:
		return true
	}
	return false
}

func (e OauthApplicationCreateAuditEntryState) String() string {
	return string(e)
}

func (e *OauthApplicationCreateAuditEntryState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OauthApplicationCreateAuditEntryState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OauthApplicationCreateAuditEntryState", str)
	}
	return nil
}

func (e OauthApplicationCreateAuditEntryState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The corresponding operation type for the action
type OperationType string

const (
	// An existing resource was accessed
	OperationTypeAccess OperationType = "ACCESS"
	// A resource performed an authentication event
	OperationTypeAuthentication OperationType = "AUTHENTICATION"
	// A new resource was created
	OperationTypeCreate OperationType = "CREATE"
	// An existing resource was modified
	OperationTypeModify OperationType = "MODIFY"
	// An existing resource was removed
	OperationTypeRemove OperationType = "REMOVE"
	// An existing resource was restored
	OperationTypeRestore OperationType = "RESTORE"
	// An existing resource was transferred between multiple resources
	OperationTypeTransfer OperationType = "TRANSFER"
)

var AllOperationType = []OperationType{
	OperationTypeAccess,
	OperationTypeAuthentication,
	OperationTypeCreate,
	OperationTypeModify,
	OperationTypeRemove,
	OperationTypeRestore,
	OperationTypeTransfer,
}

func (e OperationType) IsValid() bool {
	switch e {
	case OperationTypeAccess, OperationTypeAuthentication, OperationTypeCreate, OperationTypeModify, OperationTypeRemove, OperationTypeRestore, OperationTypeTransfer:
		return true
	}
	return false
}

func (e OperationType) String() string {
	return string(e)
}

func (e *OperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationType", str)
	}
	return nil
}

func (e OperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The permissions available to members on an Organization.
type OrgAddMemberAuditEntryPermission string

const (
	// Can read and clone repositories.
	OrgAddMemberAuditEntryPermissionRead OrgAddMemberAuditEntryPermission = "READ"
	// Can read, clone, push, and add collaborators to repositories.
	OrgAddMemberAuditEntryPermissionAdmin OrgAddMemberAuditEntryPermission = "ADMIN"
)

var AllOrgAddMemberAuditEntryPermission = []OrgAddMemberAuditEntryPermission{
	OrgAddMemberAuditEntryPermissionRead,
	OrgAddMemberAuditEntryPermissionAdmin,
}

func (e OrgAddMemberAuditEntryPermission) IsValid() bool {
	switch e {
	case OrgAddMemberAuditEntryPermissionRead, OrgAddMemberAuditEntryPermissionAdmin:
		return true
	}
	return false
}

func (e OrgAddMemberAuditEntryPermission) String() string {
	return string(e)
}

func (e *OrgAddMemberAuditEntryPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgAddMemberAuditEntryPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgAddMemberAuditEntryPermission", str)
	}
	return nil
}

func (e OrgAddMemberAuditEntryPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The billing plans available for organizations.
type OrgCreateAuditEntryBillingPlan string

const (
	// Free Plan
	OrgCreateAuditEntryBillingPlanFree OrgCreateAuditEntryBillingPlan = "FREE"
	// Team Plan
	OrgCreateAuditEntryBillingPlanBusiness OrgCreateAuditEntryBillingPlan = "BUSINESS"
	// Enterprise Cloud Plan
	OrgCreateAuditEntryBillingPlanBusinessPlus OrgCreateAuditEntryBillingPlan = "BUSINESS_PLUS"
	// Legacy Unlimited Plan
	OrgCreateAuditEntryBillingPlanUnlimited OrgCreateAuditEntryBillingPlan = "UNLIMITED"
	// Tiered Per Seat Plan
	OrgCreateAuditEntryBillingPlanTieredPerSeat OrgCreateAuditEntryBillingPlan = "TIERED_PER_SEAT"
)

var AllOrgCreateAuditEntryBillingPlan = []OrgCreateAuditEntryBillingPlan{
	OrgCreateAuditEntryBillingPlanFree,
	OrgCreateAuditEntryBillingPlanBusiness,
	OrgCreateAuditEntryBillingPlanBusinessPlus,
	OrgCreateAuditEntryBillingPlanUnlimited,
	OrgCreateAuditEntryBillingPlanTieredPerSeat,
}

func (e OrgCreateAuditEntryBillingPlan) IsValid() bool {
	switch e {
	case OrgCreateAuditEntryBillingPlanFree, OrgCreateAuditEntryBillingPlanBusiness, OrgCreateAuditEntryBillingPlanBusinessPlus, OrgCreateAuditEntryBillingPlanUnlimited, OrgCreateAuditEntryBillingPlanTieredPerSeat:
		return true
	}
	return false
}

func (e OrgCreateAuditEntryBillingPlan) String() string {
	return string(e)
}

func (e *OrgCreateAuditEntryBillingPlan) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgCreateAuditEntryBillingPlan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgCreateAuditEntryBillingPlan", str)
	}
	return nil
}

func (e OrgCreateAuditEntryBillingPlan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which enterprise owners can be ordered.
type OrgEnterpriseOwnerOrderField string

const (
	// Order enterprise owners by login.
	OrgEnterpriseOwnerOrderFieldLogin OrgEnterpriseOwnerOrderField = "LOGIN"
)

var AllOrgEnterpriseOwnerOrderField = []OrgEnterpriseOwnerOrderField{
	OrgEnterpriseOwnerOrderFieldLogin,
}

func (e OrgEnterpriseOwnerOrderField) IsValid() bool {
	switch e {
	case OrgEnterpriseOwnerOrderFieldLogin:
		return true
	}
	return false
}

func (e OrgEnterpriseOwnerOrderField) String() string {
	return string(e)
}

func (e *OrgEnterpriseOwnerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgEnterpriseOwnerOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgEnterpriseOwnerOrderField", str)
	}
	return nil
}

func (e OrgEnterpriseOwnerOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a billing manager was removed from an Organization.
type OrgRemoveBillingManagerAuditEntryReason string

const (
	// The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveBillingManagerAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveBillingManagerAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// SAML external identity missing
	OrgRemoveBillingManagerAuditEntryReasonSamlExternalIDEntityMissing OrgRemoveBillingManagerAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
	// SAML SSO enforcement requires an external identity
	OrgRemoveBillingManagerAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity OrgRemoveBillingManagerAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
)

var AllOrgRemoveBillingManagerAuditEntryReason = []OrgRemoveBillingManagerAuditEntryReason{
	OrgRemoveBillingManagerAuditEntryReasonTwoFactorRequirementNonCompliance,
	OrgRemoveBillingManagerAuditEntryReasonSamlExternalIDEntityMissing,
	OrgRemoveBillingManagerAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity,
}

func (e OrgRemoveBillingManagerAuditEntryReason) IsValid() bool {
	switch e {
	case OrgRemoveBillingManagerAuditEntryReasonTwoFactorRequirementNonCompliance, OrgRemoveBillingManagerAuditEntryReasonSamlExternalIDEntityMissing, OrgRemoveBillingManagerAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity:
		return true
	}
	return false
}

func (e OrgRemoveBillingManagerAuditEntryReason) String() string {
	return string(e)
}

func (e *OrgRemoveBillingManagerAuditEntryReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgRemoveBillingManagerAuditEntryReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgRemoveBillingManagerAuditEntryReason", str)
	}
	return nil
}

func (e OrgRemoveBillingManagerAuditEntryReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of membership a user has with an Organization.
type OrgRemoveMemberAuditEntryMembershipType string

const (
	// A suspended member.
	OrgRemoveMemberAuditEntryMembershipTypeSuspended OrgRemoveMemberAuditEntryMembershipType = "SUSPENDED"
	// A direct member is a user that is a member of the Organization.
	OrgRemoveMemberAuditEntryMembershipTypeDirectMember OrgRemoveMemberAuditEntryMembershipType = "DIRECT_MEMBER"
	// Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
	OrgRemoveMemberAuditEntryMembershipTypeAdmin OrgRemoveMemberAuditEntryMembershipType = "ADMIN"
	// A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
	OrgRemoveMemberAuditEntryMembershipTypeBillingManager OrgRemoveMemberAuditEntryMembershipType = "BILLING_MANAGER"
	// An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
	OrgRemoveMemberAuditEntryMembershipTypeUnaffiliated OrgRemoveMemberAuditEntryMembershipType = "UNAFFILIATED"
	// An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
	OrgRemoveMemberAuditEntryMembershipTypeOutsideCollaborator OrgRemoveMemberAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"
)

var AllOrgRemoveMemberAuditEntryMembershipType = []OrgRemoveMemberAuditEntryMembershipType{
	OrgRemoveMemberAuditEntryMembershipTypeSuspended,
	OrgRemoveMemberAuditEntryMembershipTypeDirectMember,
	OrgRemoveMemberAuditEntryMembershipTypeAdmin,
	OrgRemoveMemberAuditEntryMembershipTypeBillingManager,
	OrgRemoveMemberAuditEntryMembershipTypeUnaffiliated,
	OrgRemoveMemberAuditEntryMembershipTypeOutsideCollaborator,
}

func (e OrgRemoveMemberAuditEntryMembershipType) IsValid() bool {
	switch e {
	case OrgRemoveMemberAuditEntryMembershipTypeSuspended, OrgRemoveMemberAuditEntryMembershipTypeDirectMember, OrgRemoveMemberAuditEntryMembershipTypeAdmin, OrgRemoveMemberAuditEntryMembershipTypeBillingManager, OrgRemoveMemberAuditEntryMembershipTypeUnaffiliated, OrgRemoveMemberAuditEntryMembershipTypeOutsideCollaborator:
		return true
	}
	return false
}

func (e OrgRemoveMemberAuditEntryMembershipType) String() string {
	return string(e)
}

func (e *OrgRemoveMemberAuditEntryMembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgRemoveMemberAuditEntryMembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgRemoveMemberAuditEntryMembershipType", str)
	}
	return nil
}

func (e OrgRemoveMemberAuditEntryMembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a member was removed from an Organization.
type OrgRemoveMemberAuditEntryReason string

const (
	// The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveMemberAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// SAML external identity missing
	OrgRemoveMemberAuditEntryReasonSamlExternalIDEntityMissing OrgRemoveMemberAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
	// SAML SSO enforcement requires an external identity
	OrgRemoveMemberAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity OrgRemoveMemberAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
	// User account has been deleted
	OrgRemoveMemberAuditEntryReasonUserAccountDeleted OrgRemoveMemberAuditEntryReason = "USER_ACCOUNT_DELETED"
	// User was removed from organization during account recovery
	OrgRemoveMemberAuditEntryReasonTwoFactorAccountRecovery OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_ACCOUNT_RECOVERY"
)

var AllOrgRemoveMemberAuditEntryReason = []OrgRemoveMemberAuditEntryReason{
	OrgRemoveMemberAuditEntryReasonTwoFactorRequirementNonCompliance,
	OrgRemoveMemberAuditEntryReasonSamlExternalIDEntityMissing,
	OrgRemoveMemberAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity,
	OrgRemoveMemberAuditEntryReasonUserAccountDeleted,
	OrgRemoveMemberAuditEntryReasonTwoFactorAccountRecovery,
}

func (e OrgRemoveMemberAuditEntryReason) IsValid() bool {
	switch e {
	case OrgRemoveMemberAuditEntryReasonTwoFactorRequirementNonCompliance, OrgRemoveMemberAuditEntryReasonSamlExternalIDEntityMissing, OrgRemoveMemberAuditEntryReasonSamlSsoEnforcementRequiresExternalIDEntity, OrgRemoveMemberAuditEntryReasonUserAccountDeleted, OrgRemoveMemberAuditEntryReasonTwoFactorAccountRecovery:
		return true
	}
	return false
}

func (e OrgRemoveMemberAuditEntryReason) String() string {
	return string(e)
}

func (e *OrgRemoveMemberAuditEntryReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgRemoveMemberAuditEntryReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgRemoveMemberAuditEntryReason", str)
	}
	return nil
}

func (e OrgRemoveMemberAuditEntryReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of membership a user has with an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryMembershipType string

const (
	// An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeOutsideCollaborator OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"
	// An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeUnaffiliated OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "UNAFFILIATED"
	// A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeBillingManager OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "BILLING_MANAGER"
)

var AllOrgRemoveOutsideCollaboratorAuditEntryMembershipType = []OrgRemoveOutsideCollaboratorAuditEntryMembershipType{
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeOutsideCollaborator,
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeUnaffiliated,
	OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeBillingManager,
}

func (e OrgRemoveOutsideCollaboratorAuditEntryMembershipType) IsValid() bool {
	switch e {
	case OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeOutsideCollaborator, OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeUnaffiliated, OrgRemoveOutsideCollaboratorAuditEntryMembershipTypeBillingManager:
		return true
	}
	return false
}

func (e OrgRemoveOutsideCollaboratorAuditEntryMembershipType) String() string {
	return string(e)
}

func (e *OrgRemoveOutsideCollaboratorAuditEntryMembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgRemoveOutsideCollaboratorAuditEntryMembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgRemoveOutsideCollaboratorAuditEntryMembershipType", str)
	}
	return nil
}

func (e OrgRemoveOutsideCollaboratorAuditEntryMembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason an outside collaborator was removed from an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryReason string

const (
	// The organization required 2FA of its billing managers and this user did not have 2FA enabled.
	OrgRemoveOutsideCollaboratorAuditEntryReasonTwoFactorRequirementNonCompliance OrgRemoveOutsideCollaboratorAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
	// SAML external identity missing
	OrgRemoveOutsideCollaboratorAuditEntryReasonSamlExternalIDEntityMissing OrgRemoveOutsideCollaboratorAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"
)

var AllOrgRemoveOutsideCollaboratorAuditEntryReason = []OrgRemoveOutsideCollaboratorAuditEntryReason{
	OrgRemoveOutsideCollaboratorAuditEntryReasonTwoFactorRequirementNonCompliance,
	OrgRemoveOutsideCollaboratorAuditEntryReasonSamlExternalIDEntityMissing,
}

func (e OrgRemoveOutsideCollaboratorAuditEntryReason) IsValid() bool {
	switch e {
	case OrgRemoveOutsideCollaboratorAuditEntryReasonTwoFactorRequirementNonCompliance, OrgRemoveOutsideCollaboratorAuditEntryReasonSamlExternalIDEntityMissing:
		return true
	}
	return false
}

func (e OrgRemoveOutsideCollaboratorAuditEntryReason) String() string {
	return string(e)
}

func (e *OrgRemoveOutsideCollaboratorAuditEntryReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgRemoveOutsideCollaboratorAuditEntryReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgRemoveOutsideCollaboratorAuditEntryReason", str)
	}
	return nil
}

func (e OrgRemoveOutsideCollaboratorAuditEntryReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The default permission a repository can have in an Organization.
type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission string

const (
	// Can read and clone repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionRead OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "READ"
	// Can read, clone and push to repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionWrite OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "WRITE"
	// Can read, clone, push, and add collaborators to repositories.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionAdmin OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "ADMIN"
	// No default permission value.
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionNone OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "NONE"
)

var AllOrgUpdateDefaultRepositoryPermissionAuditEntryPermission = []OrgUpdateDefaultRepositoryPermissionAuditEntryPermission{
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionRead,
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionWrite,
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionAdmin,
	OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionNone,
}

func (e OrgUpdateDefaultRepositoryPermissionAuditEntryPermission) IsValid() bool {
	switch e {
	case OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionRead, OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionWrite, OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionAdmin, OrgUpdateDefaultRepositoryPermissionAuditEntryPermissionNone:
		return true
	}
	return false
}

func (e OrgUpdateDefaultRepositoryPermissionAuditEntryPermission) String() string {
	return string(e)
}

func (e *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgUpdateDefaultRepositoryPermissionAuditEntryPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgUpdateDefaultRepositoryPermissionAuditEntryPermission", str)
	}
	return nil
}

func (e OrgUpdateDefaultRepositoryPermissionAuditEntryPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The permissions available to members on an Organization.
type OrgUpdateMemberAuditEntryPermission string

const (
	// Can read and clone repositories.
	OrgUpdateMemberAuditEntryPermissionRead OrgUpdateMemberAuditEntryPermission = "READ"
	// Can read, clone, push, and add collaborators to repositories.
	OrgUpdateMemberAuditEntryPermissionAdmin OrgUpdateMemberAuditEntryPermission = "ADMIN"
)

var AllOrgUpdateMemberAuditEntryPermission = []OrgUpdateMemberAuditEntryPermission{
	OrgUpdateMemberAuditEntryPermissionRead,
	OrgUpdateMemberAuditEntryPermissionAdmin,
}

func (e OrgUpdateMemberAuditEntryPermission) IsValid() bool {
	switch e {
	case OrgUpdateMemberAuditEntryPermissionRead, OrgUpdateMemberAuditEntryPermissionAdmin:
		return true
	}
	return false
}

func (e OrgUpdateMemberAuditEntryPermission) String() string {
	return string(e)
}

func (e *OrgUpdateMemberAuditEntryPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgUpdateMemberAuditEntryPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgUpdateMemberAuditEntryPermission", str)
	}
	return nil
}

func (e OrgUpdateMemberAuditEntryPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The permissions available for repository creation on an Organization.
type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility string

const (
	// All organization members are restricted from creating any repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityAll OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "ALL"
	// All organization members are restricted from creating public repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublic OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC"
	// All organization members are allowed to create any repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityNone OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "NONE"
	// All organization members are restricted from creating private repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivate OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE"
	// All organization members are restricted from creating internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "INTERNAL"
	// All organization members are restricted from creating public or internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_INTERNAL"
	// All organization members are restricted from creating private or internal repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivateInternal OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE_INTERNAL"
	// All organization members are restricted from creating public or private repositories.
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicPrivate OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_PRIVATE"
)

var AllOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = []OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility{
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityAll,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublic,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityNone,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivate,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityInternal,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicInternal,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivateInternal,
	OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicPrivate,
}

func (e OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility) IsValid() bool {
	switch e {
	case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityAll, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublic, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityNone, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivate, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityInternal, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicInternal, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPrivateInternal, OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibilityPublicPrivate:
		return true
	}
	return false
}

func (e OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility) String() string {
	return string(e)
}

func (e *OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility", str)
	}
	return nil
}

func (e OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible organization invitation roles.
type OrganizationInvitationRole string

const (
	// The user is invited to be a direct member of the organization.
	OrganizationInvitationRoleDirectMember OrganizationInvitationRole = "DIRECT_MEMBER"
	// The user is invited to be an admin of the organization.
	OrganizationInvitationRoleAdmin OrganizationInvitationRole = "ADMIN"
	// The user is invited to be a billing manager of the organization.
	OrganizationInvitationRoleBillingManager OrganizationInvitationRole = "BILLING_MANAGER"
	// The user's previous role will be reinstated.
	OrganizationInvitationRoleReinstate OrganizationInvitationRole = "REINSTATE"
)

var AllOrganizationInvitationRole = []OrganizationInvitationRole{
	OrganizationInvitationRoleDirectMember,
	OrganizationInvitationRoleAdmin,
	OrganizationInvitationRoleBillingManager,
	OrganizationInvitationRoleReinstate,
}

func (e OrganizationInvitationRole) IsValid() bool {
	switch e {
	case OrganizationInvitationRoleDirectMember, OrganizationInvitationRoleAdmin, OrganizationInvitationRoleBillingManager, OrganizationInvitationRoleReinstate:
		return true
	}
	return false
}

func (e OrganizationInvitationRole) String() string {
	return string(e)
}

func (e *OrganizationInvitationRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationInvitationRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationInvitationRole", str)
	}
	return nil
}

func (e OrganizationInvitationRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible organization invitation sources.
type OrganizationInvitationSource string

const (
	// The invitation was sent before this feature was added
	OrganizationInvitationSourceUnknown OrganizationInvitationSource = "UNKNOWN"
	// The invitation was created from the web interface or from API
	OrganizationInvitationSourceMember OrganizationInvitationSource = "MEMBER"
	// The invitation was created from SCIM
	OrganizationInvitationSourceScim OrganizationInvitationSource = "SCIM"
)

var AllOrganizationInvitationSource = []OrganizationInvitationSource{
	OrganizationInvitationSourceUnknown,
	OrganizationInvitationSourceMember,
	OrganizationInvitationSourceScim,
}

func (e OrganizationInvitationSource) IsValid() bool {
	switch e {
	case OrganizationInvitationSourceUnknown, OrganizationInvitationSourceMember, OrganizationInvitationSourceScim:
		return true
	}
	return false
}

func (e OrganizationInvitationSource) String() string {
	return string(e)
}

func (e *OrganizationInvitationSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationInvitationSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationInvitationSource", str)
	}
	return nil
}

func (e OrganizationInvitationSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible organization invitation types.
type OrganizationInvitationType string

const (
	// The invitation was to an existing user.
	OrganizationInvitationTypeUser OrganizationInvitationType = "USER"
	// The invitation was to an email address.
	OrganizationInvitationTypeEmail OrganizationInvitationType = "EMAIL"
)

var AllOrganizationInvitationType = []OrganizationInvitationType{
	OrganizationInvitationTypeUser,
	OrganizationInvitationTypeEmail,
}

func (e OrganizationInvitationType) IsValid() bool {
	switch e {
	case OrganizationInvitationTypeUser, OrganizationInvitationTypeEmail:
		return true
	}
	return false
}

func (e OrganizationInvitationType) String() string {
	return string(e)
}

func (e *OrganizationInvitationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationInvitationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationInvitationType", str)
	}
	return nil
}

func (e OrganizationInvitationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible roles within an organization for its members.
type OrganizationMemberRole string

const (
	// The user is a member of the organization.
	OrganizationMemberRoleMember OrganizationMemberRole = "MEMBER"
	// The user is an administrator of the organization.
	OrganizationMemberRoleAdmin OrganizationMemberRole = "ADMIN"
)

var AllOrganizationMemberRole = []OrganizationMemberRole{
	OrganizationMemberRoleMember,
	OrganizationMemberRoleAdmin,
}

func (e OrganizationMemberRole) IsValid() bool {
	switch e {
	case OrganizationMemberRoleMember, OrganizationMemberRoleAdmin:
		return true
	}
	return false
}

func (e OrganizationMemberRole) String() string {
	return string(e)
}

func (e *OrganizationMemberRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationMemberRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationMemberRole", str)
	}
	return nil
}

func (e OrganizationMemberRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible values for the members can create repositories setting on an organization.
type OrganizationMembersCanCreateRepositoriesSettingValue string

const (
	// Members will be able to create public and private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueAll OrganizationMembersCanCreateRepositoriesSettingValue = "ALL"
	// Members will be able to create only private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValuePrivate OrganizationMembersCanCreateRepositoriesSettingValue = "PRIVATE"
	// Members will be able to create only internal repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueInternal OrganizationMembersCanCreateRepositoriesSettingValue = "INTERNAL"
	// Members will not be able to create public or private repositories.
	OrganizationMembersCanCreateRepositoriesSettingValueDisabled OrganizationMembersCanCreateRepositoriesSettingValue = "DISABLED"
)

var AllOrganizationMembersCanCreateRepositoriesSettingValue = []OrganizationMembersCanCreateRepositoriesSettingValue{
	OrganizationMembersCanCreateRepositoriesSettingValueAll,
	OrganizationMembersCanCreateRepositoriesSettingValuePrivate,
	OrganizationMembersCanCreateRepositoriesSettingValueInternal,
	OrganizationMembersCanCreateRepositoriesSettingValueDisabled,
}

func (e OrganizationMembersCanCreateRepositoriesSettingValue) IsValid() bool {
	switch e {
	case OrganizationMembersCanCreateRepositoriesSettingValueAll, OrganizationMembersCanCreateRepositoriesSettingValuePrivate, OrganizationMembersCanCreateRepositoriesSettingValueInternal, OrganizationMembersCanCreateRepositoriesSettingValueDisabled:
		return true
	}
	return false
}

func (e OrganizationMembersCanCreateRepositoriesSettingValue) String() string {
	return string(e)
}

func (e *OrganizationMembersCanCreateRepositoriesSettingValue) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationMembersCanCreateRepositoriesSettingValue(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationMembersCanCreateRepositoriesSettingValue", str)
	}
	return nil
}

func (e OrganizationMembersCanCreateRepositoriesSettingValue) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The Octoshift Organization migration state.
type OrganizationMigrationState string

const (
	// The Octoshift migration has not started.
	OrganizationMigrationStateNotStarted OrganizationMigrationState = "NOT_STARTED"
	// The Octoshift migration has been queued.
	OrganizationMigrationStateQueued OrganizationMigrationState = "QUEUED"
	// The Octoshift migration is in progress.
	OrganizationMigrationStateInProgress OrganizationMigrationState = "IN_PROGRESS"
	// The Octoshift migration is performing pre repository migrations.
	OrganizationMigrationStatePreRepoMigration OrganizationMigrationState = "PRE_REPO_MIGRATION"
	// The Octoshift org migration is performing repository migrations.
	OrganizationMigrationStateRepoMigration OrganizationMigrationState = "REPO_MIGRATION"
	// The Octoshift migration is performing post repository migrations.
	OrganizationMigrationStatePostRepoMigration OrganizationMigrationState = "POST_REPO_MIGRATION"
	// The Octoshift migration has succeeded.
	OrganizationMigrationStateSucceeded OrganizationMigrationState = "SUCCEEDED"
	// The Octoshift migration has failed.
	OrganizationMigrationStateFailed OrganizationMigrationState = "FAILED"
	// The Octoshift migration needs to have its credentials validated.
	OrganizationMigrationStatePendingValidation OrganizationMigrationState = "PENDING_VALIDATION"
	// The Octoshift migration has invalid credentials.
	OrganizationMigrationStateFailedValidation OrganizationMigrationState = "FAILED_VALIDATION"
)

var AllOrganizationMigrationState = []OrganizationMigrationState{
	OrganizationMigrationStateNotStarted,
	OrganizationMigrationStateQueued,
	OrganizationMigrationStateInProgress,
	OrganizationMigrationStatePreRepoMigration,
	OrganizationMigrationStateRepoMigration,
	OrganizationMigrationStatePostRepoMigration,
	OrganizationMigrationStateSucceeded,
	OrganizationMigrationStateFailed,
	OrganizationMigrationStatePendingValidation,
	OrganizationMigrationStateFailedValidation,
}

func (e OrganizationMigrationState) IsValid() bool {
	switch e {
	case OrganizationMigrationStateNotStarted, OrganizationMigrationStateQueued, OrganizationMigrationStateInProgress, OrganizationMigrationStatePreRepoMigration, OrganizationMigrationStateRepoMigration, OrganizationMigrationStatePostRepoMigration, OrganizationMigrationStateSucceeded, OrganizationMigrationStateFailed, OrganizationMigrationStatePendingValidation, OrganizationMigrationStateFailedValidation:
		return true
	}
	return false
}

func (e OrganizationMigrationState) String() string {
	return string(e)
}

func (e *OrganizationMigrationState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationMigrationState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationMigrationState", str)
	}
	return nil
}

func (e OrganizationMigrationState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which organization connections can be ordered.
type OrganizationOrderField string

const (
	// Order organizations by creation time
	OrganizationOrderFieldCreatedAt OrganizationOrderField = "CREATED_AT"
	// Order organizations by login
	OrganizationOrderFieldLogin OrganizationOrderField = "LOGIN"
)

var AllOrganizationOrderField = []OrganizationOrderField{
	OrganizationOrderFieldCreatedAt,
	OrganizationOrderFieldLogin,
}

func (e OrganizationOrderField) IsValid() bool {
	switch e {
	case OrganizationOrderFieldCreatedAt, OrganizationOrderFieldLogin:
		return true
	}
	return false
}

func (e OrganizationOrderField) String() string {
	return string(e)
}

func (e *OrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

func (e OrganizationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which package file connections can be ordered.
type PackageFileOrderField string

const (
	// Order package files by creation time
	PackageFileOrderFieldCreatedAt PackageFileOrderField = "CREATED_AT"
)

var AllPackageFileOrderField = []PackageFileOrderField{
	PackageFileOrderFieldCreatedAt,
}

func (e PackageFileOrderField) IsValid() bool {
	switch e {
	case PackageFileOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e PackageFileOrderField) String() string {
	return string(e)
}

func (e *PackageFileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageFileOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageFileOrderField", str)
	}
	return nil
}

func (e PackageFileOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which package connections can be ordered.
type PackageOrderField string

const (
	// Order packages by creation time
	PackageOrderFieldCreatedAt PackageOrderField = "CREATED_AT"
)

var AllPackageOrderField = []PackageOrderField{
	PackageOrderFieldCreatedAt,
}

func (e PackageOrderField) IsValid() bool {
	switch e {
	case PackageOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e PackageOrderField) String() string {
	return string(e)
}

func (e *PackageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageOrderField", str)
	}
	return nil
}

func (e PackageOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types of a package.
type PackageType string

const (
	// An npm package.
	PackageTypeNpm PackageType = "NPM"
	// A rubygems package.
	PackageTypeRubygems PackageType = "RUBYGEMS"
	// A maven package.
	PackageTypeMaven PackageType = "MAVEN"
	// A docker image.
	PackageTypeDocker PackageType = "DOCKER"
	// A debian package.
	PackageTypeDebian PackageType = "DEBIAN"
	// A nuget package.
	PackageTypeNuget PackageType = "NUGET"
	// A python package.
	PackageTypePypi PackageType = "PYPI"
)

var AllPackageType = []PackageType{
	PackageTypeNpm,
	PackageTypeRubygems,
	PackageTypeMaven,
	PackageTypeDocker,
	PackageTypeDebian,
	PackageTypeNuget,
	PackageTypePypi,
}

func (e PackageType) IsValid() bool {
	switch e {
	case PackageTypeNpm, PackageTypeRubygems, PackageTypeMaven, PackageTypeDocker, PackageTypeDebian, PackageTypeNuget, PackageTypePypi:
		return true
	}
	return false
}

func (e PackageType) String() string {
	return string(e)
}

func (e *PackageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageType", str)
	}
	return nil
}

func (e PackageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which package version connections can be ordered.
type PackageVersionOrderField string

const (
	// Order package versions by creation time
	PackageVersionOrderFieldCreatedAt PackageVersionOrderField = "CREATED_AT"
)

var AllPackageVersionOrderField = []PackageVersionOrderField{
	PackageVersionOrderFieldCreatedAt,
}

func (e PackageVersionOrderField) IsValid() bool {
	switch e {
	case PackageVersionOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e PackageVersionOrderField) String() string {
	return string(e)
}

func (e *PackageVersionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageVersionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageVersionOrderField", str)
	}
	return nil
}

func (e PackageVersionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible types of patch statuses.
type PatchStatus string

const (
	// The file was added. Git status 'A'.
	PatchStatusAdded PatchStatus = "ADDED"
	// The file was deleted. Git status 'D'.
	PatchStatusDeleted PatchStatus = "DELETED"
	// The file was renamed. Git status 'R'.
	PatchStatusRenamed PatchStatus = "RENAMED"
	// The file was copied. Git status 'C'.
	PatchStatusCopied PatchStatus = "COPIED"
	// The file's contents were changed. Git status 'M'.
	PatchStatusModified PatchStatus = "MODIFIED"
	// The file's type was changed. Git status 'T'.
	PatchStatusChanged PatchStatus = "CHANGED"
)

var AllPatchStatus = []PatchStatus{
	PatchStatusAdded,
	PatchStatusDeleted,
	PatchStatusRenamed,
	PatchStatusCopied,
	PatchStatusModified,
	PatchStatusChanged,
}

func (e PatchStatus) IsValid() bool {
	switch e {
	case PatchStatusAdded, PatchStatusDeleted, PatchStatusRenamed, PatchStatusCopied, PatchStatusModified, PatchStatusChanged:
		return true
	}
	return false
}

func (e PatchStatus) String() string {
	return string(e)
}

func (e *PatchStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PatchStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PatchStatus", str)
	}
	return nil
}

func (e PatchStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents items that can be pinned to a profile page or dashboard.
type PinnableItemType string

const (
	// A repository.
	PinnableItemTypeRepository PinnableItemType = "REPOSITORY"
	// A gist.
	PinnableItemTypeGist PinnableItemType = "GIST"
	// An issue.
	PinnableItemTypeIssue PinnableItemType = "ISSUE"
	// A project.
	PinnableItemTypeProject PinnableItemType = "PROJECT"
	// A pull request.
	PinnableItemTypePullRequest PinnableItemType = "PULL_REQUEST"
	// A user.
	PinnableItemTypeUser PinnableItemType = "USER"
	// An organization.
	PinnableItemTypeOrganization PinnableItemType = "ORGANIZATION"
	// A team.
	PinnableItemTypeTeam PinnableItemType = "TEAM"
)

var AllPinnableItemType = []PinnableItemType{
	PinnableItemTypeRepository,
	PinnableItemTypeGist,
	PinnableItemTypeIssue,
	PinnableItemTypeProject,
	PinnableItemTypePullRequest,
	PinnableItemTypeUser,
	PinnableItemTypeOrganization,
	PinnableItemTypeTeam,
}

func (e PinnableItemType) IsValid() bool {
	switch e {
	case PinnableItemTypeRepository, PinnableItemTypeGist, PinnableItemTypeIssue, PinnableItemTypeProject, PinnableItemTypePullRequest, PinnableItemTypeUser, PinnableItemTypeOrganization, PinnableItemTypeTeam:
		return true
	}
	return false
}

func (e PinnableItemType) String() string {
	return string(e)
}

func (e *PinnableItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinnableItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinnableItemType", str)
	}
	return nil
}

func (e PinnableItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Preconfigured gradients that may be used to style discussions pinned within a repository.
type PinnedDiscussionGradient string

const (
	// A gradient of red to orange
	PinnedDiscussionGradientRedOrange PinnedDiscussionGradient = "RED_ORANGE"
	// A gradient of blue to mint
	PinnedDiscussionGradientBlueMint PinnedDiscussionGradient = "BLUE_MINT"
	// A gradient of blue to purple
	PinnedDiscussionGradientBluePurple PinnedDiscussionGradient = "BLUE_PURPLE"
	// A gradient of pink to blue
	PinnedDiscussionGradientPinkBlue PinnedDiscussionGradient = "PINK_BLUE"
	// A gradient of purple to coral
	PinnedDiscussionGradientPurpleCoral PinnedDiscussionGradient = "PURPLE_CORAL"
)

var AllPinnedDiscussionGradient = []PinnedDiscussionGradient{
	PinnedDiscussionGradientRedOrange,
	PinnedDiscussionGradientBlueMint,
	PinnedDiscussionGradientBluePurple,
	PinnedDiscussionGradientPinkBlue,
	PinnedDiscussionGradientPurpleCoral,
}

func (e PinnedDiscussionGradient) IsValid() bool {
	switch e {
	case PinnedDiscussionGradientRedOrange, PinnedDiscussionGradientBlueMint, PinnedDiscussionGradientBluePurple, PinnedDiscussionGradientPinkBlue, PinnedDiscussionGradientPurpleCoral:
		return true
	}
	return false
}

func (e PinnedDiscussionGradient) String() string {
	return string(e)
}

func (e *PinnedDiscussionGradient) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinnedDiscussionGradient(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinnedDiscussionGradient", str)
	}
	return nil
}

func (e PinnedDiscussionGradient) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Preconfigured background patterns that may be used to style discussions pinned within a repository.
type PinnedDiscussionPattern string

const (
	// A solid dot pattern
	PinnedDiscussionPatternDotFill PinnedDiscussionPattern = "DOT_FILL"
	// A plus sign pattern
	PinnedDiscussionPatternPlus PinnedDiscussionPattern = "PLUS"
	// A lightning bolt pattern
	PinnedDiscussionPatternZap PinnedDiscussionPattern = "ZAP"
	// An upward-facing chevron pattern
	PinnedDiscussionPatternChevronUp PinnedDiscussionPattern = "CHEVRON_UP"
	// A hollow dot pattern
	PinnedDiscussionPatternDot PinnedDiscussionPattern = "DOT"
	// A heart pattern
	PinnedDiscussionPatternHeartFill PinnedDiscussionPattern = "HEART_FILL"
)

var AllPinnedDiscussionPattern = []PinnedDiscussionPattern{
	PinnedDiscussionPatternDotFill,
	PinnedDiscussionPatternPlus,
	PinnedDiscussionPatternZap,
	PinnedDiscussionPatternChevronUp,
	PinnedDiscussionPatternDot,
	PinnedDiscussionPatternHeartFill,
}

func (e PinnedDiscussionPattern) IsValid() bool {
	switch e {
	case PinnedDiscussionPatternDotFill, PinnedDiscussionPatternPlus, PinnedDiscussionPatternZap, PinnedDiscussionPatternChevronUp, PinnedDiscussionPatternDot, PinnedDiscussionPatternHeartFill:
		return true
	}
	return false
}

func (e PinnedDiscussionPattern) String() string {
	return string(e)
}

func (e *PinnedDiscussionPattern) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PinnedDiscussionPattern(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PinnedDiscussionPattern", str)
	}
	return nil
}

func (e PinnedDiscussionPattern) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible archived states of a project card.
type ProjectCardArchivedState string

const (
	// A project card that is archived
	ProjectCardArchivedStateArchived ProjectCardArchivedState = "ARCHIVED"
	// A project card that is not archived
	ProjectCardArchivedStateNotArchived ProjectCardArchivedState = "NOT_ARCHIVED"
)

var AllProjectCardArchivedState = []ProjectCardArchivedState{
	ProjectCardArchivedStateArchived,
	ProjectCardArchivedStateNotArchived,
}

func (e ProjectCardArchivedState) IsValid() bool {
	switch e {
	case ProjectCardArchivedStateArchived, ProjectCardArchivedStateNotArchived:
		return true
	}
	return false
}

func (e ProjectCardArchivedState) String() string {
	return string(e)
}

func (e *ProjectCardArchivedState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectCardArchivedState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectCardArchivedState", str)
	}
	return nil
}

func (e ProjectCardArchivedState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Various content states of a ProjectCard
type ProjectCardState string

const (
	// The card has content only.
	ProjectCardStateContentOnly ProjectCardState = "CONTENT_ONLY"
	// The card has a note only.
	ProjectCardStateNoteOnly ProjectCardState = "NOTE_ONLY"
	// The card is redacted.
	ProjectCardStateRedacted ProjectCardState = "REDACTED"
)

var AllProjectCardState = []ProjectCardState{
	ProjectCardStateContentOnly,
	ProjectCardStateNoteOnly,
	ProjectCardStateRedacted,
}

func (e ProjectCardState) IsValid() bool {
	switch e {
	case ProjectCardStateContentOnly, ProjectCardStateNoteOnly, ProjectCardStateRedacted:
		return true
	}
	return false
}

func (e ProjectCardState) String() string {
	return string(e)
}

func (e *ProjectCardState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectCardState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectCardState", str)
	}
	return nil
}

func (e ProjectCardState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The semantic purpose of the column - todo, in progress, or done.
type ProjectColumnPurpose string

const (
	// The column contains cards still to be worked on
	ProjectColumnPurposeTodo ProjectColumnPurpose = "TODO"
	// The column contains cards which are currently being worked on
	ProjectColumnPurposeInProgress ProjectColumnPurpose = "IN_PROGRESS"
	// The column contains cards which are complete
	ProjectColumnPurposeDone ProjectColumnPurpose = "DONE"
)

var AllProjectColumnPurpose = []ProjectColumnPurpose{
	ProjectColumnPurposeTodo,
	ProjectColumnPurposeInProgress,
	ProjectColumnPurposeDone,
}

func (e ProjectColumnPurpose) IsValid() bool {
	switch e {
	case ProjectColumnPurposeTodo, ProjectColumnPurposeInProgress, ProjectColumnPurposeDone:
		return true
	}
	return false
}

func (e ProjectColumnPurpose) String() string {
	return string(e)
}

func (e *ProjectColumnPurpose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectColumnPurpose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectColumnPurpose", str)
	}
	return nil
}

func (e ProjectColumnPurpose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project connections can be ordered.
type ProjectOrderField string

const (
	// Order projects by creation time
	ProjectOrderFieldCreatedAt ProjectOrderField = "CREATED_AT"
	// Order projects by update time
	ProjectOrderFieldUpdatedAt ProjectOrderField = "UPDATED_AT"
	// Order projects by name
	ProjectOrderFieldName ProjectOrderField = "NAME"
)

var AllProjectOrderField = []ProjectOrderField{
	ProjectOrderFieldCreatedAt,
	ProjectOrderFieldUpdatedAt,
	ProjectOrderFieldName,
}

func (e ProjectOrderField) IsValid() bool {
	switch e {
	case ProjectOrderFieldCreatedAt, ProjectOrderFieldUpdatedAt, ProjectOrderFieldName:
		return true
	}
	return false
}

func (e ProjectOrderField) String() string {
	return string(e)
}

func (e *ProjectOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectOrderField", str)
	}
	return nil
}

func (e ProjectOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// State of the project; either 'open' or 'closed'
type ProjectState string

const (
	// The project is open.
	ProjectStateOpen ProjectState = "OPEN"
	// The project is closed.
	ProjectStateClosed ProjectState = "CLOSED"
)

var AllProjectState = []ProjectState{
	ProjectStateOpen,
	ProjectStateClosed,
}

func (e ProjectState) IsValid() bool {
	switch e {
	case ProjectStateOpen, ProjectStateClosed:
		return true
	}
	return false
}

func (e ProjectState) String() string {
	return string(e)
}

func (e *ProjectState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectState", str)
	}
	return nil
}

func (e ProjectState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// GitHub-provided templates for Projects
type ProjectTemplate string

const (
	// Create a board with columns for To do, In progress and Done.
	ProjectTemplateBasicKanban ProjectTemplate = "BASIC_KANBAN"
	// Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
	ProjectTemplateAutomatedKanbanV2 ProjectTemplate = "AUTOMATED_KANBAN_V2"
	// Create a board with triggers to automatically move cards across columns with review automation.
	ProjectTemplateAutomatedReviewsKanban ProjectTemplate = "AUTOMATED_REVIEWS_KANBAN"
	// Create a board to triage and prioritize bugs with To do, priority, and Done columns.
	ProjectTemplateBugTriage ProjectTemplate = "BUG_TRIAGE"
)

var AllProjectTemplate = []ProjectTemplate{
	ProjectTemplateBasicKanban,
	ProjectTemplateAutomatedKanbanV2,
	ProjectTemplateAutomatedReviewsKanban,
	ProjectTemplateBugTriage,
}

func (e ProjectTemplate) IsValid() bool {
	switch e {
	case ProjectTemplateBasicKanban, ProjectTemplateAutomatedKanbanV2, ProjectTemplateAutomatedReviewsKanban, ProjectTemplateBugTriage:
		return true
	}
	return false
}

func (e ProjectTemplate) String() string {
	return string(e)
}

func (e *ProjectTemplate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectTemplate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectTemplate", str)
	}
	return nil
}

func (e ProjectTemplate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a project field.
type ProjectV2CustomFieldType string

const (
	// Text
	ProjectV2CustomFieldTypeText ProjectV2CustomFieldType = "TEXT"
	// Single Select
	ProjectV2CustomFieldTypeSingleSelect ProjectV2CustomFieldType = "SINGLE_SELECT"
	// Number
	ProjectV2CustomFieldTypeNumber ProjectV2CustomFieldType = "NUMBER"
	// Date
	ProjectV2CustomFieldTypeDate ProjectV2CustomFieldType = "DATE"
)

var AllProjectV2CustomFieldType = []ProjectV2CustomFieldType{
	ProjectV2CustomFieldTypeText,
	ProjectV2CustomFieldTypeSingleSelect,
	ProjectV2CustomFieldTypeNumber,
	ProjectV2CustomFieldTypeDate,
}

func (e ProjectV2CustomFieldType) IsValid() bool {
	switch e {
	case ProjectV2CustomFieldTypeText, ProjectV2CustomFieldTypeSingleSelect, ProjectV2CustomFieldTypeNumber, ProjectV2CustomFieldTypeDate:
		return true
	}
	return false
}

func (e ProjectV2CustomFieldType) String() string {
	return string(e)
}

func (e *ProjectV2CustomFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2CustomFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2CustomFieldType", str)
	}
	return nil
}

func (e ProjectV2CustomFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project v2 field connections can be ordered.
type ProjectV2FieldOrderField string

const (
	// Order project v2 fields by position
	ProjectV2FieldOrderFieldPosition ProjectV2FieldOrderField = "POSITION"
	// Order project v2 fields by creation time
	ProjectV2FieldOrderFieldCreatedAt ProjectV2FieldOrderField = "CREATED_AT"
	// Order project v2 fields by name
	ProjectV2FieldOrderFieldName ProjectV2FieldOrderField = "NAME"
)

var AllProjectV2FieldOrderField = []ProjectV2FieldOrderField{
	ProjectV2FieldOrderFieldPosition,
	ProjectV2FieldOrderFieldCreatedAt,
	ProjectV2FieldOrderFieldName,
}

func (e ProjectV2FieldOrderField) IsValid() bool {
	switch e {
	case ProjectV2FieldOrderFieldPosition, ProjectV2FieldOrderFieldCreatedAt, ProjectV2FieldOrderFieldName:
		return true
	}
	return false
}

func (e ProjectV2FieldOrderField) String() string {
	return string(e)
}

func (e *ProjectV2FieldOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2FieldOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2FieldOrderField", str)
	}
	return nil
}

func (e ProjectV2FieldOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a project field.
type ProjectV2FieldType string

const (
	// Assignees
	ProjectV2FieldTypeAssignees ProjectV2FieldType = "ASSIGNEES"
	// Linked Pull Requests
	ProjectV2FieldTypeLinkedPullRequests ProjectV2FieldType = "LINKED_PULL_REQUESTS"
	// Reviewers
	ProjectV2FieldTypeReviewers ProjectV2FieldType = "REVIEWERS"
	// Labels
	ProjectV2FieldTypeLabels ProjectV2FieldType = "LABELS"
	// Milestone
	ProjectV2FieldTypeMilestone ProjectV2FieldType = "MILESTONE"
	// Repository
	ProjectV2FieldTypeRepository ProjectV2FieldType = "REPOSITORY"
	// Title
	ProjectV2FieldTypeTitle ProjectV2FieldType = "TITLE"
	// Text
	ProjectV2FieldTypeText ProjectV2FieldType = "TEXT"
	// Single Select
	ProjectV2FieldTypeSingleSelect ProjectV2FieldType = "SINGLE_SELECT"
	// Number
	ProjectV2FieldTypeNumber ProjectV2FieldType = "NUMBER"
	// Date
	ProjectV2FieldTypeDate ProjectV2FieldType = "DATE"
	// Iteration
	ProjectV2FieldTypeIteration ProjectV2FieldType = "ITERATION"
	// Tracks
	ProjectV2FieldTypeTracks ProjectV2FieldType = "TRACKS"
	// Tracked by
	ProjectV2FieldTypeTrackedBy ProjectV2FieldType = "TRACKED_BY"
)

var AllProjectV2FieldType = []ProjectV2FieldType{
	ProjectV2FieldTypeAssignees,
	ProjectV2FieldTypeLinkedPullRequests,
	ProjectV2FieldTypeReviewers,
	ProjectV2FieldTypeLabels,
	ProjectV2FieldTypeMilestone,
	ProjectV2FieldTypeRepository,
	ProjectV2FieldTypeTitle,
	ProjectV2FieldTypeText,
	ProjectV2FieldTypeSingleSelect,
	ProjectV2FieldTypeNumber,
	ProjectV2FieldTypeDate,
	ProjectV2FieldTypeIteration,
	ProjectV2FieldTypeTracks,
	ProjectV2FieldTypeTrackedBy,
}

func (e ProjectV2FieldType) IsValid() bool {
	switch e {
	case ProjectV2FieldTypeAssignees, ProjectV2FieldTypeLinkedPullRequests, ProjectV2FieldTypeReviewers, ProjectV2FieldTypeLabels, ProjectV2FieldTypeMilestone, ProjectV2FieldTypeRepository, ProjectV2FieldTypeTitle, ProjectV2FieldTypeText, ProjectV2FieldTypeSingleSelect, ProjectV2FieldTypeNumber, ProjectV2FieldTypeDate, ProjectV2FieldTypeIteration, ProjectV2FieldTypeTracks, ProjectV2FieldTypeTrackedBy:
		return true
	}
	return false
}

func (e ProjectV2FieldType) String() string {
	return string(e)
}

func (e *ProjectV2FieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2FieldType", str)
	}
	return nil
}

func (e ProjectV2FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project v2 item field value connections can be ordered.
type ProjectV2ItemFieldValueOrderField string

const (
	// Order project v2 item field values by the their position in the project
	ProjectV2ItemFieldValueOrderFieldPosition ProjectV2ItemFieldValueOrderField = "POSITION"
)

var AllProjectV2ItemFieldValueOrderField = []ProjectV2ItemFieldValueOrderField{
	ProjectV2ItemFieldValueOrderFieldPosition,
}

func (e ProjectV2ItemFieldValueOrderField) IsValid() bool {
	switch e {
	case ProjectV2ItemFieldValueOrderFieldPosition:
		return true
	}
	return false
}

func (e ProjectV2ItemFieldValueOrderField) String() string {
	return string(e)
}

func (e *ProjectV2ItemFieldValueOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2ItemFieldValueOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2ItemFieldValueOrderField", str)
	}
	return nil
}

func (e ProjectV2ItemFieldValueOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project v2 item connections can be ordered.
type ProjectV2ItemOrderField string

const (
	// Order project v2 items by the their position in the project
	ProjectV2ItemOrderFieldPosition ProjectV2ItemOrderField = "POSITION"
)

var AllProjectV2ItemOrderField = []ProjectV2ItemOrderField{
	ProjectV2ItemOrderFieldPosition,
}

func (e ProjectV2ItemOrderField) IsValid() bool {
	switch e {
	case ProjectV2ItemOrderFieldPosition:
		return true
	}
	return false
}

func (e ProjectV2ItemOrderField) String() string {
	return string(e)
}

func (e *ProjectV2ItemOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2ItemOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2ItemOrderField", str)
	}
	return nil
}

func (e ProjectV2ItemOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of a project item.
type ProjectV2ItemType string

const (
	// Issue
	ProjectV2ItemTypeIssue ProjectV2ItemType = "ISSUE"
	// Pull Request
	ProjectV2ItemTypePullRequest ProjectV2ItemType = "PULL_REQUEST"
	// Draft Issue
	ProjectV2ItemTypeDraftIssue ProjectV2ItemType = "DRAFT_ISSUE"
	// Redacted Item
	ProjectV2ItemTypeRedacted ProjectV2ItemType = "REDACTED"
)

var AllProjectV2ItemType = []ProjectV2ItemType{
	ProjectV2ItemTypeIssue,
	ProjectV2ItemTypePullRequest,
	ProjectV2ItemTypeDraftIssue,
	ProjectV2ItemTypeRedacted,
}

func (e ProjectV2ItemType) IsValid() bool {
	switch e {
	case ProjectV2ItemTypeIssue, ProjectV2ItemTypePullRequest, ProjectV2ItemTypeDraftIssue, ProjectV2ItemTypeRedacted:
		return true
	}
	return false
}

func (e ProjectV2ItemType) String() string {
	return string(e)
}

func (e *ProjectV2ItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2ItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2ItemType", str)
	}
	return nil
}

func (e ProjectV2ItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which projects can be ordered.
type ProjectV2OrderField string

const (
	// The project's title
	ProjectV2OrderFieldTitle ProjectV2OrderField = "TITLE"
	// The project's number
	ProjectV2OrderFieldNumber ProjectV2OrderField = "NUMBER"
	// The project's date and time of update
	ProjectV2OrderFieldUpdatedAt ProjectV2OrderField = "UPDATED_AT"
	// The project's date and time of creation
	ProjectV2OrderFieldCreatedAt ProjectV2OrderField = "CREATED_AT"
)

var AllProjectV2OrderField = []ProjectV2OrderField{
	ProjectV2OrderFieldTitle,
	ProjectV2OrderFieldNumber,
	ProjectV2OrderFieldUpdatedAt,
	ProjectV2OrderFieldCreatedAt,
}

func (e ProjectV2OrderField) IsValid() bool {
	switch e {
	case ProjectV2OrderFieldTitle, ProjectV2OrderFieldNumber, ProjectV2OrderFieldUpdatedAt, ProjectV2OrderFieldCreatedAt:
		return true
	}
	return false
}

func (e ProjectV2OrderField) String() string {
	return string(e)
}

func (e *ProjectV2OrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2OrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2OrderField", str)
	}
	return nil
}

func (e ProjectV2OrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible roles of a collaborator on a project.
type ProjectV2Roles string

const (
	// The collaborator has no direct access to the project
	ProjectV2RolesNone ProjectV2Roles = "NONE"
	// The collaborator can view the project
	ProjectV2RolesReader ProjectV2Roles = "READER"
	// The collaborator can view and edit the project
	ProjectV2RolesWriter ProjectV2Roles = "WRITER"
	// The collaborator can view, edit, and maange the settings of the project
	ProjectV2RolesAdmin ProjectV2Roles = "ADMIN"
)

var AllProjectV2Roles = []ProjectV2Roles{
	ProjectV2RolesNone,
	ProjectV2RolesReader,
	ProjectV2RolesWriter,
	ProjectV2RolesAdmin,
}

func (e ProjectV2Roles) IsValid() bool {
	switch e {
	case ProjectV2RolesNone, ProjectV2RolesReader, ProjectV2RolesWriter, ProjectV2RolesAdmin:
		return true
	}
	return false
}

func (e ProjectV2Roles) String() string {
	return string(e)
}

func (e *ProjectV2Roles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2Roles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2Roles", str)
	}
	return nil
}

func (e ProjectV2Roles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The display color of a single-select field option.
type ProjectV2SingleSelectFieldOptionColor string

const (
	// GRAY
	ProjectV2SingleSelectFieldOptionColorGray ProjectV2SingleSelectFieldOptionColor = "GRAY"
	// BLUE
	ProjectV2SingleSelectFieldOptionColorBlue ProjectV2SingleSelectFieldOptionColor = "BLUE"
	// GREEN
	ProjectV2SingleSelectFieldOptionColorGreen ProjectV2SingleSelectFieldOptionColor = "GREEN"
	// YELLOW
	ProjectV2SingleSelectFieldOptionColorYellow ProjectV2SingleSelectFieldOptionColor = "YELLOW"
	// ORANGE
	ProjectV2SingleSelectFieldOptionColorOrange ProjectV2SingleSelectFieldOptionColor = "ORANGE"
	// RED
	ProjectV2SingleSelectFieldOptionColorRed ProjectV2SingleSelectFieldOptionColor = "RED"
	// PINK
	ProjectV2SingleSelectFieldOptionColorPink ProjectV2SingleSelectFieldOptionColor = "PINK"
	// PURPLE
	ProjectV2SingleSelectFieldOptionColorPurple ProjectV2SingleSelectFieldOptionColor = "PURPLE"
)

var AllProjectV2SingleSelectFieldOptionColor = []ProjectV2SingleSelectFieldOptionColor{
	ProjectV2SingleSelectFieldOptionColorGray,
	ProjectV2SingleSelectFieldOptionColorBlue,
	ProjectV2SingleSelectFieldOptionColorGreen,
	ProjectV2SingleSelectFieldOptionColorYellow,
	ProjectV2SingleSelectFieldOptionColorOrange,
	ProjectV2SingleSelectFieldOptionColorRed,
	ProjectV2SingleSelectFieldOptionColorPink,
	ProjectV2SingleSelectFieldOptionColorPurple,
}

func (e ProjectV2SingleSelectFieldOptionColor) IsValid() bool {
	switch e {
	case ProjectV2SingleSelectFieldOptionColorGray, ProjectV2SingleSelectFieldOptionColorBlue, ProjectV2SingleSelectFieldOptionColorGreen, ProjectV2SingleSelectFieldOptionColorYellow, ProjectV2SingleSelectFieldOptionColorOrange, ProjectV2SingleSelectFieldOptionColorRed, ProjectV2SingleSelectFieldOptionColorPink, ProjectV2SingleSelectFieldOptionColorPurple:
		return true
	}
	return false
}

func (e ProjectV2SingleSelectFieldOptionColor) String() string {
	return string(e)
}

func (e *ProjectV2SingleSelectFieldOptionColor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2SingleSelectFieldOptionColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2SingleSelectFieldOptionColor", str)
	}
	return nil
}

func (e ProjectV2SingleSelectFieldOptionColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a project v2.
type ProjectV2State string

const (
	// A project v2 that is still open
	ProjectV2StateOpen ProjectV2State = "OPEN"
	// A project v2 that has been closed
	ProjectV2StateClosed ProjectV2State = "CLOSED"
)

var AllProjectV2State = []ProjectV2State{
	ProjectV2StateOpen,
	ProjectV2StateClosed,
}

func (e ProjectV2State) IsValid() bool {
	switch e {
	case ProjectV2StateOpen, ProjectV2StateClosed:
		return true
	}
	return false
}

func (e ProjectV2State) String() string {
	return string(e)
}

func (e *ProjectV2State) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2State(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2State", str)
	}
	return nil
}

func (e ProjectV2State) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The layout of a project v2 view.
type ProjectV2ViewLayout string

const (
	// Board layout
	ProjectV2ViewLayoutBoardLayout ProjectV2ViewLayout = "BOARD_LAYOUT"
	// Table layout
	ProjectV2ViewLayoutTableLayout ProjectV2ViewLayout = "TABLE_LAYOUT"
	// Roadmap layout
	ProjectV2ViewLayoutRoadmapLayout ProjectV2ViewLayout = "ROADMAP_LAYOUT"
)

var AllProjectV2ViewLayout = []ProjectV2ViewLayout{
	ProjectV2ViewLayoutBoardLayout,
	ProjectV2ViewLayoutTableLayout,
	ProjectV2ViewLayoutRoadmapLayout,
}

func (e ProjectV2ViewLayout) IsValid() bool {
	switch e {
	case ProjectV2ViewLayoutBoardLayout, ProjectV2ViewLayoutTableLayout, ProjectV2ViewLayoutRoadmapLayout:
		return true
	}
	return false
}

func (e ProjectV2ViewLayout) String() string {
	return string(e)
}

func (e *ProjectV2ViewLayout) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2ViewLayout(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2ViewLayout", str)
	}
	return nil
}

func (e ProjectV2ViewLayout) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project v2 view connections can be ordered.
type ProjectV2ViewOrderField string

const (
	// Order project v2 views by position
	ProjectV2ViewOrderFieldPosition ProjectV2ViewOrderField = "POSITION"
	// Order project v2 views by creation time
	ProjectV2ViewOrderFieldCreatedAt ProjectV2ViewOrderField = "CREATED_AT"
	// Order project v2 views by name
	ProjectV2ViewOrderFieldName ProjectV2ViewOrderField = "NAME"
)

var AllProjectV2ViewOrderField = []ProjectV2ViewOrderField{
	ProjectV2ViewOrderFieldPosition,
	ProjectV2ViewOrderFieldCreatedAt,
	ProjectV2ViewOrderFieldName,
}

func (e ProjectV2ViewOrderField) IsValid() bool {
	switch e {
	case ProjectV2ViewOrderFieldPosition, ProjectV2ViewOrderFieldCreatedAt, ProjectV2ViewOrderFieldName:
		return true
	}
	return false
}

func (e ProjectV2ViewOrderField) String() string {
	return string(e)
}

func (e *ProjectV2ViewOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2ViewOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2ViewOrderField", str)
	}
	return nil
}

func (e ProjectV2ViewOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which project workflows can be ordered.
type ProjectV2WorkflowsOrderField string

const (
	// The workflows' name
	ProjectV2WorkflowsOrderFieldName ProjectV2WorkflowsOrderField = "NAME"
	// The workflows' number
	ProjectV2WorkflowsOrderFieldNumber ProjectV2WorkflowsOrderField = "NUMBER"
	// The workflows' date and time of update
	ProjectV2WorkflowsOrderFieldUpdatedAt ProjectV2WorkflowsOrderField = "UPDATED_AT"
	// The workflows' date and time of creation
	ProjectV2WorkflowsOrderFieldCreatedAt ProjectV2WorkflowsOrderField = "CREATED_AT"
)

var AllProjectV2WorkflowsOrderField = []ProjectV2WorkflowsOrderField{
	ProjectV2WorkflowsOrderFieldName,
	ProjectV2WorkflowsOrderFieldNumber,
	ProjectV2WorkflowsOrderFieldUpdatedAt,
	ProjectV2WorkflowsOrderFieldCreatedAt,
}

func (e ProjectV2WorkflowsOrderField) IsValid() bool {
	switch e {
	case ProjectV2WorkflowsOrderFieldName, ProjectV2WorkflowsOrderFieldNumber, ProjectV2WorkflowsOrderFieldUpdatedAt, ProjectV2WorkflowsOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e ProjectV2WorkflowsOrderField) String() string {
	return string(e)
}

func (e *ProjectV2WorkflowsOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectV2WorkflowsOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectV2WorkflowsOrderField", str)
	}
	return nil
}

func (e ProjectV2WorkflowsOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible methods for updating a pull request's head branch with the base branch.
type PullRequestBranchUpdateMethod string

const (
	// Update branch via merge
	PullRequestBranchUpdateMethodMerge PullRequestBranchUpdateMethod = "MERGE"
	// Update branch via rebase
	PullRequestBranchUpdateMethodRebase PullRequestBranchUpdateMethod = "REBASE"
)

var AllPullRequestBranchUpdateMethod = []PullRequestBranchUpdateMethod{
	PullRequestBranchUpdateMethodMerge,
	PullRequestBranchUpdateMethodRebase,
}

func (e PullRequestBranchUpdateMethod) IsValid() bool {
	switch e {
	case PullRequestBranchUpdateMethodMerge, PullRequestBranchUpdateMethodRebase:
		return true
	}
	return false
}

func (e PullRequestBranchUpdateMethod) String() string {
	return string(e)
}

func (e *PullRequestBranchUpdateMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestBranchUpdateMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestBranchUpdateMethod", str)
	}
	return nil
}

func (e PullRequestBranchUpdateMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents available types of methods to use when merging a pull request.
type PullRequestMergeMethod string

const (
	// Add all commits from the head branch to the base branch with a merge commit.
	PullRequestMergeMethodMerge PullRequestMergeMethod = "MERGE"
	// Combine all commits from the head branch into a single commit in the base branch.
	PullRequestMergeMethodSquash PullRequestMergeMethod = "SQUASH"
	// Add all commits from the head branch onto the base branch individually.
	PullRequestMergeMethodRebase PullRequestMergeMethod = "REBASE"
)

var AllPullRequestMergeMethod = []PullRequestMergeMethod{
	PullRequestMergeMethodMerge,
	PullRequestMergeMethodSquash,
	PullRequestMergeMethodRebase,
}

func (e PullRequestMergeMethod) IsValid() bool {
	switch e {
	case PullRequestMergeMethodMerge, PullRequestMergeMethodSquash, PullRequestMergeMethodRebase:
		return true
	}
	return false
}

func (e PullRequestMergeMethod) String() string {
	return string(e)
}

func (e *PullRequestMergeMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestMergeMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestMergeMethod", str)
	}
	return nil
}

func (e PullRequestMergeMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which pull_requests connections can be ordered.
type PullRequestOrderField string

const (
	// Order pull_requests by creation time
	PullRequestOrderFieldCreatedAt PullRequestOrderField = "CREATED_AT"
	// Order pull_requests by update time
	PullRequestOrderFieldUpdatedAt PullRequestOrderField = "UPDATED_AT"
)

var AllPullRequestOrderField = []PullRequestOrderField{
	PullRequestOrderFieldCreatedAt,
	PullRequestOrderFieldUpdatedAt,
}

func (e PullRequestOrderField) IsValid() bool {
	switch e {
	case PullRequestOrderFieldCreatedAt, PullRequestOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e PullRequestOrderField) String() string {
	return string(e)
}

func (e *PullRequestOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestOrderField", str)
	}
	return nil
}

func (e PullRequestOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a pull request review comment.
type PullRequestReviewCommentState string

const (
	// A comment that is part of a pending review
	PullRequestReviewCommentStatePending PullRequestReviewCommentState = "PENDING"
	// A comment that is part of a submitted review
	PullRequestReviewCommentStateSubmitted PullRequestReviewCommentState = "SUBMITTED"
)

var AllPullRequestReviewCommentState = []PullRequestReviewCommentState{
	PullRequestReviewCommentStatePending,
	PullRequestReviewCommentStateSubmitted,
}

func (e PullRequestReviewCommentState) IsValid() bool {
	switch e {
	case PullRequestReviewCommentStatePending, PullRequestReviewCommentStateSubmitted:
		return true
	}
	return false
}

func (e PullRequestReviewCommentState) String() string {
	return string(e)
}

func (e *PullRequestReviewCommentState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewCommentState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewCommentState", str)
	}
	return nil
}

func (e PullRequestReviewCommentState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The review status of a pull request.
type PullRequestReviewDecision string

const (
	// Changes have been requested on the pull request.
	PullRequestReviewDecisionChangesRequested PullRequestReviewDecision = "CHANGES_REQUESTED"
	// The pull request has received an approving review.
	PullRequestReviewDecisionApproved PullRequestReviewDecision = "APPROVED"
	// A review is required before the pull request can be merged.
	PullRequestReviewDecisionReviewRequired PullRequestReviewDecision = "REVIEW_REQUIRED"
)

var AllPullRequestReviewDecision = []PullRequestReviewDecision{
	PullRequestReviewDecisionChangesRequested,
	PullRequestReviewDecisionApproved,
	PullRequestReviewDecisionReviewRequired,
}

func (e PullRequestReviewDecision) IsValid() bool {
	switch e {
	case PullRequestReviewDecisionChangesRequested, PullRequestReviewDecisionApproved, PullRequestReviewDecisionReviewRequired:
		return true
	}
	return false
}

func (e PullRequestReviewDecision) String() string {
	return string(e)
}

func (e *PullRequestReviewDecision) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewDecision(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewDecision", str)
	}
	return nil
}

func (e PullRequestReviewDecision) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible events to perform on a pull request review.
type PullRequestReviewEvent string

const (
	// Submit general feedback without explicit approval.
	PullRequestReviewEventComment PullRequestReviewEvent = "COMMENT"
	// Submit feedback and approve merging these changes.
	PullRequestReviewEventApprove PullRequestReviewEvent = "APPROVE"
	// Submit feedback that must be addressed before merging.
	PullRequestReviewEventRequestChanges PullRequestReviewEvent = "REQUEST_CHANGES"
	// Dismiss review so it now longer effects merging.
	PullRequestReviewEventDismiss PullRequestReviewEvent = "DISMISS"
)

var AllPullRequestReviewEvent = []PullRequestReviewEvent{
	PullRequestReviewEventComment,
	PullRequestReviewEventApprove,
	PullRequestReviewEventRequestChanges,
	PullRequestReviewEventDismiss,
}

func (e PullRequestReviewEvent) IsValid() bool {
	switch e {
	case PullRequestReviewEventComment, PullRequestReviewEventApprove, PullRequestReviewEventRequestChanges, PullRequestReviewEventDismiss:
		return true
	}
	return false
}

func (e PullRequestReviewEvent) String() string {
	return string(e)
}

func (e *PullRequestReviewEvent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewEvent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewEvent", str)
	}
	return nil
}

func (e PullRequestReviewEvent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a pull request review.
type PullRequestReviewState string

const (
	// A review that has not yet been submitted.
	PullRequestReviewStatePending PullRequestReviewState = "PENDING"
	// An informational review.
	PullRequestReviewStateCommented PullRequestReviewState = "COMMENTED"
	// A review allowing the pull request to merge.
	PullRequestReviewStateApproved PullRequestReviewState = "APPROVED"
	// A review blocking the pull request from merging.
	PullRequestReviewStateChangesRequested PullRequestReviewState = "CHANGES_REQUESTED"
	// A review that has been dismissed.
	PullRequestReviewStateDismissed PullRequestReviewState = "DISMISSED"
)

var AllPullRequestReviewState = []PullRequestReviewState{
	PullRequestReviewStatePending,
	PullRequestReviewStateCommented,
	PullRequestReviewStateApproved,
	PullRequestReviewStateChangesRequested,
	PullRequestReviewStateDismissed,
}

func (e PullRequestReviewState) IsValid() bool {
	switch e {
	case PullRequestReviewStatePending, PullRequestReviewStateCommented, PullRequestReviewStateApproved, PullRequestReviewStateChangesRequested, PullRequestReviewStateDismissed:
		return true
	}
	return false
}

func (e PullRequestReviewState) String() string {
	return string(e)
}

func (e *PullRequestReviewState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewState", str)
	}
	return nil
}

func (e PullRequestReviewState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible subject types of a pull request review comment.
type PullRequestReviewThreadSubjectType string

const (
	// A comment that has been made against the line of a pull request
	PullRequestReviewThreadSubjectTypeLine PullRequestReviewThreadSubjectType = "LINE"
	// A comment that has been made against the file of a pull request
	PullRequestReviewThreadSubjectTypeFile PullRequestReviewThreadSubjectType = "FILE"
)

var AllPullRequestReviewThreadSubjectType = []PullRequestReviewThreadSubjectType{
	PullRequestReviewThreadSubjectTypeLine,
	PullRequestReviewThreadSubjectTypeFile,
}

func (e PullRequestReviewThreadSubjectType) IsValid() bool {
	switch e {
	case PullRequestReviewThreadSubjectTypeLine, PullRequestReviewThreadSubjectTypeFile:
		return true
	}
	return false
}

func (e PullRequestReviewThreadSubjectType) String() string {
	return string(e)
}

func (e *PullRequestReviewThreadSubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestReviewThreadSubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestReviewThreadSubjectType", str)
	}
	return nil
}

func (e PullRequestReviewThreadSubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a pull request.
type PullRequestState string

const (
	// A pull request that is still open.
	PullRequestStateOpen PullRequestState = "OPEN"
	// A pull request that has been closed without being merged.
	PullRequestStateClosed PullRequestState = "CLOSED"
	// A pull request that has been closed by being merged.
	PullRequestStateMerged PullRequestState = "MERGED"
)

var AllPullRequestState = []PullRequestState{
	PullRequestStateOpen,
	PullRequestStateClosed,
	PullRequestStateMerged,
}

func (e PullRequestState) IsValid() bool {
	switch e {
	case PullRequestStateOpen, PullRequestStateClosed, PullRequestStateMerged:
		return true
	}
	return false
}

func (e PullRequestState) String() string {
	return string(e)
}

func (e *PullRequestState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestState", str)
	}
	return nil
}

func (e PullRequestState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible item types found in a timeline.
type PullRequestTimelineItemsItemType string

const (
	// Represents a Git commit part of a pull request.
	PullRequestTimelineItemsItemTypePullRequestCommit PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT"
	// Represents a commit comment thread part of a pull request.
	PullRequestTimelineItemsItemTypePullRequestCommitCommentThread PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT_COMMENT_THREAD"
	// A review object for a given pull request.
	PullRequestTimelineItemsItemTypePullRequestReview PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW"
	// A threaded list of comments for a given pull request.
	PullRequestTimelineItemsItemTypePullRequestReviewThread PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW_THREAD"
	// Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
	PullRequestTimelineItemsItemTypePullRequestRevisionMarker PullRequestTimelineItemsItemType = "PULL_REQUEST_REVISION_MARKER"
	// Represents a 'automatic_base_change_failed' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT"
	// Represents a 'automatic_base_change_succeeded' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT"
	// Represents a 'auto_merge_disabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent PullRequestTimelineItemsItemType = "AUTO_MERGE_DISABLED_EVENT"
	// Represents a 'auto_merge_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent PullRequestTimelineItemsItemType = "AUTO_MERGE_ENABLED_EVENT"
	// Represents a 'auto_rebase_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent PullRequestTimelineItemsItemType = "AUTO_REBASE_ENABLED_EVENT"
	// Represents a 'auto_squash_enabled' event on a given pull request.
	PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent PullRequestTimelineItemsItemType = "AUTO_SQUASH_ENABLED_EVENT"
	// Represents a 'base_ref_changed' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeBaseRefChangedEvent PullRequestTimelineItemsItemType = "BASE_REF_CHANGED_EVENT"
	// Represents a 'base_ref_force_pushed' event on a given pull request.
	PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent PullRequestTimelineItemsItemType = "BASE_REF_FORCE_PUSHED_EVENT"
	// Represents a 'base_ref_deleted' event on a given pull request.
	PullRequestTimelineItemsItemTypeBaseRefDeletedEvent PullRequestTimelineItemsItemType = "BASE_REF_DELETED_EVENT"
	// Represents a 'deployed' event on a given pull request.
	PullRequestTimelineItemsItemTypeDeployedEvent PullRequestTimelineItemsItemType = "DEPLOYED_EVENT"
	// Represents a 'deployment_environment_changed' event on a given pull request.
	PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent PullRequestTimelineItemsItemType = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT"
	// Represents a 'head_ref_deleted' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefDeletedEvent PullRequestTimelineItemsItemType = "HEAD_REF_DELETED_EVENT"
	// Represents a 'head_ref_force_pushed' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent PullRequestTimelineItemsItemType = "HEAD_REF_FORCE_PUSHED_EVENT"
	// Represents a 'head_ref_restored' event on a given pull request.
	PullRequestTimelineItemsItemTypeHeadRefRestoredEvent PullRequestTimelineItemsItemType = "HEAD_REF_RESTORED_EVENT"
	// Represents a 'merged' event on a given pull request.
	PullRequestTimelineItemsItemTypeMergedEvent PullRequestTimelineItemsItemType = "MERGED_EVENT"
	// Represents a 'review_dismissed' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeReviewDismissedEvent PullRequestTimelineItemsItemType = "REVIEW_DISMISSED_EVENT"
	// Represents an 'review_requested' event on a given pull request.
	PullRequestTimelineItemsItemTypeReviewRequestedEvent PullRequestTimelineItemsItemType = "REVIEW_REQUESTED_EVENT"
	// Represents an 'review_request_removed' event on a given pull request.
	PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent PullRequestTimelineItemsItemType = "REVIEW_REQUEST_REMOVED_EVENT"
	// Represents a 'ready_for_review' event on a given pull request.
	PullRequestTimelineItemsItemTypeReadyForReviewEvent PullRequestTimelineItemsItemType = "READY_FOR_REVIEW_EVENT"
	// Represents a 'convert_to_draft' event on a given pull request.
	PullRequestTimelineItemsItemTypeConvertToDraftEvent PullRequestTimelineItemsItemType = "CONVERT_TO_DRAFT_EVENT"
	// Represents an 'added_to_merge_queue' event on a given pull request.
	PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent PullRequestTimelineItemsItemType = "ADDED_TO_MERGE_QUEUE_EVENT"
	// Represents a 'removed_from_merge_queue' event on a given pull request.
	PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent PullRequestTimelineItemsItemType = "REMOVED_FROM_MERGE_QUEUE_EVENT"
	// Represents a comment on an Issue.
	PullRequestTimelineItemsItemTypeIssueComment PullRequestTimelineItemsItemType = "ISSUE_COMMENT"
	// Represents a mention made by one issue or pull request to another.
	PullRequestTimelineItemsItemTypeCrossReferencedEvent PullRequestTimelineItemsItemType = "CROSS_REFERENCED_EVENT"
	// Represents a 'added_to_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeAddedToProjectEvent PullRequestTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"
	// Represents an 'assigned' event on any assignable object.
	PullRequestTimelineItemsItemTypeAssignedEvent PullRequestTimelineItemsItemType = "ASSIGNED_EVENT"
	// Represents a 'closed' event on any `Closable`.
	PullRequestTimelineItemsItemTypeClosedEvent PullRequestTimelineItemsItemType = "CLOSED_EVENT"
	// Represents a 'comment_deleted' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeCommentDeletedEvent PullRequestTimelineItemsItemType = "COMMENT_DELETED_EVENT"
	// Represents a 'connected' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeConnectedEvent PullRequestTimelineItemsItemType = "CONNECTED_EVENT"
	// Represents a 'converted_note_to_issue' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent PullRequestTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
	// Represents a 'converted_to_discussion' event on a given issue.
	PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent PullRequestTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
	// Represents a 'demilestoned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeDemilestonedEvent PullRequestTimelineItemsItemType = "DEMILESTONED_EVENT"
	// Represents a 'disconnected' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeDisconnectedEvent PullRequestTimelineItemsItemType = "DISCONNECTED_EVENT"
	// Represents a 'labeled' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeLabeledEvent PullRequestTimelineItemsItemType = "LABELED_EVENT"
	// Represents a 'locked' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeLockedEvent PullRequestTimelineItemsItemType = "LOCKED_EVENT"
	// Represents a 'marked_as_duplicate' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent PullRequestTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"
	// Represents a 'mentioned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMentionedEvent PullRequestTimelineItemsItemType = "MENTIONED_EVENT"
	// Represents a 'milestoned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMilestonedEvent PullRequestTimelineItemsItemType = "MILESTONED_EVENT"
	// Represents a 'moved_columns_in_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent PullRequestTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"
	// Represents a 'pinned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypePinnedEvent PullRequestTimelineItemsItemType = "PINNED_EVENT"
	// Represents a 'referenced' event on a given `ReferencedSubject`.
	PullRequestTimelineItemsItemTypeReferencedEvent PullRequestTimelineItemsItemType = "REFERENCED_EVENT"
	// Represents a 'removed_from_project' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeRemovedFromProjectEvent PullRequestTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"
	// Represents a 'renamed' event on a given issue or pull request
	PullRequestTimelineItemsItemTypeRenamedTitleEvent PullRequestTimelineItemsItemType = "RENAMED_TITLE_EVENT"
	// Represents a 'reopened' event on any `Closable`.
	PullRequestTimelineItemsItemTypeReopenedEvent PullRequestTimelineItemsItemType = "REOPENED_EVENT"
	// Represents a 'subscribed' event on a given `Subscribable`.
	PullRequestTimelineItemsItemTypeSubscribedEvent PullRequestTimelineItemsItemType = "SUBSCRIBED_EVENT"
	// Represents a 'transferred' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeTransferredEvent PullRequestTimelineItemsItemType = "TRANSFERRED_EVENT"
	// Represents an 'unassigned' event on any assignable object.
	PullRequestTimelineItemsItemTypeUnassignedEvent PullRequestTimelineItemsItemType = "UNASSIGNED_EVENT"
	// Represents an 'unlabeled' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnlabeledEvent PullRequestTimelineItemsItemType = "UNLABELED_EVENT"
	// Represents an 'unlocked' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnlockedEvent PullRequestTimelineItemsItemType = "UNLOCKED_EVENT"
	// Represents a 'user_blocked' event on a given user.
	PullRequestTimelineItemsItemTypeUserBlockedEvent PullRequestTimelineItemsItemType = "USER_BLOCKED_EVENT"
	// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent PullRequestTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"
	// Represents an 'unpinned' event on a given issue or pull request.
	PullRequestTimelineItemsItemTypeUnpinnedEvent PullRequestTimelineItemsItemType = "UNPINNED_EVENT"
	// Represents an 'unsubscribed' event on a given `Subscribable`.
	PullRequestTimelineItemsItemTypeUnsubscribedEvent PullRequestTimelineItemsItemType = "UNSUBSCRIBED_EVENT"
)

var AllPullRequestTimelineItemsItemType = []PullRequestTimelineItemsItemType{
	PullRequestTimelineItemsItemTypePullRequestCommit,
	PullRequestTimelineItemsItemTypePullRequestCommitCommentThread,
	PullRequestTimelineItemsItemTypePullRequestReview,
	PullRequestTimelineItemsItemTypePullRequestReviewThread,
	PullRequestTimelineItemsItemTypePullRequestRevisionMarker,
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent,
	PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent,
	PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent,
	PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent,
	PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent,
	PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent,
	PullRequestTimelineItemsItemTypeBaseRefChangedEvent,
	PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent,
	PullRequestTimelineItemsItemTypeBaseRefDeletedEvent,
	PullRequestTimelineItemsItemTypeDeployedEvent,
	PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent,
	PullRequestTimelineItemsItemTypeHeadRefDeletedEvent,
	PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent,
	PullRequestTimelineItemsItemTypeHeadRefRestoredEvent,
	PullRequestTimelineItemsItemTypeMergedEvent,
	PullRequestTimelineItemsItemTypeReviewDismissedEvent,
	PullRequestTimelineItemsItemTypeReviewRequestedEvent,
	PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent,
	PullRequestTimelineItemsItemTypeReadyForReviewEvent,
	PullRequestTimelineItemsItemTypeConvertToDraftEvent,
	PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent,
	PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent,
	PullRequestTimelineItemsItemTypeIssueComment,
	PullRequestTimelineItemsItemTypeCrossReferencedEvent,
	PullRequestTimelineItemsItemTypeAddedToProjectEvent,
	PullRequestTimelineItemsItemTypeAssignedEvent,
	PullRequestTimelineItemsItemTypeClosedEvent,
	PullRequestTimelineItemsItemTypeCommentDeletedEvent,
	PullRequestTimelineItemsItemTypeConnectedEvent,
	PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent,
	PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent,
	PullRequestTimelineItemsItemTypeDemilestonedEvent,
	PullRequestTimelineItemsItemTypeDisconnectedEvent,
	PullRequestTimelineItemsItemTypeLabeledEvent,
	PullRequestTimelineItemsItemTypeLockedEvent,
	PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent,
	PullRequestTimelineItemsItemTypeMentionedEvent,
	PullRequestTimelineItemsItemTypeMilestonedEvent,
	PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent,
	PullRequestTimelineItemsItemTypePinnedEvent,
	PullRequestTimelineItemsItemTypeReferencedEvent,
	PullRequestTimelineItemsItemTypeRemovedFromProjectEvent,
	PullRequestTimelineItemsItemTypeRenamedTitleEvent,
	PullRequestTimelineItemsItemTypeReopenedEvent,
	PullRequestTimelineItemsItemTypeSubscribedEvent,
	PullRequestTimelineItemsItemTypeTransferredEvent,
	PullRequestTimelineItemsItemTypeUnassignedEvent,
	PullRequestTimelineItemsItemTypeUnlabeledEvent,
	PullRequestTimelineItemsItemTypeUnlockedEvent,
	PullRequestTimelineItemsItemTypeUserBlockedEvent,
	PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent,
	PullRequestTimelineItemsItemTypeUnpinnedEvent,
	PullRequestTimelineItemsItemTypeUnsubscribedEvent,
}

func (e PullRequestTimelineItemsItemType) IsValid() bool {
	switch e {
	case PullRequestTimelineItemsItemTypePullRequestCommit, PullRequestTimelineItemsItemTypePullRequestCommitCommentThread, PullRequestTimelineItemsItemTypePullRequestReview, PullRequestTimelineItemsItemTypePullRequestReviewThread, PullRequestTimelineItemsItemTypePullRequestRevisionMarker, PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent, PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent, PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent, PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent, PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent, PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent, PullRequestTimelineItemsItemTypeBaseRefChangedEvent, PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent, PullRequestTimelineItemsItemTypeBaseRefDeletedEvent, PullRequestTimelineItemsItemTypeDeployedEvent, PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent, PullRequestTimelineItemsItemTypeHeadRefDeletedEvent, PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent, PullRequestTimelineItemsItemTypeHeadRefRestoredEvent, PullRequestTimelineItemsItemTypeMergedEvent, PullRequestTimelineItemsItemTypeReviewDismissedEvent, PullRequestTimelineItemsItemTypeReviewRequestedEvent, PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent, PullRequestTimelineItemsItemTypeReadyForReviewEvent, PullRequestTimelineItemsItemTypeConvertToDraftEvent, PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent, PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent, PullRequestTimelineItemsItemTypeIssueComment, PullRequestTimelineItemsItemTypeCrossReferencedEvent, PullRequestTimelineItemsItemTypeAddedToProjectEvent, PullRequestTimelineItemsItemTypeAssignedEvent, PullRequestTimelineItemsItemTypeClosedEvent, PullRequestTimelineItemsItemTypeCommentDeletedEvent, PullRequestTimelineItemsItemTypeConnectedEvent, PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent, PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent, PullRequestTimelineItemsItemTypeDemilestonedEvent, PullRequestTimelineItemsItemTypeDisconnectedEvent, PullRequestTimelineItemsItemTypeLabeledEvent, PullRequestTimelineItemsItemTypeLockedEvent, PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeMentionedEvent, PullRequestTimelineItemsItemTypeMilestonedEvent, PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent, PullRequestTimelineItemsItemTypePinnedEvent, PullRequestTimelineItemsItemTypeReferencedEvent, PullRequestTimelineItemsItemTypeRemovedFromProjectEvent, PullRequestTimelineItemsItemTypeRenamedTitleEvent, PullRequestTimelineItemsItemTypeReopenedEvent, PullRequestTimelineItemsItemTypeSubscribedEvent, PullRequestTimelineItemsItemTypeTransferredEvent, PullRequestTimelineItemsItemTypeUnassignedEvent, PullRequestTimelineItemsItemTypeUnlabeledEvent, PullRequestTimelineItemsItemTypeUnlockedEvent, PullRequestTimelineItemsItemTypeUserBlockedEvent, PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeUnpinnedEvent, PullRequestTimelineItemsItemTypeUnsubscribedEvent:
		return true
	}
	return false
}

func (e PullRequestTimelineItemsItemType) String() string {
	return string(e)
}

func (e *PullRequestTimelineItemsItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestTimelineItemsItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestTimelineItemsItemType", str)
	}
	return nil
}

func (e PullRequestTimelineItemsItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible target states when updating a pull request.
type PullRequestUpdateState string

const (
	// A pull request that is still open.
	PullRequestUpdateStateOpen PullRequestUpdateState = "OPEN"
	// A pull request that has been closed without being merged.
	PullRequestUpdateStateClosed PullRequestUpdateState = "CLOSED"
)

var AllPullRequestUpdateState = []PullRequestUpdateState{
	PullRequestUpdateStateOpen,
	PullRequestUpdateStateClosed,
}

func (e PullRequestUpdateState) IsValid() bool {
	switch e {
	case PullRequestUpdateStateOpen, PullRequestUpdateStateClosed:
		return true
	}
	return false
}

func (e PullRequestUpdateState) String() string {
	return string(e)
}

func (e *PullRequestUpdateState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestUpdateState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestUpdateState", str)
	}
	return nil
}

func (e PullRequestUpdateState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Emojis that can be attached to Issues, Pull Requests and Comments.
type ReactionContent string

const (
	// Represents the `:+1:` emoji.
	ReactionContentThumbsUp ReactionContent = "THUMBS_UP"
	// Represents the `:-1:` emoji.
	ReactionContentThumbsDown ReactionContent = "THUMBS_DOWN"
	// Represents the `:laugh:` emoji.
	ReactionContentLaugh ReactionContent = "LAUGH"
	// Represents the `:hooray:` emoji.
	ReactionContentHooray ReactionContent = "HOORAY"
	// Represents the `:confused:` emoji.
	ReactionContentConfused ReactionContent = "CONFUSED"
	// Represents the `:heart:` emoji.
	ReactionContentHeart ReactionContent = "HEART"
	// Represents the `:rocket:` emoji.
	ReactionContentRocket ReactionContent = "ROCKET"
	// Represents the `:eyes:` emoji.
	ReactionContentEyes ReactionContent = "EYES"
)

var AllReactionContent = []ReactionContent{
	ReactionContentThumbsUp,
	ReactionContentThumbsDown,
	ReactionContentLaugh,
	ReactionContentHooray,
	ReactionContentConfused,
	ReactionContentHeart,
	ReactionContentRocket,
	ReactionContentEyes,
}

func (e ReactionContent) IsValid() bool {
	switch e {
	case ReactionContentThumbsUp, ReactionContentThumbsDown, ReactionContentLaugh, ReactionContentHooray, ReactionContentConfused, ReactionContentHeart, ReactionContentRocket, ReactionContentEyes:
		return true
	}
	return false
}

func (e ReactionContent) String() string {
	return string(e)
}

func (e *ReactionContent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReactionContent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReactionContent", str)
	}
	return nil
}

func (e ReactionContent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A list of fields that reactions can be ordered by.
type ReactionOrderField string

const (
	// Allows ordering a list of reactions by when they were created.
	ReactionOrderFieldCreatedAt ReactionOrderField = "CREATED_AT"
)

var AllReactionOrderField = []ReactionOrderField{
	ReactionOrderFieldCreatedAt,
}

func (e ReactionOrderField) IsValid() bool {
	switch e {
	case ReactionOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e ReactionOrderField) String() string {
	return string(e)
}

func (e *ReactionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReactionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReactionOrderField", str)
	}
	return nil
}

func (e ReactionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ref connections can be ordered.
type RefOrderField string

const (
	// Order refs by underlying commit date if the ref prefix is refs/tags/
	RefOrderFieldTagCommitDate RefOrderField = "TAG_COMMIT_DATE"
	// Order refs by their alphanumeric name
	RefOrderFieldAlphabetical RefOrderField = "ALPHABETICAL"
)

var AllRefOrderField = []RefOrderField{
	RefOrderFieldTagCommitDate,
	RefOrderFieldAlphabetical,
}

func (e RefOrderField) IsValid() bool {
	switch e {
	case RefOrderFieldTagCommitDate, RefOrderFieldAlphabetical:
		return true
	}
	return false
}

func (e RefOrderField) String() string {
	return string(e)
}

func (e *RefOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefOrderField", str)
	}
	return nil
}

func (e RefOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which release connections can be ordered.
type ReleaseOrderField string

const (
	// Order releases by creation time
	ReleaseOrderFieldCreatedAt ReleaseOrderField = "CREATED_AT"
	// Order releases alphabetically by name
	ReleaseOrderFieldName ReleaseOrderField = "NAME"
)

var AllReleaseOrderField = []ReleaseOrderField{
	ReleaseOrderFieldCreatedAt,
	ReleaseOrderFieldName,
}

func (e ReleaseOrderField) IsValid() bool {
	switch e {
	case ReleaseOrderFieldCreatedAt, ReleaseOrderFieldName:
		return true
	}
	return false
}

func (e ReleaseOrderField) String() string {
	return string(e)
}

func (e *ReleaseOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReleaseOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReleaseOrderField", str)
	}
	return nil
}

func (e ReleaseOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoAccessAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoAccessAuditEntryVisibilityInternal RepoAccessAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoAccessAuditEntryVisibilityPrivate RepoAccessAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoAccessAuditEntryVisibilityPublic RepoAccessAuditEntryVisibility = "PUBLIC"
)

var AllRepoAccessAuditEntryVisibility = []RepoAccessAuditEntryVisibility{
	RepoAccessAuditEntryVisibilityInternal,
	RepoAccessAuditEntryVisibilityPrivate,
	RepoAccessAuditEntryVisibilityPublic,
}

func (e RepoAccessAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoAccessAuditEntryVisibilityInternal, RepoAccessAuditEntryVisibilityPrivate, RepoAccessAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoAccessAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoAccessAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoAccessAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoAccessAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoAccessAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoAddMemberAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoAddMemberAuditEntryVisibilityInternal RepoAddMemberAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoAddMemberAuditEntryVisibilityPrivate RepoAddMemberAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoAddMemberAuditEntryVisibilityPublic RepoAddMemberAuditEntryVisibility = "PUBLIC"
)

var AllRepoAddMemberAuditEntryVisibility = []RepoAddMemberAuditEntryVisibility{
	RepoAddMemberAuditEntryVisibilityInternal,
	RepoAddMemberAuditEntryVisibilityPrivate,
	RepoAddMemberAuditEntryVisibilityPublic,
}

func (e RepoAddMemberAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoAddMemberAuditEntryVisibilityInternal, RepoAddMemberAuditEntryVisibilityPrivate, RepoAddMemberAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoAddMemberAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoAddMemberAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoAddMemberAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoAddMemberAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoAddMemberAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoArchivedAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoArchivedAuditEntryVisibilityInternal RepoArchivedAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoArchivedAuditEntryVisibilityPrivate RepoArchivedAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoArchivedAuditEntryVisibilityPublic RepoArchivedAuditEntryVisibility = "PUBLIC"
)

var AllRepoArchivedAuditEntryVisibility = []RepoArchivedAuditEntryVisibility{
	RepoArchivedAuditEntryVisibilityInternal,
	RepoArchivedAuditEntryVisibilityPrivate,
	RepoArchivedAuditEntryVisibilityPublic,
}

func (e RepoArchivedAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoArchivedAuditEntryVisibilityInternal, RepoArchivedAuditEntryVisibilityPrivate, RepoArchivedAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoArchivedAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoArchivedAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoArchivedAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoArchivedAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoArchivedAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The merge options available for pull requests to this repository.
type RepoChangeMergeSettingAuditEntryMergeType string

const (
	// The pull request is added to the base branch in a merge commit.
	RepoChangeMergeSettingAuditEntryMergeTypeMerge RepoChangeMergeSettingAuditEntryMergeType = "MERGE"
	// Commits from the pull request are added onto the base branch individually without a merge commit.
	RepoChangeMergeSettingAuditEntryMergeTypeRebase RepoChangeMergeSettingAuditEntryMergeType = "REBASE"
	// The pull request's commits are squashed into a single commit before they are merged to the base branch.
	RepoChangeMergeSettingAuditEntryMergeTypeSquash RepoChangeMergeSettingAuditEntryMergeType = "SQUASH"
)

var AllRepoChangeMergeSettingAuditEntryMergeType = []RepoChangeMergeSettingAuditEntryMergeType{
	RepoChangeMergeSettingAuditEntryMergeTypeMerge,
	RepoChangeMergeSettingAuditEntryMergeTypeRebase,
	RepoChangeMergeSettingAuditEntryMergeTypeSquash,
}

func (e RepoChangeMergeSettingAuditEntryMergeType) IsValid() bool {
	switch e {
	case RepoChangeMergeSettingAuditEntryMergeTypeMerge, RepoChangeMergeSettingAuditEntryMergeTypeRebase, RepoChangeMergeSettingAuditEntryMergeTypeSquash:
		return true
	}
	return false
}

func (e RepoChangeMergeSettingAuditEntryMergeType) String() string {
	return string(e)
}

func (e *RepoChangeMergeSettingAuditEntryMergeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoChangeMergeSettingAuditEntryMergeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoChangeMergeSettingAuditEntryMergeType", str)
	}
	return nil
}

func (e RepoChangeMergeSettingAuditEntryMergeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoCreateAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoCreateAuditEntryVisibilityInternal RepoCreateAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoCreateAuditEntryVisibilityPrivate RepoCreateAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoCreateAuditEntryVisibilityPublic RepoCreateAuditEntryVisibility = "PUBLIC"
)

var AllRepoCreateAuditEntryVisibility = []RepoCreateAuditEntryVisibility{
	RepoCreateAuditEntryVisibilityInternal,
	RepoCreateAuditEntryVisibilityPrivate,
	RepoCreateAuditEntryVisibilityPublic,
}

func (e RepoCreateAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoCreateAuditEntryVisibilityInternal, RepoCreateAuditEntryVisibilityPrivate, RepoCreateAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoCreateAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoCreateAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoCreateAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoCreateAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoCreateAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoDestroyAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoDestroyAuditEntryVisibilityInternal RepoDestroyAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoDestroyAuditEntryVisibilityPrivate RepoDestroyAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoDestroyAuditEntryVisibilityPublic RepoDestroyAuditEntryVisibility = "PUBLIC"
)

var AllRepoDestroyAuditEntryVisibility = []RepoDestroyAuditEntryVisibility{
	RepoDestroyAuditEntryVisibilityInternal,
	RepoDestroyAuditEntryVisibilityPrivate,
	RepoDestroyAuditEntryVisibilityPublic,
}

func (e RepoDestroyAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoDestroyAuditEntryVisibilityInternal, RepoDestroyAuditEntryVisibilityPrivate, RepoDestroyAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoDestroyAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoDestroyAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoDestroyAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoDestroyAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoDestroyAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepoRemoveMemberAuditEntryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepoRemoveMemberAuditEntryVisibilityInternal RepoRemoveMemberAuditEntryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepoRemoveMemberAuditEntryVisibilityPrivate RepoRemoveMemberAuditEntryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepoRemoveMemberAuditEntryVisibilityPublic RepoRemoveMemberAuditEntryVisibility = "PUBLIC"
)

var AllRepoRemoveMemberAuditEntryVisibility = []RepoRemoveMemberAuditEntryVisibility{
	RepoRemoveMemberAuditEntryVisibilityInternal,
	RepoRemoveMemberAuditEntryVisibilityPrivate,
	RepoRemoveMemberAuditEntryVisibilityPublic,
}

func (e RepoRemoveMemberAuditEntryVisibility) IsValid() bool {
	switch e {
	case RepoRemoveMemberAuditEntryVisibilityInternal, RepoRemoveMemberAuditEntryVisibilityPrivate, RepoRemoveMemberAuditEntryVisibilityPublic:
		return true
	}
	return false
}

func (e RepoRemoveMemberAuditEntryVisibility) String() string {
	return string(e)
}

func (e *RepoRemoveMemberAuditEntryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepoRemoveMemberAuditEntryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepoRemoveMemberAuditEntryVisibility", str)
	}
	return nil
}

func (e RepoRemoveMemberAuditEntryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reasons a piece of content can be reported or minimized.
type ReportedContentClassifiers string

const (
	// A spammy piece of content
	ReportedContentClassifiersSpam ReportedContentClassifiers = "SPAM"
	// An abusive or harassing piece of content
	ReportedContentClassifiersAbuse ReportedContentClassifiers = "ABUSE"
	// An irrelevant piece of content
	ReportedContentClassifiersOffTopic ReportedContentClassifiers = "OFF_TOPIC"
	// An outdated piece of content
	ReportedContentClassifiersOutdated ReportedContentClassifiers = "OUTDATED"
	// A duplicated piece of content
	ReportedContentClassifiersDuplicate ReportedContentClassifiers = "DUPLICATE"
	// The content has been resolved
	ReportedContentClassifiersResolved ReportedContentClassifiers = "RESOLVED"
)

var AllReportedContentClassifiers = []ReportedContentClassifiers{
	ReportedContentClassifiersSpam,
	ReportedContentClassifiersAbuse,
	ReportedContentClassifiersOffTopic,
	ReportedContentClassifiersOutdated,
	ReportedContentClassifiersDuplicate,
	ReportedContentClassifiersResolved,
}

func (e ReportedContentClassifiers) IsValid() bool {
	switch e {
	case ReportedContentClassifiersSpam, ReportedContentClassifiersAbuse, ReportedContentClassifiersOffTopic, ReportedContentClassifiersOutdated, ReportedContentClassifiersDuplicate, ReportedContentClassifiersResolved:
		return true
	}
	return false
}

func (e ReportedContentClassifiers) String() string {
	return string(e)
}

func (e *ReportedContentClassifiers) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportedContentClassifiers(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportedContentClassifiers", str)
	}
	return nil
}

func (e ReportedContentClassifiers) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The affiliation of a user to a repository
type RepositoryAffiliation string

const (
	// Repositories that are owned by the authenticated user.
	RepositoryAffiliationOwner RepositoryAffiliation = "OWNER"
	// Repositories that the user has been added to as a collaborator.
	RepositoryAffiliationCollaborator RepositoryAffiliation = "COLLABORATOR"
	// Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
	RepositoryAffiliationOrganizationMember RepositoryAffiliation = "ORGANIZATION_MEMBER"
)

var AllRepositoryAffiliation = []RepositoryAffiliation{
	RepositoryAffiliationOwner,
	RepositoryAffiliationCollaborator,
	RepositoryAffiliationOrganizationMember,
}

func (e RepositoryAffiliation) IsValid() bool {
	switch e {
	case RepositoryAffiliationOwner, RepositoryAffiliationCollaborator, RepositoryAffiliationOrganizationMember:
		return true
	}
	return false
}

func (e RepositoryAffiliation) String() string {
	return string(e)
}

func (e *RepositoryAffiliation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryAffiliation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryAffiliation", str)
	}
	return nil
}

func (e RepositoryAffiliation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The reason a repository is listed as 'contributed'.
type RepositoryContributionType string

const (
	// Created a commit
	RepositoryContributionTypeCommit RepositoryContributionType = "COMMIT"
	// Created an issue
	RepositoryContributionTypeIssue RepositoryContributionType = "ISSUE"
	// Created a pull request
	RepositoryContributionTypePullRequest RepositoryContributionType = "PULL_REQUEST"
	// Created the repository
	RepositoryContributionTypeRepository RepositoryContributionType = "REPOSITORY"
	// Reviewed a pull request
	RepositoryContributionTypePullRequestReview RepositoryContributionType = "PULL_REQUEST_REVIEW"
)

var AllRepositoryContributionType = []RepositoryContributionType{
	RepositoryContributionTypeCommit,
	RepositoryContributionTypeIssue,
	RepositoryContributionTypePullRequest,
	RepositoryContributionTypeRepository,
	RepositoryContributionTypePullRequestReview,
}

func (e RepositoryContributionType) IsValid() bool {
	switch e {
	case RepositoryContributionTypeCommit, RepositoryContributionTypeIssue, RepositoryContributionTypePullRequest, RepositoryContributionTypeRepository, RepositoryContributionTypePullRequestReview:
		return true
	}
	return false
}

func (e RepositoryContributionType) String() string {
	return string(e)
}

func (e *RepositoryContributionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryContributionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryContributionType", str)
	}
	return nil
}

func (e RepositoryContributionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A repository interaction limit.
type RepositoryInteractionLimit string

const (
	// Users that have recently created their account will be unable to interact with the repository.
	RepositoryInteractionLimitExistingUsers RepositoryInteractionLimit = "EXISTING_USERS"
	// Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
	RepositoryInteractionLimitContributorsOnly RepositoryInteractionLimit = "CONTRIBUTORS_ONLY"
	// Users that are not collaborators will not be able to interact with the repository.
	RepositoryInteractionLimitCollaboratorsOnly RepositoryInteractionLimit = "COLLABORATORS_ONLY"
	// No interaction limits are enabled.
	RepositoryInteractionLimitNoLimit RepositoryInteractionLimit = "NO_LIMIT"
)

var AllRepositoryInteractionLimit = []RepositoryInteractionLimit{
	RepositoryInteractionLimitExistingUsers,
	RepositoryInteractionLimitContributorsOnly,
	RepositoryInteractionLimitCollaboratorsOnly,
	RepositoryInteractionLimitNoLimit,
}

func (e RepositoryInteractionLimit) IsValid() bool {
	switch e {
	case RepositoryInteractionLimitExistingUsers, RepositoryInteractionLimitContributorsOnly, RepositoryInteractionLimitCollaboratorsOnly, RepositoryInteractionLimitNoLimit:
		return true
	}
	return false
}

func (e RepositoryInteractionLimit) String() string {
	return string(e)
}

func (e *RepositoryInteractionLimit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryInteractionLimit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryInteractionLimit", str)
	}
	return nil
}

func (e RepositoryInteractionLimit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The length for a repository interaction limit to be enabled for.
type RepositoryInteractionLimitExpiry string

const (
	// The interaction limit will expire after 1 day.
	RepositoryInteractionLimitExpiryOneDay RepositoryInteractionLimitExpiry = "ONE_DAY"
	// The interaction limit will expire after 3 days.
	RepositoryInteractionLimitExpiryThreeDays RepositoryInteractionLimitExpiry = "THREE_DAYS"
	// The interaction limit will expire after 1 week.
	RepositoryInteractionLimitExpiryOneWeek RepositoryInteractionLimitExpiry = "ONE_WEEK"
	// The interaction limit will expire after 1 month.
	RepositoryInteractionLimitExpiryOneMonth RepositoryInteractionLimitExpiry = "ONE_MONTH"
	// The interaction limit will expire after 6 months.
	RepositoryInteractionLimitExpirySixMonths RepositoryInteractionLimitExpiry = "SIX_MONTHS"
)

var AllRepositoryInteractionLimitExpiry = []RepositoryInteractionLimitExpiry{
	RepositoryInteractionLimitExpiryOneDay,
	RepositoryInteractionLimitExpiryThreeDays,
	RepositoryInteractionLimitExpiryOneWeek,
	RepositoryInteractionLimitExpiryOneMonth,
	RepositoryInteractionLimitExpirySixMonths,
}

func (e RepositoryInteractionLimitExpiry) IsValid() bool {
	switch e {
	case RepositoryInteractionLimitExpiryOneDay, RepositoryInteractionLimitExpiryThreeDays, RepositoryInteractionLimitExpiryOneWeek, RepositoryInteractionLimitExpiryOneMonth, RepositoryInteractionLimitExpirySixMonths:
		return true
	}
	return false
}

func (e RepositoryInteractionLimitExpiry) String() string {
	return string(e)
}

func (e *RepositoryInteractionLimitExpiry) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryInteractionLimitExpiry(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryInteractionLimitExpiry", str)
	}
	return nil
}

func (e RepositoryInteractionLimitExpiry) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Indicates where an interaction limit is configured.
type RepositoryInteractionLimitOrigin string

const (
	// A limit that is configured at the repository level.
	RepositoryInteractionLimitOriginRepository RepositoryInteractionLimitOrigin = "REPOSITORY"
	// A limit that is configured at the organization level.
	RepositoryInteractionLimitOriginOrganization RepositoryInteractionLimitOrigin = "ORGANIZATION"
	// A limit that is configured at the user-wide level.
	RepositoryInteractionLimitOriginUser RepositoryInteractionLimitOrigin = "USER"
)

var AllRepositoryInteractionLimitOrigin = []RepositoryInteractionLimitOrigin{
	RepositoryInteractionLimitOriginRepository,
	RepositoryInteractionLimitOriginOrganization,
	RepositoryInteractionLimitOriginUser,
}

func (e RepositoryInteractionLimitOrigin) IsValid() bool {
	switch e {
	case RepositoryInteractionLimitOriginRepository, RepositoryInteractionLimitOriginOrganization, RepositoryInteractionLimitOriginUser:
		return true
	}
	return false
}

func (e RepositoryInteractionLimitOrigin) String() string {
	return string(e)
}

func (e *RepositoryInteractionLimitOrigin) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryInteractionLimitOrigin(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryInteractionLimitOrigin", str)
	}
	return nil
}

func (e RepositoryInteractionLimitOrigin) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which repository invitation connections can be ordered.
type RepositoryInvitationOrderField string

const (
	// Order repository invitations by creation time
	RepositoryInvitationOrderFieldCreatedAt RepositoryInvitationOrderField = "CREATED_AT"
)

var AllRepositoryInvitationOrderField = []RepositoryInvitationOrderField{
	RepositoryInvitationOrderFieldCreatedAt,
}

func (e RepositoryInvitationOrderField) IsValid() bool {
	switch e {
	case RepositoryInvitationOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e RepositoryInvitationOrderField) String() string {
	return string(e)
}

func (e *RepositoryInvitationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryInvitationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryInvitationOrderField", str)
	}
	return nil
}

func (e RepositoryInvitationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible reasons a given repository could be in a locked state.
type RepositoryLockReason string

const (
	// The repository is locked due to a move.
	RepositoryLockReasonMoving RepositoryLockReason = "MOVING"
	// The repository is locked due to a billing related reason.
	RepositoryLockReasonBilling RepositoryLockReason = "BILLING"
	// The repository is locked due to a rename.
	RepositoryLockReasonRename RepositoryLockReason = "RENAME"
	// The repository is locked due to a migration.
	RepositoryLockReasonMigrating RepositoryLockReason = "MIGRATING"
	// The repository is locked due to a trade controls related reason.
	RepositoryLockReasonTradeRestriction RepositoryLockReason = "TRADE_RESTRICTION"
	// The repository is locked due to an ownership transfer.
	RepositoryLockReasonTransferringOwnership RepositoryLockReason = "TRANSFERRING_OWNERSHIP"
)

var AllRepositoryLockReason = []RepositoryLockReason{
	RepositoryLockReasonMoving,
	RepositoryLockReasonBilling,
	RepositoryLockReasonRename,
	RepositoryLockReasonMigrating,
	RepositoryLockReasonTradeRestriction,
	RepositoryLockReasonTransferringOwnership,
}

func (e RepositoryLockReason) IsValid() bool {
	switch e {
	case RepositoryLockReasonMoving, RepositoryLockReasonBilling, RepositoryLockReasonRename, RepositoryLockReasonMigrating, RepositoryLockReasonTradeRestriction, RepositoryLockReasonTransferringOwnership:
		return true
	}
	return false
}

func (e RepositoryLockReason) String() string {
	return string(e)
}

func (e *RepositoryLockReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryLockReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryLockReason", str)
	}
	return nil
}

func (e RepositoryLockReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
type RepositoryMigrationOrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	RepositoryMigrationOrderDirectionAsc RepositoryMigrationOrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	RepositoryMigrationOrderDirectionDesc RepositoryMigrationOrderDirection = "DESC"
)

var AllRepositoryMigrationOrderDirection = []RepositoryMigrationOrderDirection{
	RepositoryMigrationOrderDirectionAsc,
	RepositoryMigrationOrderDirectionDesc,
}

func (e RepositoryMigrationOrderDirection) IsValid() bool {
	switch e {
	case RepositoryMigrationOrderDirectionAsc, RepositoryMigrationOrderDirectionDesc:
		return true
	}
	return false
}

func (e RepositoryMigrationOrderDirection) String() string {
	return string(e)
}

func (e *RepositoryMigrationOrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryMigrationOrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryMigrationOrderDirection", str)
	}
	return nil
}

func (e RepositoryMigrationOrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which repository migrations can be ordered.
type RepositoryMigrationOrderField string

const (
	// Order mannequins why when they were created.
	RepositoryMigrationOrderFieldCreatedAt RepositoryMigrationOrderField = "CREATED_AT"
)

var AllRepositoryMigrationOrderField = []RepositoryMigrationOrderField{
	RepositoryMigrationOrderFieldCreatedAt,
}

func (e RepositoryMigrationOrderField) IsValid() bool {
	switch e {
	case RepositoryMigrationOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e RepositoryMigrationOrderField) String() string {
	return string(e)
}

func (e *RepositoryMigrationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryMigrationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryMigrationOrderField", str)
	}
	return nil
}

func (e RepositoryMigrationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which repository connections can be ordered.
type RepositoryOrderField string

const (
	// Order repositories by creation time
	RepositoryOrderFieldCreatedAt RepositoryOrderField = "CREATED_AT"
	// Order repositories by update time
	RepositoryOrderFieldUpdatedAt RepositoryOrderField = "UPDATED_AT"
	// Order repositories by push time
	RepositoryOrderFieldPushedAt RepositoryOrderField = "PUSHED_AT"
	// Order repositories by name
	RepositoryOrderFieldName RepositoryOrderField = "NAME"
	// Order repositories by number of stargazers
	RepositoryOrderFieldStargazers RepositoryOrderField = "STARGAZERS"
)

var AllRepositoryOrderField = []RepositoryOrderField{
	RepositoryOrderFieldCreatedAt,
	RepositoryOrderFieldUpdatedAt,
	RepositoryOrderFieldPushedAt,
	RepositoryOrderFieldName,
	RepositoryOrderFieldStargazers,
}

func (e RepositoryOrderField) IsValid() bool {
	switch e {
	case RepositoryOrderFieldCreatedAt, RepositoryOrderFieldUpdatedAt, RepositoryOrderFieldPushedAt, RepositoryOrderFieldName, RepositoryOrderFieldStargazers:
		return true
	}
	return false
}

func (e RepositoryOrderField) String() string {
	return string(e)
}

func (e *RepositoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryOrderField", str)
	}
	return nil
}

func (e RepositoryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The access level to a repository
type RepositoryPermission string

const (
	// Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
	RepositoryPermissionAdmin RepositoryPermission = "ADMIN"
	// Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
	RepositoryPermissionMaintain RepositoryPermission = "MAINTAIN"
	// Can read, clone, and push to this repository. Can also manage issues and pull requests
	RepositoryPermissionWrite RepositoryPermission = "WRITE"
	// Can read and clone this repository. Can also manage issues and pull requests
	RepositoryPermissionTriage RepositoryPermission = "TRIAGE"
	// Can read and clone this repository. Can also open and comment on issues and pull requests
	RepositoryPermissionRead RepositoryPermission = "READ"
)

var AllRepositoryPermission = []RepositoryPermission{
	RepositoryPermissionAdmin,
	RepositoryPermissionMaintain,
	RepositoryPermissionWrite,
	RepositoryPermissionTriage,
	RepositoryPermissionRead,
}

func (e RepositoryPermission) IsValid() bool {
	switch e {
	case RepositoryPermissionAdmin, RepositoryPermissionMaintain, RepositoryPermissionWrite, RepositoryPermissionTriage, RepositoryPermissionRead:
		return true
	}
	return false
}

func (e RepositoryPermission) String() string {
	return string(e)
}

func (e *RepositoryPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryPermission", str)
	}
	return nil
}

func (e RepositoryPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a repository
type RepositoryPrivacy string

const (
	// Public
	RepositoryPrivacyPublic RepositoryPrivacy = "PUBLIC"
	// Private
	RepositoryPrivacyPrivate RepositoryPrivacy = "PRIVATE"
)

var AllRepositoryPrivacy = []RepositoryPrivacy{
	RepositoryPrivacyPublic,
	RepositoryPrivacyPrivate,
}

func (e RepositoryPrivacy) IsValid() bool {
	switch e {
	case RepositoryPrivacyPublic, RepositoryPrivacyPrivate:
		return true
	}
	return false
}

func (e RepositoryPrivacy) String() string {
	return string(e)
}

func (e *RepositoryPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryPrivacy", str)
	}
	return nil
}

func (e RepositoryPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The rule types supported in rulesets
type RepositoryRuleType string

const (
	// Only allow users with bypass permission to create matching refs.
	RepositoryRuleTypeCreation RepositoryRuleType = "CREATION"
	// Only allow users with bypass permission to update matching refs.
	RepositoryRuleTypeUpdate RepositoryRuleType = "UPDATE"
	// Only allow users with bypass permissions to delete matching refs.
	RepositoryRuleTypeDeletion RepositoryRuleType = "DELETION"
	// Prevent merge commits from being pushed to matching refs.
	RepositoryRuleTypeRequiredLinearHistory RepositoryRuleType = "REQUIRED_LINEAR_HISTORY"
	// Merges must be performed via a merge queue.
	RepositoryRuleTypeMergeQueue RepositoryRuleType = "MERGE_QUEUE"
	// When enabled, all conversations on code must be resolved before a pull request can be merged into a branch that matches this rule.
	RepositoryRuleTypeRequiredReviewThreadResolution RepositoryRuleType = "REQUIRED_REVIEW_THREAD_RESOLUTION"
	// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
	RepositoryRuleTypeRequiredDeployments RepositoryRuleType = "REQUIRED_DEPLOYMENTS"
	// Commits pushed to matching refs must have verified signatures.
	RepositoryRuleTypeRequiredSignatures RepositoryRuleType = "REQUIRED_SIGNATURES"
	// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
	RepositoryRuleTypePullRequest RepositoryRuleType = "PULL_REQUEST"
	// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
	RepositoryRuleTypeRequiredStatusChecks RepositoryRuleType = "REQUIRED_STATUS_CHECKS"
	// Require all commits be made to a non-target branch and submitted via a pull request and required workflow checks to pass before they can be merged.
	RepositoryRuleTypeRequiredWorkflowStatusChecks RepositoryRuleType = "REQUIRED_WORKFLOW_STATUS_CHECKS"
	// Prevent users with push access from force pushing to refs.
	RepositoryRuleTypeNonFastForward RepositoryRuleType = "NON_FAST_FORWARD"
	// Authorization
	RepositoryRuleTypeAuthorization RepositoryRuleType = "AUTHORIZATION"
	// Tag
	RepositoryRuleTypeTag RepositoryRuleType = "TAG"
	// Merge queue locked ref
	RepositoryRuleTypeMergeQueueLockedRef RepositoryRuleType = "MERGE_QUEUE_LOCKED_REF"
	// Branch is read-only. Users cannot push to the branch.
	RepositoryRuleTypeLockBranch RepositoryRuleType = "LOCK_BRANCH"
	// Max ref updates
	RepositoryRuleTypeMaxRefUpdates RepositoryRuleType = "MAX_REF_UPDATES"
	// Commit message pattern
	RepositoryRuleTypeCommitMessagePattern RepositoryRuleType = "COMMIT_MESSAGE_PATTERN"
	// Commit author email pattern
	RepositoryRuleTypeCommitAuthorEmailPattern RepositoryRuleType = "COMMIT_AUTHOR_EMAIL_PATTERN"
	// Committer email pattern
	RepositoryRuleTypeCommitterEmailPattern RepositoryRuleType = "COMMITTER_EMAIL_PATTERN"
	// Branch name pattern
	RepositoryRuleTypeBranchNamePattern RepositoryRuleType = "BRANCH_NAME_PATTERN"
	// Tag name pattern
	RepositoryRuleTypeTagNamePattern RepositoryRuleType = "TAG_NAME_PATTERN"
	// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
	RepositoryRuleTypeWorkflows RepositoryRuleType = "WORKFLOWS"
	// Commits pushed to matching refs must have verified signatures.
	RepositoryRuleTypeRulesetRequiredSignatures RepositoryRuleType = "RULESET_REQUIRED_SIGNATURES"
	// Secret scanning
	RepositoryRuleTypeSecretScanning RepositoryRuleType = "SECRET_SCANNING"
	// Workflow files cannot be modified.
	RepositoryRuleTypeWorkflowUpdates RepositoryRuleType = "WORKFLOW_UPDATES"
)

var AllRepositoryRuleType = []RepositoryRuleType{
	RepositoryRuleTypeCreation,
	RepositoryRuleTypeUpdate,
	RepositoryRuleTypeDeletion,
	RepositoryRuleTypeRequiredLinearHistory,
	RepositoryRuleTypeMergeQueue,
	RepositoryRuleTypeRequiredReviewThreadResolution,
	RepositoryRuleTypeRequiredDeployments,
	RepositoryRuleTypeRequiredSignatures,
	RepositoryRuleTypePullRequest,
	RepositoryRuleTypeRequiredStatusChecks,
	RepositoryRuleTypeRequiredWorkflowStatusChecks,
	RepositoryRuleTypeNonFastForward,
	RepositoryRuleTypeAuthorization,
	RepositoryRuleTypeTag,
	RepositoryRuleTypeMergeQueueLockedRef,
	RepositoryRuleTypeLockBranch,
	RepositoryRuleTypeMaxRefUpdates,
	RepositoryRuleTypeCommitMessagePattern,
	RepositoryRuleTypeCommitAuthorEmailPattern,
	RepositoryRuleTypeCommitterEmailPattern,
	RepositoryRuleTypeBranchNamePattern,
	RepositoryRuleTypeTagNamePattern,
	RepositoryRuleTypeWorkflows,
	RepositoryRuleTypeRulesetRequiredSignatures,
	RepositoryRuleTypeSecretScanning,
	RepositoryRuleTypeWorkflowUpdates,
}

func (e RepositoryRuleType) IsValid() bool {
	switch e {
	case RepositoryRuleTypeCreation, RepositoryRuleTypeUpdate, RepositoryRuleTypeDeletion, RepositoryRuleTypeRequiredLinearHistory, RepositoryRuleTypeMergeQueue, RepositoryRuleTypeRequiredReviewThreadResolution, RepositoryRuleTypeRequiredDeployments, RepositoryRuleTypeRequiredSignatures, RepositoryRuleTypePullRequest, RepositoryRuleTypeRequiredStatusChecks, RepositoryRuleTypeRequiredWorkflowStatusChecks, RepositoryRuleTypeNonFastForward, RepositoryRuleTypeAuthorization, RepositoryRuleTypeTag, RepositoryRuleTypeMergeQueueLockedRef, RepositoryRuleTypeLockBranch, RepositoryRuleTypeMaxRefUpdates, RepositoryRuleTypeCommitMessagePattern, RepositoryRuleTypeCommitAuthorEmailPattern, RepositoryRuleTypeCommitterEmailPattern, RepositoryRuleTypeBranchNamePattern, RepositoryRuleTypeTagNamePattern, RepositoryRuleTypeWorkflows, RepositoryRuleTypeRulesetRequiredSignatures, RepositoryRuleTypeSecretScanning, RepositoryRuleTypeWorkflowUpdates:
		return true
	}
	return false
}

func (e RepositoryRuleType) String() string {
	return string(e)
}

func (e *RepositoryRuleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryRuleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryRuleType", str)
	}
	return nil
}

func (e RepositoryRuleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The bypass mode for a specific actor on a ruleset.
type RepositoryRulesetBypassActorBypassMode string

const (
	// The actor can always bypass rules
	RepositoryRulesetBypassActorBypassModeAlways RepositoryRulesetBypassActorBypassMode = "ALWAYS"
	// The actor can only bypass rules via a pull request
	RepositoryRulesetBypassActorBypassModePullRequest RepositoryRulesetBypassActorBypassMode = "PULL_REQUEST"
)

var AllRepositoryRulesetBypassActorBypassMode = []RepositoryRulesetBypassActorBypassMode{
	RepositoryRulesetBypassActorBypassModeAlways,
	RepositoryRulesetBypassActorBypassModePullRequest,
}

func (e RepositoryRulesetBypassActorBypassMode) IsValid() bool {
	switch e {
	case RepositoryRulesetBypassActorBypassModeAlways, RepositoryRulesetBypassActorBypassModePullRequest:
		return true
	}
	return false
}

func (e RepositoryRulesetBypassActorBypassMode) String() string {
	return string(e)
}

func (e *RepositoryRulesetBypassActorBypassMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryRulesetBypassActorBypassMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryRulesetBypassActorBypassMode", str)
	}
	return nil
}

func (e RepositoryRulesetBypassActorBypassMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The targets supported for rulesets
type RepositoryRulesetTarget string

const (
	// Branch
	RepositoryRulesetTargetBranch RepositoryRulesetTarget = "BRANCH"
	// Tag
	RepositoryRulesetTargetTag RepositoryRulesetTarget = "TAG"
)

var AllRepositoryRulesetTarget = []RepositoryRulesetTarget{
	RepositoryRulesetTargetBranch,
	RepositoryRulesetTargetTag,
}

func (e RepositoryRulesetTarget) IsValid() bool {
	switch e {
	case RepositoryRulesetTargetBranch, RepositoryRulesetTargetTag:
		return true
	}
	return false
}

func (e RepositoryRulesetTarget) String() string {
	return string(e)
}

func (e *RepositoryRulesetTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryRulesetTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryRulesetTarget", str)
	}
	return nil
}

func (e RepositoryRulesetTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The repository's visibility level.
type RepositoryVisibility string

const (
	// The repository is visible only to those with explicit access.
	RepositoryVisibilityPrivate RepositoryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepositoryVisibilityPublic RepositoryVisibility = "PUBLIC"
	// The repository is visible only to users in the same business.
	RepositoryVisibilityInternal RepositoryVisibility = "INTERNAL"
)

var AllRepositoryVisibility = []RepositoryVisibility{
	RepositoryVisibilityPrivate,
	RepositoryVisibilityPublic,
	RepositoryVisibilityInternal,
}

func (e RepositoryVisibility) IsValid() bool {
	switch e {
	case RepositoryVisibilityPrivate, RepositoryVisibilityPublic, RepositoryVisibilityInternal:
		return true
	}
	return false
}

func (e RepositoryVisibility) String() string {
	return string(e)
}

func (e *RepositoryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryVisibility", str)
	}
	return nil
}

func (e RepositoryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible scopes of an alert's dependency.
type RepositoryVulnerabilityAlertDependencyScope string

const (
	// A dependency that is leveraged during application runtime
	RepositoryVulnerabilityAlertDependencyScopeRuntime RepositoryVulnerabilityAlertDependencyScope = "RUNTIME"
	// A dependency that is only used in development
	RepositoryVulnerabilityAlertDependencyScopeDevelopment RepositoryVulnerabilityAlertDependencyScope = "DEVELOPMENT"
)

var AllRepositoryVulnerabilityAlertDependencyScope = []RepositoryVulnerabilityAlertDependencyScope{
	RepositoryVulnerabilityAlertDependencyScopeRuntime,
	RepositoryVulnerabilityAlertDependencyScopeDevelopment,
}

func (e RepositoryVulnerabilityAlertDependencyScope) IsValid() bool {
	switch e {
	case RepositoryVulnerabilityAlertDependencyScopeRuntime, RepositoryVulnerabilityAlertDependencyScopeDevelopment:
		return true
	}
	return false
}

func (e RepositoryVulnerabilityAlertDependencyScope) String() string {
	return string(e)
}

func (e *RepositoryVulnerabilityAlertDependencyScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryVulnerabilityAlertDependencyScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryVulnerabilityAlertDependencyScope", str)
	}
	return nil
}

func (e RepositoryVulnerabilityAlertDependencyScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of an alert
type RepositoryVulnerabilityAlertState string

const (
	// An alert that is still open.
	RepositoryVulnerabilityAlertStateOpen RepositoryVulnerabilityAlertState = "OPEN"
	// An alert that has been resolved by a code change.
	RepositoryVulnerabilityAlertStateFixed RepositoryVulnerabilityAlertState = "FIXED"
	// An alert that has been manually closed by a user.
	RepositoryVulnerabilityAlertStateDismissed RepositoryVulnerabilityAlertState = "DISMISSED"
	// An alert that has been automatically closed by Dependabot.
	RepositoryVulnerabilityAlertStateAutoDismissed RepositoryVulnerabilityAlertState = "AUTO_DISMISSED"
)

var AllRepositoryVulnerabilityAlertState = []RepositoryVulnerabilityAlertState{
	RepositoryVulnerabilityAlertStateOpen,
	RepositoryVulnerabilityAlertStateFixed,
	RepositoryVulnerabilityAlertStateDismissed,
	RepositoryVulnerabilityAlertStateAutoDismissed,
}

func (e RepositoryVulnerabilityAlertState) IsValid() bool {
	switch e {
	case RepositoryVulnerabilityAlertStateOpen, RepositoryVulnerabilityAlertStateFixed, RepositoryVulnerabilityAlertStateDismissed, RepositoryVulnerabilityAlertStateAutoDismissed:
		return true
	}
	return false
}

func (e RepositoryVulnerabilityAlertState) String() string {
	return string(e)
}

func (e *RepositoryVulnerabilityAlertState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepositoryVulnerabilityAlertState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepositoryVulnerabilityAlertState", str)
	}
	return nil
}

func (e RepositoryVulnerabilityAlertState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states that can be requested when creating a check run.
type RequestableCheckStatusState string

const (
	// The check suite or run has been queued.
	RequestableCheckStatusStateQueued RequestableCheckStatusState = "QUEUED"
	// The check suite or run is in progress.
	RequestableCheckStatusStateInProgress RequestableCheckStatusState = "IN_PROGRESS"
	// The check suite or run has been completed.
	RequestableCheckStatusStateCompleted RequestableCheckStatusState = "COMPLETED"
	// The check suite or run is in waiting state.
	RequestableCheckStatusStateWaiting RequestableCheckStatusState = "WAITING"
	// The check suite or run is in pending state.
	RequestableCheckStatusStatePending RequestableCheckStatusState = "PENDING"
)

var AllRequestableCheckStatusState = []RequestableCheckStatusState{
	RequestableCheckStatusStateQueued,
	RequestableCheckStatusStateInProgress,
	RequestableCheckStatusStateCompleted,
	RequestableCheckStatusStateWaiting,
	RequestableCheckStatusStatePending,
}

func (e RequestableCheckStatusState) IsValid() bool {
	switch e {
	case RequestableCheckStatusStateQueued, RequestableCheckStatusStateInProgress, RequestableCheckStatusStateCompleted, RequestableCheckStatusStateWaiting, RequestableCheckStatusStatePending:
		return true
	}
	return false
}

func (e RequestableCheckStatusState) String() string {
	return string(e)
}

func (e *RequestableCheckStatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestableCheckStatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestableCheckStatusState", str)
	}
	return nil
}

func (e RequestableCheckStatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Possible roles a user may have in relation to an organization.
type RoleInOrganization string

const (
	// A user with full administrative access to the organization.
	RoleInOrganizationOwner RoleInOrganization = "OWNER"
	// A user who is a direct member of the organization.
	RoleInOrganizationDirectMember RoleInOrganization = "DIRECT_MEMBER"
	// A user who is unaffiliated with the organization.
	RoleInOrganizationUnaffiliated RoleInOrganization = "UNAFFILIATED"
)

var AllRoleInOrganization = []RoleInOrganization{
	RoleInOrganizationOwner,
	RoleInOrganizationDirectMember,
	RoleInOrganizationUnaffiliated,
}

func (e RoleInOrganization) IsValid() bool {
	switch e {
	case RoleInOrganizationOwner, RoleInOrganizationDirectMember, RoleInOrganizationUnaffiliated:
		return true
	}
	return false
}

func (e RoleInOrganization) String() string {
	return string(e)
}

func (e *RoleInOrganization) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleInOrganization(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleInOrganization", str)
	}
	return nil
}

func (e RoleInOrganization) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The level of enforcement for a rule or ruleset.
type RuleEnforcement string

const (
	// Do not evaluate or enforce rules
	RuleEnforcementDisabled RuleEnforcement = "DISABLED"
	// Rules will be enforced
	RuleEnforcementActive RuleEnforcement = "ACTIVE"
	// Allow admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
	RuleEnforcementEvaluate RuleEnforcement = "EVALUATE"
)

var AllRuleEnforcement = []RuleEnforcement{
	RuleEnforcementDisabled,
	RuleEnforcementActive,
	RuleEnforcementEvaluate,
}

func (e RuleEnforcement) IsValid() bool {
	switch e {
	case RuleEnforcementDisabled, RuleEnforcementActive, RuleEnforcementEvaluate:
		return true
	}
	return false
}

func (e RuleEnforcement) String() string {
	return string(e)
}

func (e *RuleEnforcement) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RuleEnforcement(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RuleEnforcement", str)
	}
	return nil
}

func (e RuleEnforcement) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible digest algorithms used to sign SAML requests for an identity provider.
type SamlDigestAlgorithm string

const (
	// SHA1
	SamlDigestAlgorithmSha1 SamlDigestAlgorithm = "SHA1"
	// SHA256
	SamlDigestAlgorithmSha256 SamlDigestAlgorithm = "SHA256"
	// SHA384
	SamlDigestAlgorithmSha384 SamlDigestAlgorithm = "SHA384"
	// SHA512
	SamlDigestAlgorithmSha512 SamlDigestAlgorithm = "SHA512"
)

var AllSamlDigestAlgorithm = []SamlDigestAlgorithm{
	SamlDigestAlgorithmSha1,
	SamlDigestAlgorithmSha256,
	SamlDigestAlgorithmSha384,
	SamlDigestAlgorithmSha512,
}

func (e SamlDigestAlgorithm) IsValid() bool {
	switch e {
	case SamlDigestAlgorithmSha1, SamlDigestAlgorithmSha256, SamlDigestAlgorithmSha384, SamlDigestAlgorithmSha512:
		return true
	}
	return false
}

func (e SamlDigestAlgorithm) String() string {
	return string(e)
}

func (e *SamlDigestAlgorithm) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SamlDigestAlgorithm(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SamlDigestAlgorithm", str)
	}
	return nil
}

func (e SamlDigestAlgorithm) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible signature algorithms used to sign SAML requests for a Identity Provider.
type SamlSignatureAlgorithm string

const (
	// RSA-SHA1
	SamlSignatureAlgorithmRsaSha1 SamlSignatureAlgorithm = "RSA_SHA1"
	// RSA-SHA256
	SamlSignatureAlgorithmRsaSha256 SamlSignatureAlgorithm = "RSA_SHA256"
	// RSA-SHA384
	SamlSignatureAlgorithmRsaSha384 SamlSignatureAlgorithm = "RSA_SHA384"
	// RSA-SHA512
	SamlSignatureAlgorithmRsaSha512 SamlSignatureAlgorithm = "RSA_SHA512"
)

var AllSamlSignatureAlgorithm = []SamlSignatureAlgorithm{
	SamlSignatureAlgorithmRsaSha1,
	SamlSignatureAlgorithmRsaSha256,
	SamlSignatureAlgorithmRsaSha384,
	SamlSignatureAlgorithmRsaSha512,
}

func (e SamlSignatureAlgorithm) IsValid() bool {
	switch e {
	case SamlSignatureAlgorithmRsaSha1, SamlSignatureAlgorithmRsaSha256, SamlSignatureAlgorithmRsaSha384, SamlSignatureAlgorithmRsaSha512:
		return true
	}
	return false
}

func (e SamlSignatureAlgorithm) String() string {
	return string(e)
}

func (e *SamlSignatureAlgorithm) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SamlSignatureAlgorithm(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SamlSignatureAlgorithm", str)
	}
	return nil
}

func (e SamlSignatureAlgorithm) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which saved reply connections can be ordered.
type SavedReplyOrderField string

const (
	// Order saved reply by when they were updated.
	SavedReplyOrderFieldUpdatedAt SavedReplyOrderField = "UPDATED_AT"
)

var AllSavedReplyOrderField = []SavedReplyOrderField{
	SavedReplyOrderFieldUpdatedAt,
}

func (e SavedReplyOrderField) IsValid() bool {
	switch e {
	case SavedReplyOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e SavedReplyOrderField) String() string {
	return string(e)
}

func (e *SavedReplyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SavedReplyOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SavedReplyOrderField", str)
	}
	return nil
}

func (e SavedReplyOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the individual results of a search.
type SearchType string

const (
	// Returns results matching issues in repositories.
	SearchTypeIssue SearchType = "ISSUE"
	// Returns results matching repositories.
	SearchTypeRepository SearchType = "REPOSITORY"
	// Returns results matching users and organizations on GitHub.
	SearchTypeUser SearchType = "USER"
	// Returns matching discussions in repositories.
	SearchTypeDiscussion SearchType = "DISCUSSION"
)

var AllSearchType = []SearchType{
	SearchTypeIssue,
	SearchTypeRepository,
	SearchTypeUser,
	SearchTypeDiscussion,
}

func (e SearchType) IsValid() bool {
	switch e {
	case SearchTypeIssue, SearchTypeRepository, SearchTypeUser, SearchTypeDiscussion:
		return true
	}
	return false
}

func (e SearchType) String() string {
	return string(e)
}

func (e *SearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchType", str)
	}
	return nil
}

func (e SearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Classification of the advisory.
type SecurityAdvisoryClassification string

const (
	// Classification of general advisories.
	SecurityAdvisoryClassificationGeneral SecurityAdvisoryClassification = "GENERAL"
	// Classification of malware advisories.
	SecurityAdvisoryClassificationMalware SecurityAdvisoryClassification = "MALWARE"
)

var AllSecurityAdvisoryClassification = []SecurityAdvisoryClassification{
	SecurityAdvisoryClassificationGeneral,
	SecurityAdvisoryClassificationMalware,
}

func (e SecurityAdvisoryClassification) IsValid() bool {
	switch e {
	case SecurityAdvisoryClassificationGeneral, SecurityAdvisoryClassificationMalware:
		return true
	}
	return false
}

func (e SecurityAdvisoryClassification) String() string {
	return string(e)
}

func (e *SecurityAdvisoryClassification) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityAdvisoryClassification(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityAdvisoryClassification", str)
	}
	return nil
}

func (e SecurityAdvisoryClassification) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible ecosystems of a security vulnerability's package.
type SecurityAdvisoryEcosystem string

const (
	// PHP packages hosted at packagist.org
	SecurityAdvisoryEcosystemComposer SecurityAdvisoryEcosystem = "COMPOSER"
	// Erlang/Elixir packages hosted at hex.pm
	SecurityAdvisoryEcosystemErlang SecurityAdvisoryEcosystem = "ERLANG"
	// GitHub Actions
	SecurityAdvisoryEcosystemActions SecurityAdvisoryEcosystem = "ACTIONS"
	// Go modules
	SecurityAdvisoryEcosystemGo SecurityAdvisoryEcosystem = "GO"
	// Java artifacts hosted at the Maven central repository
	SecurityAdvisoryEcosystemMaven SecurityAdvisoryEcosystem = "MAVEN"
	// JavaScript packages hosted at npmjs.com
	SecurityAdvisoryEcosystemNpm SecurityAdvisoryEcosystem = "NPM"
	// .NET packages hosted at the NuGet Gallery
	SecurityAdvisoryEcosystemNuget SecurityAdvisoryEcosystem = "NUGET"
	// Python packages hosted at PyPI.org
	SecurityAdvisoryEcosystemPip SecurityAdvisoryEcosystem = "PIP"
	// Dart packages hosted at pub.dev
	SecurityAdvisoryEcosystemPub SecurityAdvisoryEcosystem = "PUB"
	// Ruby gems hosted at RubyGems.org
	SecurityAdvisoryEcosystemRubygems SecurityAdvisoryEcosystem = "RUBYGEMS"
	// Rust crates
	SecurityAdvisoryEcosystemRust SecurityAdvisoryEcosystem = "RUST"
	// Swift packages
	SecurityAdvisoryEcosystemSwift SecurityAdvisoryEcosystem = "SWIFT"
)

var AllSecurityAdvisoryEcosystem = []SecurityAdvisoryEcosystem{
	SecurityAdvisoryEcosystemComposer,
	SecurityAdvisoryEcosystemErlang,
	SecurityAdvisoryEcosystemActions,
	SecurityAdvisoryEcosystemGo,
	SecurityAdvisoryEcosystemMaven,
	SecurityAdvisoryEcosystemNpm,
	SecurityAdvisoryEcosystemNuget,
	SecurityAdvisoryEcosystemPip,
	SecurityAdvisoryEcosystemPub,
	SecurityAdvisoryEcosystemRubygems,
	SecurityAdvisoryEcosystemRust,
	SecurityAdvisoryEcosystemSwift,
}

func (e SecurityAdvisoryEcosystem) IsValid() bool {
	switch e {
	case SecurityAdvisoryEcosystemComposer, SecurityAdvisoryEcosystemErlang, SecurityAdvisoryEcosystemActions, SecurityAdvisoryEcosystemGo, SecurityAdvisoryEcosystemMaven, SecurityAdvisoryEcosystemNpm, SecurityAdvisoryEcosystemNuget, SecurityAdvisoryEcosystemPip, SecurityAdvisoryEcosystemPub, SecurityAdvisoryEcosystemRubygems, SecurityAdvisoryEcosystemRust, SecurityAdvisoryEcosystemSwift:
		return true
	}
	return false
}

func (e SecurityAdvisoryEcosystem) String() string {
	return string(e)
}

func (e *SecurityAdvisoryEcosystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityAdvisoryEcosystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityAdvisoryEcosystem", str)
	}
	return nil
}

func (e SecurityAdvisoryEcosystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Identifier formats available for advisories.
type SecurityAdvisoryIdentifierType string

const (
	// Common Vulnerabilities and Exposures Identifier.
	SecurityAdvisoryIdentifierTypeCve SecurityAdvisoryIdentifierType = "CVE"
	// GitHub Security Advisory ID.
	SecurityAdvisoryIdentifierTypeGhsa SecurityAdvisoryIdentifierType = "GHSA"
)

var AllSecurityAdvisoryIdentifierType = []SecurityAdvisoryIdentifierType{
	SecurityAdvisoryIdentifierTypeCve,
	SecurityAdvisoryIdentifierTypeGhsa,
}

func (e SecurityAdvisoryIdentifierType) IsValid() bool {
	switch e {
	case SecurityAdvisoryIdentifierTypeCve, SecurityAdvisoryIdentifierTypeGhsa:
		return true
	}
	return false
}

func (e SecurityAdvisoryIdentifierType) String() string {
	return string(e)
}

func (e *SecurityAdvisoryIdentifierType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityAdvisoryIdentifierType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityAdvisoryIdentifierType", str)
	}
	return nil
}

func (e SecurityAdvisoryIdentifierType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which security advisory connections can be ordered.
type SecurityAdvisoryOrderField string

const (
	// Order advisories by publication time
	SecurityAdvisoryOrderFieldPublishedAt SecurityAdvisoryOrderField = "PUBLISHED_AT"
	// Order advisories by update time
	SecurityAdvisoryOrderFieldUpdatedAt SecurityAdvisoryOrderField = "UPDATED_AT"
)

var AllSecurityAdvisoryOrderField = []SecurityAdvisoryOrderField{
	SecurityAdvisoryOrderFieldPublishedAt,
	SecurityAdvisoryOrderFieldUpdatedAt,
}

func (e SecurityAdvisoryOrderField) IsValid() bool {
	switch e {
	case SecurityAdvisoryOrderFieldPublishedAt, SecurityAdvisoryOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e SecurityAdvisoryOrderField) String() string {
	return string(e)
}

func (e *SecurityAdvisoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityAdvisoryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityAdvisoryOrderField", str)
	}
	return nil
}

func (e SecurityAdvisoryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Severity of the vulnerability.
type SecurityAdvisorySeverity string

const (
	// Low.
	SecurityAdvisorySeverityLow SecurityAdvisorySeverity = "LOW"
	// Moderate.
	SecurityAdvisorySeverityModerate SecurityAdvisorySeverity = "MODERATE"
	// High.
	SecurityAdvisorySeverityHigh SecurityAdvisorySeverity = "HIGH"
	// Critical.
	SecurityAdvisorySeverityCritical SecurityAdvisorySeverity = "CRITICAL"
)

var AllSecurityAdvisorySeverity = []SecurityAdvisorySeverity{
	SecurityAdvisorySeverityLow,
	SecurityAdvisorySeverityModerate,
	SecurityAdvisorySeverityHigh,
	SecurityAdvisorySeverityCritical,
}

func (e SecurityAdvisorySeverity) IsValid() bool {
	switch e {
	case SecurityAdvisorySeverityLow, SecurityAdvisorySeverityModerate, SecurityAdvisorySeverityHigh, SecurityAdvisorySeverityCritical:
		return true
	}
	return false
}

func (e SecurityAdvisorySeverity) String() string {
	return string(e)
}

func (e *SecurityAdvisorySeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityAdvisorySeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityAdvisorySeverity", str)
	}
	return nil
}

func (e SecurityAdvisorySeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which security vulnerability connections can be ordered.
type SecurityVulnerabilityOrderField string

const (
	// Order vulnerability by update time
	SecurityVulnerabilityOrderFieldUpdatedAt SecurityVulnerabilityOrderField = "UPDATED_AT"
)

var AllSecurityVulnerabilityOrderField = []SecurityVulnerabilityOrderField{
	SecurityVulnerabilityOrderFieldUpdatedAt,
}

func (e SecurityVulnerabilityOrderField) IsValid() bool {
	switch e {
	case SecurityVulnerabilityOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e SecurityVulnerabilityOrderField) String() string {
	return string(e)
}

func (e *SecurityVulnerabilityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecurityVulnerabilityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecurityVulnerabilityOrderField", str)
	}
	return nil
}

func (e SecurityVulnerabilityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Software or company that hosts social media accounts.
type SocialAccountProvider string

const (
	// Catch-all for social media providers that do not yet have specific handling.
	SocialAccountProviderGeneric SocialAccountProvider = "GENERIC"
	// Social media and networking website.
	SocialAccountProviderFacebook SocialAccountProvider = "FACEBOOK"
	// Fork of Mastodon with a greater focus on local posting.
	SocialAccountProviderHometown SocialAccountProvider = "HOMETOWN"
	// Social media website with a focus on photo and video sharing.
	SocialAccountProviderInstagram SocialAccountProvider = "INSTAGRAM"
	// Professional networking website.
	SocialAccountProviderLinkedin SocialAccountProvider = "LINKEDIN"
	// Open-source federated microblogging service.
	SocialAccountProviderMastodon SocialAccountProvider = "MASTODON"
	// Social news aggregation and discussion website.
	SocialAccountProviderReddit SocialAccountProvider = "REDDIT"
	// Live-streaming service.
	SocialAccountProviderTwitch SocialAccountProvider = "TWITCH"
	// Microblogging website.
	SocialAccountProviderTwitter SocialAccountProvider = "TWITTER"
	// Online video platform.
	SocialAccountProviderYoutube SocialAccountProvider = "YOUTUBE"
	// JavaScript package registry.
	SocialAccountProviderNpm SocialAccountProvider = "NPM"
)

var AllSocialAccountProvider = []SocialAccountProvider{
	SocialAccountProviderGeneric,
	SocialAccountProviderFacebook,
	SocialAccountProviderHometown,
	SocialAccountProviderInstagram,
	SocialAccountProviderLinkedin,
	SocialAccountProviderMastodon,
	SocialAccountProviderReddit,
	SocialAccountProviderTwitch,
	SocialAccountProviderTwitter,
	SocialAccountProviderYoutube,
	SocialAccountProviderNpm,
}

func (e SocialAccountProvider) IsValid() bool {
	switch e {
	case SocialAccountProviderGeneric, SocialAccountProviderFacebook, SocialAccountProviderHometown, SocialAccountProviderInstagram, SocialAccountProviderLinkedin, SocialAccountProviderMastodon, SocialAccountProviderReddit, SocialAccountProviderTwitch, SocialAccountProviderTwitter, SocialAccountProviderYoutube, SocialAccountProviderNpm:
		return true
	}
	return false
}

func (e SocialAccountProvider) String() string {
	return string(e)
}

func (e *SocialAccountProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SocialAccountProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SocialAccountProvider", str)
	}
	return nil
}

func (e SocialAccountProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which sponsor connections can be ordered.
type SponsorOrderField string

const (
	// Order sponsorable entities by login (username).
	SponsorOrderFieldLogin SponsorOrderField = "LOGIN"
	// Order sponsors by their relevance to the viewer.
	SponsorOrderFieldRelevance SponsorOrderField = "RELEVANCE"
)

var AllSponsorOrderField = []SponsorOrderField{
	SponsorOrderFieldLogin,
	SponsorOrderFieldRelevance,
}

func (e SponsorOrderField) IsValid() bool {
	switch e {
	case SponsorOrderFieldLogin, SponsorOrderFieldRelevance:
		return true
	}
	return false
}

func (e SponsorOrderField) String() string {
	return string(e)
}

func (e *SponsorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorOrderField", str)
	}
	return nil
}

func (e SponsorOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which sponsorable connections can be ordered.
type SponsorableOrderField string

const (
	// Order sponsorable entities by login (username).
	SponsorableOrderFieldLogin SponsorableOrderField = "LOGIN"
)

var AllSponsorableOrderField = []SponsorableOrderField{
	SponsorableOrderFieldLogin,
}

func (e SponsorableOrderField) IsValid() bool {
	switch e {
	case SponsorableOrderFieldLogin:
		return true
	}
	return false
}

func (e SponsorableOrderField) String() string {
	return string(e)
}

func (e *SponsorableOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorableOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorableOrderField", str)
	}
	return nil
}

func (e SponsorableOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible actions that GitHub Sponsors activities can represent.
type SponsorsActivityAction string

const (
	// The activity was starting a sponsorship.
	SponsorsActivityActionNewSponsorship SponsorsActivityAction = "NEW_SPONSORSHIP"
	// The activity was cancelling a sponsorship.
	SponsorsActivityActionCancelledSponsorship SponsorsActivityAction = "CANCELLED_SPONSORSHIP"
	// The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
	SponsorsActivityActionTierChange SponsorsActivityAction = "TIER_CHANGE"
	// The activity was funds being refunded to the sponsor or GitHub.
	SponsorsActivityActionRefund SponsorsActivityAction = "REFUND"
	// The activity was scheduling a downgrade or cancellation.
	SponsorsActivityActionPendingChange SponsorsActivityAction = "PENDING_CHANGE"
	// The activity was disabling matching for a previously matched sponsorship.
	SponsorsActivityActionSponsorMatchDisabled SponsorsActivityAction = "SPONSOR_MATCH_DISABLED"
)

var AllSponsorsActivityAction = []SponsorsActivityAction{
	SponsorsActivityActionNewSponsorship,
	SponsorsActivityActionCancelledSponsorship,
	SponsorsActivityActionTierChange,
	SponsorsActivityActionRefund,
	SponsorsActivityActionPendingChange,
	SponsorsActivityActionSponsorMatchDisabled,
}

func (e SponsorsActivityAction) IsValid() bool {
	switch e {
	case SponsorsActivityActionNewSponsorship, SponsorsActivityActionCancelledSponsorship, SponsorsActivityActionTierChange, SponsorsActivityActionRefund, SponsorsActivityActionPendingChange, SponsorsActivityActionSponsorMatchDisabled:
		return true
	}
	return false
}

func (e SponsorsActivityAction) String() string {
	return string(e)
}

func (e *SponsorsActivityAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsActivityAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsActivityAction", str)
	}
	return nil
}

func (e SponsorsActivityAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which GitHub Sponsors activity connections can be ordered.
type SponsorsActivityOrderField string

const (
	// Order activities by when they happened.
	SponsorsActivityOrderFieldTimestamp SponsorsActivityOrderField = "TIMESTAMP"
)

var AllSponsorsActivityOrderField = []SponsorsActivityOrderField{
	SponsorsActivityOrderFieldTimestamp,
}

func (e SponsorsActivityOrderField) IsValid() bool {
	switch e {
	case SponsorsActivityOrderFieldTimestamp:
		return true
	}
	return false
}

func (e SponsorsActivityOrderField) String() string {
	return string(e)
}

func (e *SponsorsActivityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsActivityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsActivityOrderField", str)
	}
	return nil
}

func (e SponsorsActivityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible time periods for which Sponsors activities can be requested.
type SponsorsActivityPeriod string

const (
	// The previous calendar day.
	SponsorsActivityPeriodDay SponsorsActivityPeriod = "DAY"
	// The previous seven days.
	SponsorsActivityPeriodWeek SponsorsActivityPeriod = "WEEK"
	// The previous thirty days.
	SponsorsActivityPeriodMonth SponsorsActivityPeriod = "MONTH"
	// Don't restrict the activity to any date range, include all activity.
	SponsorsActivityPeriodAll SponsorsActivityPeriod = "ALL"
)

var AllSponsorsActivityPeriod = []SponsorsActivityPeriod{
	SponsorsActivityPeriodDay,
	SponsorsActivityPeriodWeek,
	SponsorsActivityPeriodMonth,
	SponsorsActivityPeriodAll,
}

func (e SponsorsActivityPeriod) IsValid() bool {
	switch e {
	case SponsorsActivityPeriodDay, SponsorsActivityPeriodWeek, SponsorsActivityPeriodMonth, SponsorsActivityPeriodAll:
		return true
	}
	return false
}

func (e SponsorsActivityPeriod) String() string {
	return string(e)
}

func (e *SponsorsActivityPeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsActivityPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsActivityPeriod", str)
	}
	return nil
}

func (e SponsorsActivityPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents countries or regions for billing and residence for a GitHub Sponsors profile.
type SponsorsCountryOrRegionCode string

const (
	// Afghanistan
	SponsorsCountryOrRegionCodeAf SponsorsCountryOrRegionCode = "AF"
	// Åland
	SponsorsCountryOrRegionCodeAx SponsorsCountryOrRegionCode = "AX"
	// Albania
	SponsorsCountryOrRegionCodeAl SponsorsCountryOrRegionCode = "AL"
	// Algeria
	SponsorsCountryOrRegionCodeDz SponsorsCountryOrRegionCode = "DZ"
	// American Samoa
	SponsorsCountryOrRegionCodeAs SponsorsCountryOrRegionCode = "AS"
	// Andorra
	SponsorsCountryOrRegionCodeAd SponsorsCountryOrRegionCode = "AD"
	// Angola
	SponsorsCountryOrRegionCodeAo SponsorsCountryOrRegionCode = "AO"
	// Anguilla
	SponsorsCountryOrRegionCodeAi SponsorsCountryOrRegionCode = "AI"
	// Antarctica
	SponsorsCountryOrRegionCodeAq SponsorsCountryOrRegionCode = "AQ"
	// Antigua and Barbuda
	SponsorsCountryOrRegionCodeAg SponsorsCountryOrRegionCode = "AG"
	// Argentina
	SponsorsCountryOrRegionCodeAr SponsorsCountryOrRegionCode = "AR"
	// Armenia
	SponsorsCountryOrRegionCodeAm SponsorsCountryOrRegionCode = "AM"
	// Aruba
	SponsorsCountryOrRegionCodeAw SponsorsCountryOrRegionCode = "AW"
	// Australia
	SponsorsCountryOrRegionCodeAu SponsorsCountryOrRegionCode = "AU"
	// Austria
	SponsorsCountryOrRegionCodeAt SponsorsCountryOrRegionCode = "AT"
	// Azerbaijan
	SponsorsCountryOrRegionCodeAz SponsorsCountryOrRegionCode = "AZ"
	// Bahamas
	SponsorsCountryOrRegionCodeBs SponsorsCountryOrRegionCode = "BS"
	// Bahrain
	SponsorsCountryOrRegionCodeBh SponsorsCountryOrRegionCode = "BH"
	// Bangladesh
	SponsorsCountryOrRegionCodeBd SponsorsCountryOrRegionCode = "BD"
	// Barbados
	SponsorsCountryOrRegionCodeBb SponsorsCountryOrRegionCode = "BB"
	// Belarus
	SponsorsCountryOrRegionCodeBy SponsorsCountryOrRegionCode = "BY"
	// Belgium
	SponsorsCountryOrRegionCodeBe SponsorsCountryOrRegionCode = "BE"
	// Belize
	SponsorsCountryOrRegionCodeBz SponsorsCountryOrRegionCode = "BZ"
	// Benin
	SponsorsCountryOrRegionCodeBj SponsorsCountryOrRegionCode = "BJ"
	// Bermuda
	SponsorsCountryOrRegionCodeBm SponsorsCountryOrRegionCode = "BM"
	// Bhutan
	SponsorsCountryOrRegionCodeBt SponsorsCountryOrRegionCode = "BT"
	// Bolivia
	SponsorsCountryOrRegionCodeBo SponsorsCountryOrRegionCode = "BO"
	// Bonaire, Sint Eustatius and Saba
	SponsorsCountryOrRegionCodeBq SponsorsCountryOrRegionCode = "BQ"
	// Bosnia and Herzegovina
	SponsorsCountryOrRegionCodeBa SponsorsCountryOrRegionCode = "BA"
	// Botswana
	SponsorsCountryOrRegionCodeBw SponsorsCountryOrRegionCode = "BW"
	// Bouvet Island
	SponsorsCountryOrRegionCodeBv SponsorsCountryOrRegionCode = "BV"
	// Brazil
	SponsorsCountryOrRegionCodeBr SponsorsCountryOrRegionCode = "BR"
	// British Indian Ocean Territory
	SponsorsCountryOrRegionCodeIo SponsorsCountryOrRegionCode = "IO"
	// Brunei Darussalam
	SponsorsCountryOrRegionCodeBn SponsorsCountryOrRegionCode = "BN"
	// Bulgaria
	SponsorsCountryOrRegionCodeBg SponsorsCountryOrRegionCode = "BG"
	// Burkina Faso
	SponsorsCountryOrRegionCodeBf SponsorsCountryOrRegionCode = "BF"
	// Burundi
	SponsorsCountryOrRegionCodeBi SponsorsCountryOrRegionCode = "BI"
	// Cambodia
	SponsorsCountryOrRegionCodeKh SponsorsCountryOrRegionCode = "KH"
	// Cameroon
	SponsorsCountryOrRegionCodeCm SponsorsCountryOrRegionCode = "CM"
	// Canada
	SponsorsCountryOrRegionCodeCa SponsorsCountryOrRegionCode = "CA"
	// Cape Verde
	SponsorsCountryOrRegionCodeCv SponsorsCountryOrRegionCode = "CV"
	// Cayman Islands
	SponsorsCountryOrRegionCodeKy SponsorsCountryOrRegionCode = "KY"
	// Central African Republic
	SponsorsCountryOrRegionCodeCf SponsorsCountryOrRegionCode = "CF"
	// Chad
	SponsorsCountryOrRegionCodeTd SponsorsCountryOrRegionCode = "TD"
	// Chile
	SponsorsCountryOrRegionCodeCl SponsorsCountryOrRegionCode = "CL"
	// China
	SponsorsCountryOrRegionCodeCn SponsorsCountryOrRegionCode = "CN"
	// Christmas Island
	SponsorsCountryOrRegionCodeCx SponsorsCountryOrRegionCode = "CX"
	// Cocos (Keeling) Islands
	SponsorsCountryOrRegionCodeCc SponsorsCountryOrRegionCode = "CC"
	// Colombia
	SponsorsCountryOrRegionCodeCo SponsorsCountryOrRegionCode = "CO"
	// Comoros
	SponsorsCountryOrRegionCodeKm SponsorsCountryOrRegionCode = "KM"
	// Congo (Brazzaville)
	SponsorsCountryOrRegionCodeCg SponsorsCountryOrRegionCode = "CG"
	// Congo (Kinshasa)
	SponsorsCountryOrRegionCodeCd SponsorsCountryOrRegionCode = "CD"
	// Cook Islands
	SponsorsCountryOrRegionCodeCk SponsorsCountryOrRegionCode = "CK"
	// Costa Rica
	SponsorsCountryOrRegionCodeCr SponsorsCountryOrRegionCode = "CR"
	// Côte d'Ivoire
	SponsorsCountryOrRegionCodeCi SponsorsCountryOrRegionCode = "CI"
	// Croatia
	SponsorsCountryOrRegionCodeHr SponsorsCountryOrRegionCode = "HR"
	// Curaçao
	SponsorsCountryOrRegionCodeCw SponsorsCountryOrRegionCode = "CW"
	// Cyprus
	SponsorsCountryOrRegionCodeCy SponsorsCountryOrRegionCode = "CY"
	// Czech Republic
	SponsorsCountryOrRegionCodeCz SponsorsCountryOrRegionCode = "CZ"
	// Denmark
	SponsorsCountryOrRegionCodeDk SponsorsCountryOrRegionCode = "DK"
	// Djibouti
	SponsorsCountryOrRegionCodeDj SponsorsCountryOrRegionCode = "DJ"
	// Dominica
	SponsorsCountryOrRegionCodeDm SponsorsCountryOrRegionCode = "DM"
	// Dominican Republic
	SponsorsCountryOrRegionCodeDo SponsorsCountryOrRegionCode = "DO"
	// Ecuador
	SponsorsCountryOrRegionCodeEc SponsorsCountryOrRegionCode = "EC"
	// Egypt
	SponsorsCountryOrRegionCodeEg SponsorsCountryOrRegionCode = "EG"
	// El Salvador
	SponsorsCountryOrRegionCodeSv SponsorsCountryOrRegionCode = "SV"
	// Equatorial Guinea
	SponsorsCountryOrRegionCodeGq SponsorsCountryOrRegionCode = "GQ"
	// Eritrea
	SponsorsCountryOrRegionCodeEr SponsorsCountryOrRegionCode = "ER"
	// Estonia
	SponsorsCountryOrRegionCodeEe SponsorsCountryOrRegionCode = "EE"
	// Ethiopia
	SponsorsCountryOrRegionCodeEt SponsorsCountryOrRegionCode = "ET"
	// Falkland Islands
	SponsorsCountryOrRegionCodeFk SponsorsCountryOrRegionCode = "FK"
	// Faroe Islands
	SponsorsCountryOrRegionCodeFo SponsorsCountryOrRegionCode = "FO"
	// Fiji
	SponsorsCountryOrRegionCodeFj SponsorsCountryOrRegionCode = "FJ"
	// Finland
	SponsorsCountryOrRegionCodeFi SponsorsCountryOrRegionCode = "FI"
	// France
	SponsorsCountryOrRegionCodeFr SponsorsCountryOrRegionCode = "FR"
	// French Guiana
	SponsorsCountryOrRegionCodeGf SponsorsCountryOrRegionCode = "GF"
	// French Polynesia
	SponsorsCountryOrRegionCodePf SponsorsCountryOrRegionCode = "PF"
	// French Southern Lands
	SponsorsCountryOrRegionCodeTf SponsorsCountryOrRegionCode = "TF"
	// Gabon
	SponsorsCountryOrRegionCodeGa SponsorsCountryOrRegionCode = "GA"
	// Gambia
	SponsorsCountryOrRegionCodeGm SponsorsCountryOrRegionCode = "GM"
	// Georgia
	SponsorsCountryOrRegionCodeGe SponsorsCountryOrRegionCode = "GE"
	// Germany
	SponsorsCountryOrRegionCodeDe SponsorsCountryOrRegionCode = "DE"
	// Ghana
	SponsorsCountryOrRegionCodeGh SponsorsCountryOrRegionCode = "GH"
	// Gibraltar
	SponsorsCountryOrRegionCodeGi SponsorsCountryOrRegionCode = "GI"
	// Greece
	SponsorsCountryOrRegionCodeGr SponsorsCountryOrRegionCode = "GR"
	// Greenland
	SponsorsCountryOrRegionCodeGl SponsorsCountryOrRegionCode = "GL"
	// Grenada
	SponsorsCountryOrRegionCodeGd SponsorsCountryOrRegionCode = "GD"
	// Guadeloupe
	SponsorsCountryOrRegionCodeGp SponsorsCountryOrRegionCode = "GP"
	// Guam
	SponsorsCountryOrRegionCodeGu SponsorsCountryOrRegionCode = "GU"
	// Guatemala
	SponsorsCountryOrRegionCodeGt SponsorsCountryOrRegionCode = "GT"
	// Guernsey
	SponsorsCountryOrRegionCodeGg SponsorsCountryOrRegionCode = "GG"
	// Guinea
	SponsorsCountryOrRegionCodeGn SponsorsCountryOrRegionCode = "GN"
	// Guinea-Bissau
	SponsorsCountryOrRegionCodeGw SponsorsCountryOrRegionCode = "GW"
	// Guyana
	SponsorsCountryOrRegionCodeGy SponsorsCountryOrRegionCode = "GY"
	// Haiti
	SponsorsCountryOrRegionCodeHt SponsorsCountryOrRegionCode = "HT"
	// Heard and McDonald Islands
	SponsorsCountryOrRegionCodeHm SponsorsCountryOrRegionCode = "HM"
	// Honduras
	SponsorsCountryOrRegionCodeHn SponsorsCountryOrRegionCode = "HN"
	// Hong Kong
	SponsorsCountryOrRegionCodeHk SponsorsCountryOrRegionCode = "HK"
	// Hungary
	SponsorsCountryOrRegionCodeHu SponsorsCountryOrRegionCode = "HU"
	// Iceland
	SponsorsCountryOrRegionCodeIs SponsorsCountryOrRegionCode = "IS"
	// India
	SponsorsCountryOrRegionCodeIn SponsorsCountryOrRegionCode = "IN"
	// Indonesia
	SponsorsCountryOrRegionCodeID SponsorsCountryOrRegionCode = "ID"
	// Iran
	SponsorsCountryOrRegionCodeIr SponsorsCountryOrRegionCode = "IR"
	// Iraq
	SponsorsCountryOrRegionCodeIq SponsorsCountryOrRegionCode = "IQ"
	// Ireland
	SponsorsCountryOrRegionCodeIe SponsorsCountryOrRegionCode = "IE"
	// Isle of Man
	SponsorsCountryOrRegionCodeIm SponsorsCountryOrRegionCode = "IM"
	// Israel
	SponsorsCountryOrRegionCodeIl SponsorsCountryOrRegionCode = "IL"
	// Italy
	SponsorsCountryOrRegionCodeIt SponsorsCountryOrRegionCode = "IT"
	// Jamaica
	SponsorsCountryOrRegionCodeJm SponsorsCountryOrRegionCode = "JM"
	// Japan
	SponsorsCountryOrRegionCodeJp SponsorsCountryOrRegionCode = "JP"
	// Jersey
	SponsorsCountryOrRegionCodeJe SponsorsCountryOrRegionCode = "JE"
	// Jordan
	SponsorsCountryOrRegionCodeJo SponsorsCountryOrRegionCode = "JO"
	// Kazakhstan
	SponsorsCountryOrRegionCodeKz SponsorsCountryOrRegionCode = "KZ"
	// Kenya
	SponsorsCountryOrRegionCodeKe SponsorsCountryOrRegionCode = "KE"
	// Kiribati
	SponsorsCountryOrRegionCodeKi SponsorsCountryOrRegionCode = "KI"
	// Korea, South
	SponsorsCountryOrRegionCodeKr SponsorsCountryOrRegionCode = "KR"
	// Kuwait
	SponsorsCountryOrRegionCodeKw SponsorsCountryOrRegionCode = "KW"
	// Kyrgyzstan
	SponsorsCountryOrRegionCodeKg SponsorsCountryOrRegionCode = "KG"
	// Laos
	SponsorsCountryOrRegionCodeLa SponsorsCountryOrRegionCode = "LA"
	// Latvia
	SponsorsCountryOrRegionCodeLv SponsorsCountryOrRegionCode = "LV"
	// Lebanon
	SponsorsCountryOrRegionCodeLb SponsorsCountryOrRegionCode = "LB"
	// Lesotho
	SponsorsCountryOrRegionCodeLs SponsorsCountryOrRegionCode = "LS"
	// Liberia
	SponsorsCountryOrRegionCodeLr SponsorsCountryOrRegionCode = "LR"
	// Libya
	SponsorsCountryOrRegionCodeLy SponsorsCountryOrRegionCode = "LY"
	// Liechtenstein
	SponsorsCountryOrRegionCodeLi SponsorsCountryOrRegionCode = "LI"
	// Lithuania
	SponsorsCountryOrRegionCodeLt SponsorsCountryOrRegionCode = "LT"
	// Luxembourg
	SponsorsCountryOrRegionCodeLu SponsorsCountryOrRegionCode = "LU"
	// Macau
	SponsorsCountryOrRegionCodeMo SponsorsCountryOrRegionCode = "MO"
	// Macedonia
	SponsorsCountryOrRegionCodeMk SponsorsCountryOrRegionCode = "MK"
	// Madagascar
	SponsorsCountryOrRegionCodeMg SponsorsCountryOrRegionCode = "MG"
	// Malawi
	SponsorsCountryOrRegionCodeMw SponsorsCountryOrRegionCode = "MW"
	// Malaysia
	SponsorsCountryOrRegionCodeMy SponsorsCountryOrRegionCode = "MY"
	// Maldives
	SponsorsCountryOrRegionCodeMv SponsorsCountryOrRegionCode = "MV"
	// Mali
	SponsorsCountryOrRegionCodeMl SponsorsCountryOrRegionCode = "ML"
	// Malta
	SponsorsCountryOrRegionCodeMt SponsorsCountryOrRegionCode = "MT"
	// Marshall Islands
	SponsorsCountryOrRegionCodeMh SponsorsCountryOrRegionCode = "MH"
	// Martinique
	SponsorsCountryOrRegionCodeMq SponsorsCountryOrRegionCode = "MQ"
	// Mauritania
	SponsorsCountryOrRegionCodeMr SponsorsCountryOrRegionCode = "MR"
	// Mauritius
	SponsorsCountryOrRegionCodeMu SponsorsCountryOrRegionCode = "MU"
	// Mayotte
	SponsorsCountryOrRegionCodeYt SponsorsCountryOrRegionCode = "YT"
	// Mexico
	SponsorsCountryOrRegionCodeMx SponsorsCountryOrRegionCode = "MX"
	// Micronesia
	SponsorsCountryOrRegionCodeFm SponsorsCountryOrRegionCode = "FM"
	// Moldova
	SponsorsCountryOrRegionCodeMd SponsorsCountryOrRegionCode = "MD"
	// Monaco
	SponsorsCountryOrRegionCodeMc SponsorsCountryOrRegionCode = "MC"
	// Mongolia
	SponsorsCountryOrRegionCodeMn SponsorsCountryOrRegionCode = "MN"
	// Montenegro
	SponsorsCountryOrRegionCodeMe SponsorsCountryOrRegionCode = "ME"
	// Montserrat
	SponsorsCountryOrRegionCodeMs SponsorsCountryOrRegionCode = "MS"
	// Morocco
	SponsorsCountryOrRegionCodeMa SponsorsCountryOrRegionCode = "MA"
	// Mozambique
	SponsorsCountryOrRegionCodeMz SponsorsCountryOrRegionCode = "MZ"
	// Myanmar
	SponsorsCountryOrRegionCodeMm SponsorsCountryOrRegionCode = "MM"
	// Namibia
	SponsorsCountryOrRegionCodeNa SponsorsCountryOrRegionCode = "NA"
	// Nauru
	SponsorsCountryOrRegionCodeNr SponsorsCountryOrRegionCode = "NR"
	// Nepal
	SponsorsCountryOrRegionCodeNp SponsorsCountryOrRegionCode = "NP"
	// Netherlands
	SponsorsCountryOrRegionCodeNl SponsorsCountryOrRegionCode = "NL"
	// New Caledonia
	SponsorsCountryOrRegionCodeNc SponsorsCountryOrRegionCode = "NC"
	// New Zealand
	SponsorsCountryOrRegionCodeNz SponsorsCountryOrRegionCode = "NZ"
	// Nicaragua
	SponsorsCountryOrRegionCodeNi SponsorsCountryOrRegionCode = "NI"
	// Niger
	SponsorsCountryOrRegionCodeNe SponsorsCountryOrRegionCode = "NE"
	// Nigeria
	SponsorsCountryOrRegionCodeNg SponsorsCountryOrRegionCode = "NG"
	// Niue
	SponsorsCountryOrRegionCodeNu SponsorsCountryOrRegionCode = "NU"
	// Norfolk Island
	SponsorsCountryOrRegionCodeNf SponsorsCountryOrRegionCode = "NF"
	// Northern Mariana Islands
	SponsorsCountryOrRegionCodeMp SponsorsCountryOrRegionCode = "MP"
	// Norway
	SponsorsCountryOrRegionCodeNo SponsorsCountryOrRegionCode = "NO"
	// Oman
	SponsorsCountryOrRegionCodeOm SponsorsCountryOrRegionCode = "OM"
	// Pakistan
	SponsorsCountryOrRegionCodePk SponsorsCountryOrRegionCode = "PK"
	// Palau
	SponsorsCountryOrRegionCodePw SponsorsCountryOrRegionCode = "PW"
	// Palestine
	SponsorsCountryOrRegionCodePs SponsorsCountryOrRegionCode = "PS"
	// Panama
	SponsorsCountryOrRegionCodePa SponsorsCountryOrRegionCode = "PA"
	// Papua New Guinea
	SponsorsCountryOrRegionCodePg SponsorsCountryOrRegionCode = "PG"
	// Paraguay
	SponsorsCountryOrRegionCodePy SponsorsCountryOrRegionCode = "PY"
	// Peru
	SponsorsCountryOrRegionCodePe SponsorsCountryOrRegionCode = "PE"
	// Philippines
	SponsorsCountryOrRegionCodePh SponsorsCountryOrRegionCode = "PH"
	// Pitcairn
	SponsorsCountryOrRegionCodePn SponsorsCountryOrRegionCode = "PN"
	// Poland
	SponsorsCountryOrRegionCodePl SponsorsCountryOrRegionCode = "PL"
	// Portugal
	SponsorsCountryOrRegionCodePt SponsorsCountryOrRegionCode = "PT"
	// Puerto Rico
	SponsorsCountryOrRegionCodePr SponsorsCountryOrRegionCode = "PR"
	// Qatar
	SponsorsCountryOrRegionCodeQa SponsorsCountryOrRegionCode = "QA"
	// Reunion
	SponsorsCountryOrRegionCodeRe SponsorsCountryOrRegionCode = "RE"
	// Romania
	SponsorsCountryOrRegionCodeRo SponsorsCountryOrRegionCode = "RO"
	// Russian Federation
	SponsorsCountryOrRegionCodeRu SponsorsCountryOrRegionCode = "RU"
	// Rwanda
	SponsorsCountryOrRegionCodeRw SponsorsCountryOrRegionCode = "RW"
	// Saint Barthélemy
	SponsorsCountryOrRegionCodeBl SponsorsCountryOrRegionCode = "BL"
	// Saint Helena
	SponsorsCountryOrRegionCodeSh SponsorsCountryOrRegionCode = "SH"
	// Saint Kitts and Nevis
	SponsorsCountryOrRegionCodeKn SponsorsCountryOrRegionCode = "KN"
	// Saint Lucia
	SponsorsCountryOrRegionCodeLc SponsorsCountryOrRegionCode = "LC"
	// Saint Martin (French part)
	SponsorsCountryOrRegionCodeMf SponsorsCountryOrRegionCode = "MF"
	// Saint Pierre and Miquelon
	SponsorsCountryOrRegionCodePm SponsorsCountryOrRegionCode = "PM"
	// Saint Vincent and the Grenadines
	SponsorsCountryOrRegionCodeVc SponsorsCountryOrRegionCode = "VC"
	// Samoa
	SponsorsCountryOrRegionCodeWs SponsorsCountryOrRegionCode = "WS"
	// San Marino
	SponsorsCountryOrRegionCodeSm SponsorsCountryOrRegionCode = "SM"
	// Sao Tome and Principe
	SponsorsCountryOrRegionCodeSt SponsorsCountryOrRegionCode = "ST"
	// Saudi Arabia
	SponsorsCountryOrRegionCodeSa SponsorsCountryOrRegionCode = "SA"
	// Senegal
	SponsorsCountryOrRegionCodeSn SponsorsCountryOrRegionCode = "SN"
	// Serbia
	SponsorsCountryOrRegionCodeRs SponsorsCountryOrRegionCode = "RS"
	// Seychelles
	SponsorsCountryOrRegionCodeSc SponsorsCountryOrRegionCode = "SC"
	// Sierra Leone
	SponsorsCountryOrRegionCodeSl SponsorsCountryOrRegionCode = "SL"
	// Singapore
	SponsorsCountryOrRegionCodeSg SponsorsCountryOrRegionCode = "SG"
	// Sint Maarten (Dutch part)
	SponsorsCountryOrRegionCodeSx SponsorsCountryOrRegionCode = "SX"
	// Slovakia
	SponsorsCountryOrRegionCodeSk SponsorsCountryOrRegionCode = "SK"
	// Slovenia
	SponsorsCountryOrRegionCodeSi SponsorsCountryOrRegionCode = "SI"
	// Solomon Islands
	SponsorsCountryOrRegionCodeSb SponsorsCountryOrRegionCode = "SB"
	// Somalia
	SponsorsCountryOrRegionCodeSo SponsorsCountryOrRegionCode = "SO"
	// South Africa
	SponsorsCountryOrRegionCodeZa SponsorsCountryOrRegionCode = "ZA"
	// South Georgia and South Sandwich Islands
	SponsorsCountryOrRegionCodeGs SponsorsCountryOrRegionCode = "GS"
	// South Sudan
	SponsorsCountryOrRegionCodeSs SponsorsCountryOrRegionCode = "SS"
	// Spain
	SponsorsCountryOrRegionCodeEs SponsorsCountryOrRegionCode = "ES"
	// Sri Lanka
	SponsorsCountryOrRegionCodeLk SponsorsCountryOrRegionCode = "LK"
	// Sudan
	SponsorsCountryOrRegionCodeSd SponsorsCountryOrRegionCode = "SD"
	// Suriname
	SponsorsCountryOrRegionCodeSr SponsorsCountryOrRegionCode = "SR"
	// Svalbard and Jan Mayen Islands
	SponsorsCountryOrRegionCodeSj SponsorsCountryOrRegionCode = "SJ"
	// Swaziland
	SponsorsCountryOrRegionCodeSz SponsorsCountryOrRegionCode = "SZ"
	// Sweden
	SponsorsCountryOrRegionCodeSe SponsorsCountryOrRegionCode = "SE"
	// Switzerland
	SponsorsCountryOrRegionCodeCh SponsorsCountryOrRegionCode = "CH"
	// Taiwan
	SponsorsCountryOrRegionCodeTw SponsorsCountryOrRegionCode = "TW"
	// Tajikistan
	SponsorsCountryOrRegionCodeTj SponsorsCountryOrRegionCode = "TJ"
	// Tanzania
	SponsorsCountryOrRegionCodeTz SponsorsCountryOrRegionCode = "TZ"
	// Thailand
	SponsorsCountryOrRegionCodeTh SponsorsCountryOrRegionCode = "TH"
	// Timor-Leste
	SponsorsCountryOrRegionCodeTl SponsorsCountryOrRegionCode = "TL"
	// Togo
	SponsorsCountryOrRegionCodeTg SponsorsCountryOrRegionCode = "TG"
	// Tokelau
	SponsorsCountryOrRegionCodeTk SponsorsCountryOrRegionCode = "TK"
	// Tonga
	SponsorsCountryOrRegionCodeTo SponsorsCountryOrRegionCode = "TO"
	// Trinidad and Tobago
	SponsorsCountryOrRegionCodeTt SponsorsCountryOrRegionCode = "TT"
	// Tunisia
	SponsorsCountryOrRegionCodeTn SponsorsCountryOrRegionCode = "TN"
	// Türkiye
	SponsorsCountryOrRegionCodeTr SponsorsCountryOrRegionCode = "TR"
	// Turkmenistan
	SponsorsCountryOrRegionCodeTm SponsorsCountryOrRegionCode = "TM"
	// Turks and Caicos Islands
	SponsorsCountryOrRegionCodeTc SponsorsCountryOrRegionCode = "TC"
	// Tuvalu
	SponsorsCountryOrRegionCodeTv SponsorsCountryOrRegionCode = "TV"
	// Uganda
	SponsorsCountryOrRegionCodeUg SponsorsCountryOrRegionCode = "UG"
	// Ukraine
	SponsorsCountryOrRegionCodeUa SponsorsCountryOrRegionCode = "UA"
	// United Arab Emirates
	SponsorsCountryOrRegionCodeAe SponsorsCountryOrRegionCode = "AE"
	// United Kingdom
	SponsorsCountryOrRegionCodeGb SponsorsCountryOrRegionCode = "GB"
	// United States Minor Outlying Islands
	SponsorsCountryOrRegionCodeUm SponsorsCountryOrRegionCode = "UM"
	// United States of America
	SponsorsCountryOrRegionCodeUs SponsorsCountryOrRegionCode = "US"
	// Uruguay
	SponsorsCountryOrRegionCodeUy SponsorsCountryOrRegionCode = "UY"
	// Uzbekistan
	SponsorsCountryOrRegionCodeUz SponsorsCountryOrRegionCode = "UZ"
	// Vanuatu
	SponsorsCountryOrRegionCodeVu SponsorsCountryOrRegionCode = "VU"
	// Vatican City
	SponsorsCountryOrRegionCodeVa SponsorsCountryOrRegionCode = "VA"
	// Venezuela
	SponsorsCountryOrRegionCodeVe SponsorsCountryOrRegionCode = "VE"
	// Vietnam
	SponsorsCountryOrRegionCodeVn SponsorsCountryOrRegionCode = "VN"
	// Virgin Islands, British
	SponsorsCountryOrRegionCodeVg SponsorsCountryOrRegionCode = "VG"
	// Virgin Islands, U.S.
	SponsorsCountryOrRegionCodeVi SponsorsCountryOrRegionCode = "VI"
	// Wallis and Futuna Islands
	SponsorsCountryOrRegionCodeWf SponsorsCountryOrRegionCode = "WF"
	// Western Sahara
	SponsorsCountryOrRegionCodeEh SponsorsCountryOrRegionCode = "EH"
	// Yemen
	SponsorsCountryOrRegionCodeYe SponsorsCountryOrRegionCode = "YE"
	// Zambia
	SponsorsCountryOrRegionCodeZm SponsorsCountryOrRegionCode = "ZM"
	// Zimbabwe
	SponsorsCountryOrRegionCodeZw SponsorsCountryOrRegionCode = "ZW"
)

var AllSponsorsCountryOrRegionCode = []SponsorsCountryOrRegionCode{
	SponsorsCountryOrRegionCodeAf,
	SponsorsCountryOrRegionCodeAx,
	SponsorsCountryOrRegionCodeAl,
	SponsorsCountryOrRegionCodeDz,
	SponsorsCountryOrRegionCodeAs,
	SponsorsCountryOrRegionCodeAd,
	SponsorsCountryOrRegionCodeAo,
	SponsorsCountryOrRegionCodeAi,
	SponsorsCountryOrRegionCodeAq,
	SponsorsCountryOrRegionCodeAg,
	SponsorsCountryOrRegionCodeAr,
	SponsorsCountryOrRegionCodeAm,
	SponsorsCountryOrRegionCodeAw,
	SponsorsCountryOrRegionCodeAu,
	SponsorsCountryOrRegionCodeAt,
	SponsorsCountryOrRegionCodeAz,
	SponsorsCountryOrRegionCodeBs,
	SponsorsCountryOrRegionCodeBh,
	SponsorsCountryOrRegionCodeBd,
	SponsorsCountryOrRegionCodeBb,
	SponsorsCountryOrRegionCodeBy,
	SponsorsCountryOrRegionCodeBe,
	SponsorsCountryOrRegionCodeBz,
	SponsorsCountryOrRegionCodeBj,
	SponsorsCountryOrRegionCodeBm,
	SponsorsCountryOrRegionCodeBt,
	SponsorsCountryOrRegionCodeBo,
	SponsorsCountryOrRegionCodeBq,
	SponsorsCountryOrRegionCodeBa,
	SponsorsCountryOrRegionCodeBw,
	SponsorsCountryOrRegionCodeBv,
	SponsorsCountryOrRegionCodeBr,
	SponsorsCountryOrRegionCodeIo,
	SponsorsCountryOrRegionCodeBn,
	SponsorsCountryOrRegionCodeBg,
	SponsorsCountryOrRegionCodeBf,
	SponsorsCountryOrRegionCodeBi,
	SponsorsCountryOrRegionCodeKh,
	SponsorsCountryOrRegionCodeCm,
	SponsorsCountryOrRegionCodeCa,
	SponsorsCountryOrRegionCodeCv,
	SponsorsCountryOrRegionCodeKy,
	SponsorsCountryOrRegionCodeCf,
	SponsorsCountryOrRegionCodeTd,
	SponsorsCountryOrRegionCodeCl,
	SponsorsCountryOrRegionCodeCn,
	SponsorsCountryOrRegionCodeCx,
	SponsorsCountryOrRegionCodeCc,
	SponsorsCountryOrRegionCodeCo,
	SponsorsCountryOrRegionCodeKm,
	SponsorsCountryOrRegionCodeCg,
	SponsorsCountryOrRegionCodeCd,
	SponsorsCountryOrRegionCodeCk,
	SponsorsCountryOrRegionCodeCr,
	SponsorsCountryOrRegionCodeCi,
	SponsorsCountryOrRegionCodeHr,
	SponsorsCountryOrRegionCodeCw,
	SponsorsCountryOrRegionCodeCy,
	SponsorsCountryOrRegionCodeCz,
	SponsorsCountryOrRegionCodeDk,
	SponsorsCountryOrRegionCodeDj,
	SponsorsCountryOrRegionCodeDm,
	SponsorsCountryOrRegionCodeDo,
	SponsorsCountryOrRegionCodeEc,
	SponsorsCountryOrRegionCodeEg,
	SponsorsCountryOrRegionCodeSv,
	SponsorsCountryOrRegionCodeGq,
	SponsorsCountryOrRegionCodeEr,
	SponsorsCountryOrRegionCodeEe,
	SponsorsCountryOrRegionCodeEt,
	SponsorsCountryOrRegionCodeFk,
	SponsorsCountryOrRegionCodeFo,
	SponsorsCountryOrRegionCodeFj,
	SponsorsCountryOrRegionCodeFi,
	SponsorsCountryOrRegionCodeFr,
	SponsorsCountryOrRegionCodeGf,
	SponsorsCountryOrRegionCodePf,
	SponsorsCountryOrRegionCodeTf,
	SponsorsCountryOrRegionCodeGa,
	SponsorsCountryOrRegionCodeGm,
	SponsorsCountryOrRegionCodeGe,
	SponsorsCountryOrRegionCodeDe,
	SponsorsCountryOrRegionCodeGh,
	SponsorsCountryOrRegionCodeGi,
	SponsorsCountryOrRegionCodeGr,
	SponsorsCountryOrRegionCodeGl,
	SponsorsCountryOrRegionCodeGd,
	SponsorsCountryOrRegionCodeGp,
	SponsorsCountryOrRegionCodeGu,
	SponsorsCountryOrRegionCodeGt,
	SponsorsCountryOrRegionCodeGg,
	SponsorsCountryOrRegionCodeGn,
	SponsorsCountryOrRegionCodeGw,
	SponsorsCountryOrRegionCodeGy,
	SponsorsCountryOrRegionCodeHt,
	SponsorsCountryOrRegionCodeHm,
	SponsorsCountryOrRegionCodeHn,
	SponsorsCountryOrRegionCodeHk,
	SponsorsCountryOrRegionCodeHu,
	SponsorsCountryOrRegionCodeIs,
	SponsorsCountryOrRegionCodeIn,
	SponsorsCountryOrRegionCodeID,
	SponsorsCountryOrRegionCodeIr,
	SponsorsCountryOrRegionCodeIq,
	SponsorsCountryOrRegionCodeIe,
	SponsorsCountryOrRegionCodeIm,
	SponsorsCountryOrRegionCodeIl,
	SponsorsCountryOrRegionCodeIt,
	SponsorsCountryOrRegionCodeJm,
	SponsorsCountryOrRegionCodeJp,
	SponsorsCountryOrRegionCodeJe,
	SponsorsCountryOrRegionCodeJo,
	SponsorsCountryOrRegionCodeKz,
	SponsorsCountryOrRegionCodeKe,
	SponsorsCountryOrRegionCodeKi,
	SponsorsCountryOrRegionCodeKr,
	SponsorsCountryOrRegionCodeKw,
	SponsorsCountryOrRegionCodeKg,
	SponsorsCountryOrRegionCodeLa,
	SponsorsCountryOrRegionCodeLv,
	SponsorsCountryOrRegionCodeLb,
	SponsorsCountryOrRegionCodeLs,
	SponsorsCountryOrRegionCodeLr,
	SponsorsCountryOrRegionCodeLy,
	SponsorsCountryOrRegionCodeLi,
	SponsorsCountryOrRegionCodeLt,
	SponsorsCountryOrRegionCodeLu,
	SponsorsCountryOrRegionCodeMo,
	SponsorsCountryOrRegionCodeMk,
	SponsorsCountryOrRegionCodeMg,
	SponsorsCountryOrRegionCodeMw,
	SponsorsCountryOrRegionCodeMy,
	SponsorsCountryOrRegionCodeMv,
	SponsorsCountryOrRegionCodeMl,
	SponsorsCountryOrRegionCodeMt,
	SponsorsCountryOrRegionCodeMh,
	SponsorsCountryOrRegionCodeMq,
	SponsorsCountryOrRegionCodeMr,
	SponsorsCountryOrRegionCodeMu,
	SponsorsCountryOrRegionCodeYt,
	SponsorsCountryOrRegionCodeMx,
	SponsorsCountryOrRegionCodeFm,
	SponsorsCountryOrRegionCodeMd,
	SponsorsCountryOrRegionCodeMc,
	SponsorsCountryOrRegionCodeMn,
	SponsorsCountryOrRegionCodeMe,
	SponsorsCountryOrRegionCodeMs,
	SponsorsCountryOrRegionCodeMa,
	SponsorsCountryOrRegionCodeMz,
	SponsorsCountryOrRegionCodeMm,
	SponsorsCountryOrRegionCodeNa,
	SponsorsCountryOrRegionCodeNr,
	SponsorsCountryOrRegionCodeNp,
	SponsorsCountryOrRegionCodeNl,
	SponsorsCountryOrRegionCodeNc,
	SponsorsCountryOrRegionCodeNz,
	SponsorsCountryOrRegionCodeNi,
	SponsorsCountryOrRegionCodeNe,
	SponsorsCountryOrRegionCodeNg,
	SponsorsCountryOrRegionCodeNu,
	SponsorsCountryOrRegionCodeNf,
	SponsorsCountryOrRegionCodeMp,
	SponsorsCountryOrRegionCodeNo,
	SponsorsCountryOrRegionCodeOm,
	SponsorsCountryOrRegionCodePk,
	SponsorsCountryOrRegionCodePw,
	SponsorsCountryOrRegionCodePs,
	SponsorsCountryOrRegionCodePa,
	SponsorsCountryOrRegionCodePg,
	SponsorsCountryOrRegionCodePy,
	SponsorsCountryOrRegionCodePe,
	SponsorsCountryOrRegionCodePh,
	SponsorsCountryOrRegionCodePn,
	SponsorsCountryOrRegionCodePl,
	SponsorsCountryOrRegionCodePt,
	SponsorsCountryOrRegionCodePr,
	SponsorsCountryOrRegionCodeQa,
	SponsorsCountryOrRegionCodeRe,
	SponsorsCountryOrRegionCodeRo,
	SponsorsCountryOrRegionCodeRu,
	SponsorsCountryOrRegionCodeRw,
	SponsorsCountryOrRegionCodeBl,
	SponsorsCountryOrRegionCodeSh,
	SponsorsCountryOrRegionCodeKn,
	SponsorsCountryOrRegionCodeLc,
	SponsorsCountryOrRegionCodeMf,
	SponsorsCountryOrRegionCodePm,
	SponsorsCountryOrRegionCodeVc,
	SponsorsCountryOrRegionCodeWs,
	SponsorsCountryOrRegionCodeSm,
	SponsorsCountryOrRegionCodeSt,
	SponsorsCountryOrRegionCodeSa,
	SponsorsCountryOrRegionCodeSn,
	SponsorsCountryOrRegionCodeRs,
	SponsorsCountryOrRegionCodeSc,
	SponsorsCountryOrRegionCodeSl,
	SponsorsCountryOrRegionCodeSg,
	SponsorsCountryOrRegionCodeSx,
	SponsorsCountryOrRegionCodeSk,
	SponsorsCountryOrRegionCodeSi,
	SponsorsCountryOrRegionCodeSb,
	SponsorsCountryOrRegionCodeSo,
	SponsorsCountryOrRegionCodeZa,
	SponsorsCountryOrRegionCodeGs,
	SponsorsCountryOrRegionCodeSs,
	SponsorsCountryOrRegionCodeEs,
	SponsorsCountryOrRegionCodeLk,
	SponsorsCountryOrRegionCodeSd,
	SponsorsCountryOrRegionCodeSr,
	SponsorsCountryOrRegionCodeSj,
	SponsorsCountryOrRegionCodeSz,
	SponsorsCountryOrRegionCodeSe,
	SponsorsCountryOrRegionCodeCh,
	SponsorsCountryOrRegionCodeTw,
	SponsorsCountryOrRegionCodeTj,
	SponsorsCountryOrRegionCodeTz,
	SponsorsCountryOrRegionCodeTh,
	SponsorsCountryOrRegionCodeTl,
	SponsorsCountryOrRegionCodeTg,
	SponsorsCountryOrRegionCodeTk,
	SponsorsCountryOrRegionCodeTo,
	SponsorsCountryOrRegionCodeTt,
	SponsorsCountryOrRegionCodeTn,
	SponsorsCountryOrRegionCodeTr,
	SponsorsCountryOrRegionCodeTm,
	SponsorsCountryOrRegionCodeTc,
	SponsorsCountryOrRegionCodeTv,
	SponsorsCountryOrRegionCodeUg,
	SponsorsCountryOrRegionCodeUa,
	SponsorsCountryOrRegionCodeAe,
	SponsorsCountryOrRegionCodeGb,
	SponsorsCountryOrRegionCodeUm,
	SponsorsCountryOrRegionCodeUs,
	SponsorsCountryOrRegionCodeUy,
	SponsorsCountryOrRegionCodeUz,
	SponsorsCountryOrRegionCodeVu,
	SponsorsCountryOrRegionCodeVa,
	SponsorsCountryOrRegionCodeVe,
	SponsorsCountryOrRegionCodeVn,
	SponsorsCountryOrRegionCodeVg,
	SponsorsCountryOrRegionCodeVi,
	SponsorsCountryOrRegionCodeWf,
	SponsorsCountryOrRegionCodeEh,
	SponsorsCountryOrRegionCodeYe,
	SponsorsCountryOrRegionCodeZm,
	SponsorsCountryOrRegionCodeZw,
}

func (e SponsorsCountryOrRegionCode) IsValid() bool {
	switch e {
	case SponsorsCountryOrRegionCodeAf, SponsorsCountryOrRegionCodeAx, SponsorsCountryOrRegionCodeAl, SponsorsCountryOrRegionCodeDz, SponsorsCountryOrRegionCodeAs, SponsorsCountryOrRegionCodeAd, SponsorsCountryOrRegionCodeAo, SponsorsCountryOrRegionCodeAi, SponsorsCountryOrRegionCodeAq, SponsorsCountryOrRegionCodeAg, SponsorsCountryOrRegionCodeAr, SponsorsCountryOrRegionCodeAm, SponsorsCountryOrRegionCodeAw, SponsorsCountryOrRegionCodeAu, SponsorsCountryOrRegionCodeAt, SponsorsCountryOrRegionCodeAz, SponsorsCountryOrRegionCodeBs, SponsorsCountryOrRegionCodeBh, SponsorsCountryOrRegionCodeBd, SponsorsCountryOrRegionCodeBb, SponsorsCountryOrRegionCodeBy, SponsorsCountryOrRegionCodeBe, SponsorsCountryOrRegionCodeBz, SponsorsCountryOrRegionCodeBj, SponsorsCountryOrRegionCodeBm, SponsorsCountryOrRegionCodeBt, SponsorsCountryOrRegionCodeBo, SponsorsCountryOrRegionCodeBq, SponsorsCountryOrRegionCodeBa, SponsorsCountryOrRegionCodeBw, SponsorsCountryOrRegionCodeBv, SponsorsCountryOrRegionCodeBr, SponsorsCountryOrRegionCodeIo, SponsorsCountryOrRegionCodeBn, SponsorsCountryOrRegionCodeBg, SponsorsCountryOrRegionCodeBf, SponsorsCountryOrRegionCodeBi, SponsorsCountryOrRegionCodeKh, SponsorsCountryOrRegionCodeCm, SponsorsCountryOrRegionCodeCa, SponsorsCountryOrRegionCodeCv, SponsorsCountryOrRegionCodeKy, SponsorsCountryOrRegionCodeCf, SponsorsCountryOrRegionCodeTd, SponsorsCountryOrRegionCodeCl, SponsorsCountryOrRegionCodeCn, SponsorsCountryOrRegionCodeCx, SponsorsCountryOrRegionCodeCc, SponsorsCountryOrRegionCodeCo, SponsorsCountryOrRegionCodeKm, SponsorsCountryOrRegionCodeCg, SponsorsCountryOrRegionCodeCd, SponsorsCountryOrRegionCodeCk, SponsorsCountryOrRegionCodeCr, SponsorsCountryOrRegionCodeCi, SponsorsCountryOrRegionCodeHr, SponsorsCountryOrRegionCodeCw, SponsorsCountryOrRegionCodeCy, SponsorsCountryOrRegionCodeCz, SponsorsCountryOrRegionCodeDk, SponsorsCountryOrRegionCodeDj, SponsorsCountryOrRegionCodeDm, SponsorsCountryOrRegionCodeDo, SponsorsCountryOrRegionCodeEc, SponsorsCountryOrRegionCodeEg, SponsorsCountryOrRegionCodeSv, SponsorsCountryOrRegionCodeGq, SponsorsCountryOrRegionCodeEr, SponsorsCountryOrRegionCodeEe, SponsorsCountryOrRegionCodeEt, SponsorsCountryOrRegionCodeFk, SponsorsCountryOrRegionCodeFo, SponsorsCountryOrRegionCodeFj, SponsorsCountryOrRegionCodeFi, SponsorsCountryOrRegionCodeFr, SponsorsCountryOrRegionCodeGf, SponsorsCountryOrRegionCodePf, SponsorsCountryOrRegionCodeTf, SponsorsCountryOrRegionCodeGa, SponsorsCountryOrRegionCodeGm, SponsorsCountryOrRegionCodeGe, SponsorsCountryOrRegionCodeDe, SponsorsCountryOrRegionCodeGh, SponsorsCountryOrRegionCodeGi, SponsorsCountryOrRegionCodeGr, SponsorsCountryOrRegionCodeGl, SponsorsCountryOrRegionCodeGd, SponsorsCountryOrRegionCodeGp, SponsorsCountryOrRegionCodeGu, SponsorsCountryOrRegionCodeGt, SponsorsCountryOrRegionCodeGg, SponsorsCountryOrRegionCodeGn, SponsorsCountryOrRegionCodeGw, SponsorsCountryOrRegionCodeGy, SponsorsCountryOrRegionCodeHt, SponsorsCountryOrRegionCodeHm, SponsorsCountryOrRegionCodeHn, SponsorsCountryOrRegionCodeHk, SponsorsCountryOrRegionCodeHu, SponsorsCountryOrRegionCodeIs, SponsorsCountryOrRegionCodeIn, SponsorsCountryOrRegionCodeID, SponsorsCountryOrRegionCodeIr, SponsorsCountryOrRegionCodeIq, SponsorsCountryOrRegionCodeIe, SponsorsCountryOrRegionCodeIm, SponsorsCountryOrRegionCodeIl, SponsorsCountryOrRegionCodeIt, SponsorsCountryOrRegionCodeJm, SponsorsCountryOrRegionCodeJp, SponsorsCountryOrRegionCodeJe, SponsorsCountryOrRegionCodeJo, SponsorsCountryOrRegionCodeKz, SponsorsCountryOrRegionCodeKe, SponsorsCountryOrRegionCodeKi, SponsorsCountryOrRegionCodeKr, SponsorsCountryOrRegionCodeKw, SponsorsCountryOrRegionCodeKg, SponsorsCountryOrRegionCodeLa, SponsorsCountryOrRegionCodeLv, SponsorsCountryOrRegionCodeLb, SponsorsCountryOrRegionCodeLs, SponsorsCountryOrRegionCodeLr, SponsorsCountryOrRegionCodeLy, SponsorsCountryOrRegionCodeLi, SponsorsCountryOrRegionCodeLt, SponsorsCountryOrRegionCodeLu, SponsorsCountryOrRegionCodeMo, SponsorsCountryOrRegionCodeMk, SponsorsCountryOrRegionCodeMg, SponsorsCountryOrRegionCodeMw, SponsorsCountryOrRegionCodeMy, SponsorsCountryOrRegionCodeMv, SponsorsCountryOrRegionCodeMl, SponsorsCountryOrRegionCodeMt, SponsorsCountryOrRegionCodeMh, SponsorsCountryOrRegionCodeMq, SponsorsCountryOrRegionCodeMr, SponsorsCountryOrRegionCodeMu, SponsorsCountryOrRegionCodeYt, SponsorsCountryOrRegionCodeMx, SponsorsCountryOrRegionCodeFm, SponsorsCountryOrRegionCodeMd, SponsorsCountryOrRegionCodeMc, SponsorsCountryOrRegionCodeMn, SponsorsCountryOrRegionCodeMe, SponsorsCountryOrRegionCodeMs, SponsorsCountryOrRegionCodeMa, SponsorsCountryOrRegionCodeMz, SponsorsCountryOrRegionCodeMm, SponsorsCountryOrRegionCodeNa, SponsorsCountryOrRegionCodeNr, SponsorsCountryOrRegionCodeNp, SponsorsCountryOrRegionCodeNl, SponsorsCountryOrRegionCodeNc, SponsorsCountryOrRegionCodeNz, SponsorsCountryOrRegionCodeNi, SponsorsCountryOrRegionCodeNe, SponsorsCountryOrRegionCodeNg, SponsorsCountryOrRegionCodeNu, SponsorsCountryOrRegionCodeNf, SponsorsCountryOrRegionCodeMp, SponsorsCountryOrRegionCodeNo, SponsorsCountryOrRegionCodeOm, SponsorsCountryOrRegionCodePk, SponsorsCountryOrRegionCodePw, SponsorsCountryOrRegionCodePs, SponsorsCountryOrRegionCodePa, SponsorsCountryOrRegionCodePg, SponsorsCountryOrRegionCodePy, SponsorsCountryOrRegionCodePe, SponsorsCountryOrRegionCodePh, SponsorsCountryOrRegionCodePn, SponsorsCountryOrRegionCodePl, SponsorsCountryOrRegionCodePt, SponsorsCountryOrRegionCodePr, SponsorsCountryOrRegionCodeQa, SponsorsCountryOrRegionCodeRe, SponsorsCountryOrRegionCodeRo, SponsorsCountryOrRegionCodeRu, SponsorsCountryOrRegionCodeRw, SponsorsCountryOrRegionCodeBl, SponsorsCountryOrRegionCodeSh, SponsorsCountryOrRegionCodeKn, SponsorsCountryOrRegionCodeLc, SponsorsCountryOrRegionCodeMf, SponsorsCountryOrRegionCodePm, SponsorsCountryOrRegionCodeVc, SponsorsCountryOrRegionCodeWs, SponsorsCountryOrRegionCodeSm, SponsorsCountryOrRegionCodeSt, SponsorsCountryOrRegionCodeSa, SponsorsCountryOrRegionCodeSn, SponsorsCountryOrRegionCodeRs, SponsorsCountryOrRegionCodeSc, SponsorsCountryOrRegionCodeSl, SponsorsCountryOrRegionCodeSg, SponsorsCountryOrRegionCodeSx, SponsorsCountryOrRegionCodeSk, SponsorsCountryOrRegionCodeSi, SponsorsCountryOrRegionCodeSb, SponsorsCountryOrRegionCodeSo, SponsorsCountryOrRegionCodeZa, SponsorsCountryOrRegionCodeGs, SponsorsCountryOrRegionCodeSs, SponsorsCountryOrRegionCodeEs, SponsorsCountryOrRegionCodeLk, SponsorsCountryOrRegionCodeSd, SponsorsCountryOrRegionCodeSr, SponsorsCountryOrRegionCodeSj, SponsorsCountryOrRegionCodeSz, SponsorsCountryOrRegionCodeSe, SponsorsCountryOrRegionCodeCh, SponsorsCountryOrRegionCodeTw, SponsorsCountryOrRegionCodeTj, SponsorsCountryOrRegionCodeTz, SponsorsCountryOrRegionCodeTh, SponsorsCountryOrRegionCodeTl, SponsorsCountryOrRegionCodeTg, SponsorsCountryOrRegionCodeTk, SponsorsCountryOrRegionCodeTo, SponsorsCountryOrRegionCodeTt, SponsorsCountryOrRegionCodeTn, SponsorsCountryOrRegionCodeTr, SponsorsCountryOrRegionCodeTm, SponsorsCountryOrRegionCodeTc, SponsorsCountryOrRegionCodeTv, SponsorsCountryOrRegionCodeUg, SponsorsCountryOrRegionCodeUa, SponsorsCountryOrRegionCodeAe, SponsorsCountryOrRegionCodeGb, SponsorsCountryOrRegionCodeUm, SponsorsCountryOrRegionCodeUs, SponsorsCountryOrRegionCodeUy, SponsorsCountryOrRegionCodeUz, SponsorsCountryOrRegionCodeVu, SponsorsCountryOrRegionCodeVa, SponsorsCountryOrRegionCodeVe, SponsorsCountryOrRegionCodeVn, SponsorsCountryOrRegionCodeVg, SponsorsCountryOrRegionCodeVi, SponsorsCountryOrRegionCodeWf, SponsorsCountryOrRegionCodeEh, SponsorsCountryOrRegionCodeYe, SponsorsCountryOrRegionCodeZm, SponsorsCountryOrRegionCodeZw:
		return true
	}
	return false
}

func (e SponsorsCountryOrRegionCode) String() string {
	return string(e)
}

func (e *SponsorsCountryOrRegionCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsCountryOrRegionCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsCountryOrRegionCode", str)
	}
	return nil
}

func (e SponsorsCountryOrRegionCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of goals a GitHub Sponsors member can have.
type SponsorsGoalKind string

const (
	// The goal is about reaching a certain number of sponsors.
	SponsorsGoalKindTotalSponsorsCount SponsorsGoalKind = "TOTAL_SPONSORS_COUNT"
	// The goal is about getting a certain amount in USD from sponsorships each month.
	SponsorsGoalKindMonthlySponsorshipAmount SponsorsGoalKind = "MONTHLY_SPONSORSHIP_AMOUNT"
)

var AllSponsorsGoalKind = []SponsorsGoalKind{
	SponsorsGoalKindTotalSponsorsCount,
	SponsorsGoalKindMonthlySponsorshipAmount,
}

func (e SponsorsGoalKind) IsValid() bool {
	switch e {
	case SponsorsGoalKindTotalSponsorsCount, SponsorsGoalKindMonthlySponsorshipAmount:
		return true
	}
	return false
}

func (e SponsorsGoalKind) String() string {
	return string(e)
}

func (e *SponsorsGoalKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsGoalKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsGoalKind", str)
	}
	return nil
}

func (e SponsorsGoalKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The different kinds of records that can be featured on a GitHub Sponsors profile page.
type SponsorsListingFeaturedItemFeatureableType string

const (
	// A repository owned by the user or organization with the GitHub Sponsors profile.
	SponsorsListingFeaturedItemFeatureableTypeRepository SponsorsListingFeaturedItemFeatureableType = "REPOSITORY"
	// A user who belongs to the organization with the GitHub Sponsors profile.
	SponsorsListingFeaturedItemFeatureableTypeUser SponsorsListingFeaturedItemFeatureableType = "USER"
)

var AllSponsorsListingFeaturedItemFeatureableType = []SponsorsListingFeaturedItemFeatureableType{
	SponsorsListingFeaturedItemFeatureableTypeRepository,
	SponsorsListingFeaturedItemFeatureableTypeUser,
}

func (e SponsorsListingFeaturedItemFeatureableType) IsValid() bool {
	switch e {
	case SponsorsListingFeaturedItemFeatureableTypeRepository, SponsorsListingFeaturedItemFeatureableTypeUser:
		return true
	}
	return false
}

func (e SponsorsListingFeaturedItemFeatureableType) String() string {
	return string(e)
}

func (e *SponsorsListingFeaturedItemFeatureableType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsListingFeaturedItemFeatureableType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsListingFeaturedItemFeatureableType", str)
	}
	return nil
}

func (e SponsorsListingFeaturedItemFeatureableType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Sponsors tiers connections can be ordered.
type SponsorsTierOrderField string

const (
	// Order tiers by creation time.
	SponsorsTierOrderFieldCreatedAt SponsorsTierOrderField = "CREATED_AT"
	// Order tiers by their monthly price in cents
	SponsorsTierOrderFieldMonthlyPriceInCents SponsorsTierOrderField = "MONTHLY_PRICE_IN_CENTS"
)

var AllSponsorsTierOrderField = []SponsorsTierOrderField{
	SponsorsTierOrderFieldCreatedAt,
	SponsorsTierOrderFieldMonthlyPriceInCents,
}

func (e SponsorsTierOrderField) IsValid() bool {
	switch e {
	case SponsorsTierOrderFieldCreatedAt, SponsorsTierOrderFieldMonthlyPriceInCents:
		return true
	}
	return false
}

func (e SponsorsTierOrderField) String() string {
	return string(e)
}

func (e *SponsorsTierOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorsTierOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorsTierOrderField", str)
	}
	return nil
}

func (e SponsorsTierOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which sponsorship update connections can be ordered.
type SponsorshipNewsletterOrderField string

const (
	// Order sponsorship newsletters by when they were created.
	SponsorshipNewsletterOrderFieldCreatedAt SponsorshipNewsletterOrderField = "CREATED_AT"
)

var AllSponsorshipNewsletterOrderField = []SponsorshipNewsletterOrderField{
	SponsorshipNewsletterOrderFieldCreatedAt,
}

func (e SponsorshipNewsletterOrderField) IsValid() bool {
	switch e {
	case SponsorshipNewsletterOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e SponsorshipNewsletterOrderField) String() string {
	return string(e)
}

func (e *SponsorshipNewsletterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorshipNewsletterOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorshipNewsletterOrderField", str)
	}
	return nil
}

func (e SponsorshipNewsletterOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which sponsorship connections can be ordered.
type SponsorshipOrderField string

const (
	// Order sponsorship by creation time.
	SponsorshipOrderFieldCreatedAt SponsorshipOrderField = "CREATED_AT"
)

var AllSponsorshipOrderField = []SponsorshipOrderField{
	SponsorshipOrderFieldCreatedAt,
}

func (e SponsorshipOrderField) IsValid() bool {
	switch e {
	case SponsorshipOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e SponsorshipOrderField) String() string {
	return string(e)
}

func (e *SponsorshipOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorshipOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorshipOrderField", str)
	}
	return nil
}

func (e SponsorshipOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// How payment was made for funding a GitHub Sponsors sponsorship.
type SponsorshipPaymentSource string

const (
	// Payment was made through GitHub.
	SponsorshipPaymentSourceGithub SponsorshipPaymentSource = "GITHUB"
	// Payment was made through Patreon.
	SponsorshipPaymentSourcePatreon SponsorshipPaymentSource = "PATREON"
)

var AllSponsorshipPaymentSource = []SponsorshipPaymentSource{
	SponsorshipPaymentSourceGithub,
	SponsorshipPaymentSourcePatreon,
}

func (e SponsorshipPaymentSource) IsValid() bool {
	switch e {
	case SponsorshipPaymentSourceGithub, SponsorshipPaymentSourcePatreon:
		return true
	}
	return false
}

func (e SponsorshipPaymentSource) String() string {
	return string(e)
}

func (e *SponsorshipPaymentSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorshipPaymentSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorshipPaymentSource", str)
	}
	return nil
}

func (e SponsorshipPaymentSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The privacy of a sponsorship
type SponsorshipPrivacy string

const (
	// Public
	SponsorshipPrivacyPublic SponsorshipPrivacy = "PUBLIC"
	// Private
	SponsorshipPrivacyPrivate SponsorshipPrivacy = "PRIVATE"
)

var AllSponsorshipPrivacy = []SponsorshipPrivacy{
	SponsorshipPrivacyPublic,
	SponsorshipPrivacyPrivate,
}

func (e SponsorshipPrivacy) IsValid() bool {
	switch e {
	case SponsorshipPrivacyPublic, SponsorshipPrivacyPrivate:
		return true
	}
	return false
}

func (e SponsorshipPrivacy) String() string {
	return string(e)
}

func (e *SponsorshipPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SponsorshipPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SponsorshipPrivacy", str)
	}
	return nil
}

func (e SponsorshipPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible default commit messages for squash merges.
type SquashMergeCommitMessage string

const (
	// Default to the pull request's body.
	SquashMergeCommitMessagePrBody SquashMergeCommitMessage = "PR_BODY"
	// Default to the branch's commit messages.
	SquashMergeCommitMessageCommitMessages SquashMergeCommitMessage = "COMMIT_MESSAGES"
	// Default to a blank commit message.
	SquashMergeCommitMessageBlank SquashMergeCommitMessage = "BLANK"
)

var AllSquashMergeCommitMessage = []SquashMergeCommitMessage{
	SquashMergeCommitMessagePrBody,
	SquashMergeCommitMessageCommitMessages,
	SquashMergeCommitMessageBlank,
}

func (e SquashMergeCommitMessage) IsValid() bool {
	switch e {
	case SquashMergeCommitMessagePrBody, SquashMergeCommitMessageCommitMessages, SquashMergeCommitMessageBlank:
		return true
	}
	return false
}

func (e SquashMergeCommitMessage) String() string {
	return string(e)
}

func (e *SquashMergeCommitMessage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SquashMergeCommitMessage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SquashMergeCommitMessage", str)
	}
	return nil
}

func (e SquashMergeCommitMessage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible default commit titles for squash merges.
type SquashMergeCommitTitle string

const (
	// Default to the pull request's title.
	SquashMergeCommitTitlePrTitle SquashMergeCommitTitle = "PR_TITLE"
	// Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
	SquashMergeCommitTitleCommitOrPrTitle SquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
)

var AllSquashMergeCommitTitle = []SquashMergeCommitTitle{
	SquashMergeCommitTitlePrTitle,
	SquashMergeCommitTitleCommitOrPrTitle,
}

func (e SquashMergeCommitTitle) IsValid() bool {
	switch e {
	case SquashMergeCommitTitlePrTitle, SquashMergeCommitTitleCommitOrPrTitle:
		return true
	}
	return false
}

func (e SquashMergeCommitTitle) String() string {
	return string(e)
}

func (e *SquashMergeCommitTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SquashMergeCommitTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SquashMergeCommitTitle", str)
	}
	return nil
}

func (e SquashMergeCommitTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which star connections can be ordered.
type StarOrderField string

const (
	// Allows ordering a list of stars by when they were created.
	StarOrderFieldStarredAt StarOrderField = "STARRED_AT"
)

var AllStarOrderField = []StarOrderField{
	StarOrderFieldStarredAt,
}

func (e StarOrderField) IsValid() bool {
	switch e {
	case StarOrderFieldStarredAt:
		return true
	}
	return false
}

func (e StarOrderField) String() string {
	return string(e)
}

func (e *StarOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StarOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StarOrderField", str)
	}
	return nil
}

func (e StarOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible commit status states.
type StatusState string

const (
	// Status is expected.
	StatusStateExpected StatusState = "EXPECTED"
	// Status is errored.
	StatusStateError StatusState = "ERROR"
	// Status is failing.
	StatusStateFailure StatusState = "FAILURE"
	// Status is pending.
	StatusStatePending StatusState = "PENDING"
	// Status is successful.
	StatusStateSuccess StatusState = "SUCCESS"
)

var AllStatusState = []StatusState{
	StatusStateExpected,
	StatusStateError,
	StatusStateFailure,
	StatusStatePending,
	StatusStateSuccess,
}

func (e StatusState) IsValid() bool {
	switch e {
	case StatusStateExpected, StatusStateError, StatusStateFailure, StatusStatePending, StatusStateSuccess:
		return true
	}
	return false
}

func (e StatusState) String() string {
	return string(e)
}

func (e *StatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusState", str)
	}
	return nil
}

func (e StatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a subscription.
type SubscriptionState string

const (
	// The User is only notified when participating or @mentioned.
	SubscriptionStateUnsubscribed SubscriptionState = "UNSUBSCRIBED"
	// The User is notified of all conversations.
	SubscriptionStateSubscribed SubscriptionState = "SUBSCRIBED"
	// The User is never notified.
	SubscriptionStateIgnored SubscriptionState = "IGNORED"
)

var AllSubscriptionState = []SubscriptionState{
	SubscriptionStateUnsubscribed,
	SubscriptionStateSubscribed,
	SubscriptionStateIgnored,
}

func (e SubscriptionState) IsValid() bool {
	switch e {
	case SubscriptionStateUnsubscribed, SubscriptionStateSubscribed, SubscriptionStateIgnored:
		return true
	}
	return false
}

func (e SubscriptionState) String() string {
	return string(e)
}

func (e *SubscriptionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionState", str)
	}
	return nil
}

func (e SubscriptionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrderField string

const (
	// Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
	TeamDiscussionCommentOrderFieldNumber TeamDiscussionCommentOrderField = "NUMBER"
)

var AllTeamDiscussionCommentOrderField = []TeamDiscussionCommentOrderField{
	TeamDiscussionCommentOrderFieldNumber,
}

func (e TeamDiscussionCommentOrderField) IsValid() bool {
	switch e {
	case TeamDiscussionCommentOrderFieldNumber:
		return true
	}
	return false
}

func (e TeamDiscussionCommentOrderField) String() string {
	return string(e)
}

func (e *TeamDiscussionCommentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamDiscussionCommentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamDiscussionCommentOrderField", str)
	}
	return nil
}

func (e TeamDiscussionCommentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which team discussion connections can be ordered.
type TeamDiscussionOrderField string

const (
	// Allows chronological ordering of team discussions.
	TeamDiscussionOrderFieldCreatedAt TeamDiscussionOrderField = "CREATED_AT"
)

var AllTeamDiscussionOrderField = []TeamDiscussionOrderField{
	TeamDiscussionOrderFieldCreatedAt,
}

func (e TeamDiscussionOrderField) IsValid() bool {
	switch e {
	case TeamDiscussionOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e TeamDiscussionOrderField) String() string {
	return string(e)
}

func (e *TeamDiscussionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamDiscussionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamDiscussionOrderField", str)
	}
	return nil
}

func (e TeamDiscussionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which team member connections can be ordered.
type TeamMemberOrderField string

const (
	// Order team members by login
	TeamMemberOrderFieldLogin TeamMemberOrderField = "LOGIN"
	// Order team members by creation time
	TeamMemberOrderFieldCreatedAt TeamMemberOrderField = "CREATED_AT"
)

var AllTeamMemberOrderField = []TeamMemberOrderField{
	TeamMemberOrderFieldLogin,
	TeamMemberOrderFieldCreatedAt,
}

func (e TeamMemberOrderField) IsValid() bool {
	switch e {
	case TeamMemberOrderFieldLogin, TeamMemberOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e TeamMemberOrderField) String() string {
	return string(e)
}

func (e *TeamMemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamMemberOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamMemberOrderField", str)
	}
	return nil
}

func (e TeamMemberOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible team member roles; either 'maintainer' or 'member'.
type TeamMemberRole string

const (
	// A team maintainer has permission to add and remove team members.
	TeamMemberRoleMaintainer TeamMemberRole = "MAINTAINER"
	// A team member has no administrative permissions on the team.
	TeamMemberRoleMember TeamMemberRole = "MEMBER"
)

var AllTeamMemberRole = []TeamMemberRole{
	TeamMemberRoleMaintainer,
	TeamMemberRoleMember,
}

func (e TeamMemberRole) IsValid() bool {
	switch e {
	case TeamMemberRoleMaintainer, TeamMemberRoleMember:
		return true
	}
	return false
}

func (e TeamMemberRole) String() string {
	return string(e)
}

func (e *TeamMemberRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamMemberRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamMemberRole", str)
	}
	return nil
}

func (e TeamMemberRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
type TeamMembershipType string

const (
	// Includes only immediate members of the team.
	TeamMembershipTypeImmediate TeamMembershipType = "IMMEDIATE"
	// Includes only child team members for the team.
	TeamMembershipTypeChildTeam TeamMembershipType = "CHILD_TEAM"
	// Includes immediate and child team members for the team.
	TeamMembershipTypeAll TeamMembershipType = "ALL"
)

var AllTeamMembershipType = []TeamMembershipType{
	TeamMembershipTypeImmediate,
	TeamMembershipTypeChildTeam,
	TeamMembershipTypeAll,
}

func (e TeamMembershipType) IsValid() bool {
	switch e {
	case TeamMembershipTypeImmediate, TeamMembershipTypeChildTeam, TeamMembershipTypeAll:
		return true
	}
	return false
}

func (e TeamMembershipType) String() string {
	return string(e)
}

func (e *TeamMembershipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamMembershipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamMembershipType", str)
	}
	return nil
}

func (e TeamMembershipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible team notification values.
type TeamNotificationSetting string

const (
	// Everyone will receive notifications when the team is @mentioned.
	TeamNotificationSettingNotificationsEnabled TeamNotificationSetting = "NOTIFICATIONS_ENABLED"
	// No one will receive notifications.
	TeamNotificationSettingNotificationsDisabled TeamNotificationSetting = "NOTIFICATIONS_DISABLED"
)

var AllTeamNotificationSetting = []TeamNotificationSetting{
	TeamNotificationSettingNotificationsEnabled,
	TeamNotificationSettingNotificationsDisabled,
}

func (e TeamNotificationSetting) IsValid() bool {
	switch e {
	case TeamNotificationSettingNotificationsEnabled, TeamNotificationSettingNotificationsDisabled:
		return true
	}
	return false
}

func (e TeamNotificationSetting) String() string {
	return string(e)
}

func (e *TeamNotificationSetting) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamNotificationSetting(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamNotificationSetting", str)
	}
	return nil
}

func (e TeamNotificationSetting) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which team connections can be ordered.
type TeamOrderField string

const (
	// Allows ordering a list of teams by name.
	TeamOrderFieldName TeamOrderField = "NAME"
)

var AllTeamOrderField = []TeamOrderField{
	TeamOrderFieldName,
}

func (e TeamOrderField) IsValid() bool {
	switch e {
	case TeamOrderFieldName:
		return true
	}
	return false
}

func (e TeamOrderField) String() string {
	return string(e)
}

func (e *TeamOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamOrderField", str)
	}
	return nil
}

func (e TeamOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible team privacy values.
type TeamPrivacy string

const (
	// A secret team can only be seen by its members.
	TeamPrivacySecret TeamPrivacy = "SECRET"
	// A visible team can be seen and @mentioned by every member of the organization.
	TeamPrivacyVisible TeamPrivacy = "VISIBLE"
)

var AllTeamPrivacy = []TeamPrivacy{
	TeamPrivacySecret,
	TeamPrivacyVisible,
}

func (e TeamPrivacy) IsValid() bool {
	switch e {
	case TeamPrivacySecret, TeamPrivacyVisible:
		return true
	}
	return false
}

func (e TeamPrivacy) String() string {
	return string(e)
}

func (e *TeamPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamPrivacy", str)
	}
	return nil
}

func (e TeamPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which team repository connections can be ordered.
type TeamRepositoryOrderField string

const (
	// Order repositories by creation time
	TeamRepositoryOrderFieldCreatedAt TeamRepositoryOrderField = "CREATED_AT"
	// Order repositories by update time
	TeamRepositoryOrderFieldUpdatedAt TeamRepositoryOrderField = "UPDATED_AT"
	// Order repositories by push time
	TeamRepositoryOrderFieldPushedAt TeamRepositoryOrderField = "PUSHED_AT"
	// Order repositories by name
	TeamRepositoryOrderFieldName TeamRepositoryOrderField = "NAME"
	// Order repositories by permission
	TeamRepositoryOrderFieldPermission TeamRepositoryOrderField = "PERMISSION"
	// Order repositories by number of stargazers
	TeamRepositoryOrderFieldStargazers TeamRepositoryOrderField = "STARGAZERS"
)

var AllTeamRepositoryOrderField = []TeamRepositoryOrderField{
	TeamRepositoryOrderFieldCreatedAt,
	TeamRepositoryOrderFieldUpdatedAt,
	TeamRepositoryOrderFieldPushedAt,
	TeamRepositoryOrderFieldName,
	TeamRepositoryOrderFieldPermission,
	TeamRepositoryOrderFieldStargazers,
}

func (e TeamRepositoryOrderField) IsValid() bool {
	switch e {
	case TeamRepositoryOrderFieldCreatedAt, TeamRepositoryOrderFieldUpdatedAt, TeamRepositoryOrderFieldPushedAt, TeamRepositoryOrderFieldName, TeamRepositoryOrderFieldPermission, TeamRepositoryOrderFieldStargazers:
		return true
	}
	return false
}

func (e TeamRepositoryOrderField) String() string {
	return string(e)
}

func (e *TeamRepositoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamRepositoryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamRepositoryOrderField", str)
	}
	return nil
}

func (e TeamRepositoryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The role of a user on a team.
type TeamRole string

const (
	// User has admin rights on the team.
	TeamRoleAdmin TeamRole = "ADMIN"
	// User is a member of the team.
	TeamRoleMember TeamRole = "MEMBER"
)

var AllTeamRole = []TeamRole{
	TeamRoleAdmin,
	TeamRoleMember,
}

func (e TeamRole) IsValid() bool {
	switch e {
	case TeamRoleAdmin, TeamRoleMember:
		return true
	}
	return false
}

func (e TeamRole) String() string {
	return string(e)
}

func (e *TeamRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamRole", str)
	}
	return nil
}

func (e TeamRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a thread subscription form action
type ThreadSubscriptionFormAction string

const (
	// The User cannot subscribe or unsubscribe to the thread
	ThreadSubscriptionFormActionNone ThreadSubscriptionFormAction = "NONE"
	// The User can subscribe to the thread
	ThreadSubscriptionFormActionSubscribe ThreadSubscriptionFormAction = "SUBSCRIBE"
	// The User can unsubscribe to the thread
	ThreadSubscriptionFormActionUnsubscribe ThreadSubscriptionFormAction = "UNSUBSCRIBE"
)

var AllThreadSubscriptionFormAction = []ThreadSubscriptionFormAction{
	ThreadSubscriptionFormActionNone,
	ThreadSubscriptionFormActionSubscribe,
	ThreadSubscriptionFormActionUnsubscribe,
}

func (e ThreadSubscriptionFormAction) IsValid() bool {
	switch e {
	case ThreadSubscriptionFormActionNone, ThreadSubscriptionFormActionSubscribe, ThreadSubscriptionFormActionUnsubscribe:
		return true
	}
	return false
}

func (e ThreadSubscriptionFormAction) String() string {
	return string(e)
}

func (e *ThreadSubscriptionFormAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ThreadSubscriptionFormAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ThreadSubscriptionFormAction", str)
	}
	return nil
}

func (e ThreadSubscriptionFormAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a subscription.
type ThreadSubscriptionState string

const (
	// The subscription status is currently unavailable.
	ThreadSubscriptionStateUnavailable ThreadSubscriptionState = "UNAVAILABLE"
	// The subscription status is currently disabled.
	ThreadSubscriptionStateDisabled ThreadSubscriptionState = "DISABLED"
	// The User is never notified because they are ignoring the list
	ThreadSubscriptionStateIgnoringList ThreadSubscriptionState = "IGNORING_LIST"
	// The User is notified because they chose custom settings for this thread.
	ThreadSubscriptionStateSubscribedToThreadEvents ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD_EVENTS"
	// The User is never notified because they are ignoring the thread
	ThreadSubscriptionStateIgnoringThread ThreadSubscriptionState = "IGNORING_THREAD"
	// The User is notified becuase they are watching the list
	ThreadSubscriptionStateSubscribedToList ThreadSubscriptionState = "SUBSCRIBED_TO_LIST"
	// The User is notified because they chose custom settings for this thread.
	ThreadSubscriptionStateSubscribedToThreadType ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD_TYPE"
	// The User is notified because they are subscribed to the thread
	ThreadSubscriptionStateSubscribedToThread ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD"
	// The User is not recieving notifications from this thread
	ThreadSubscriptionStateNone ThreadSubscriptionState = "NONE"
)

var AllThreadSubscriptionState = []ThreadSubscriptionState{
	ThreadSubscriptionStateUnavailable,
	ThreadSubscriptionStateDisabled,
	ThreadSubscriptionStateIgnoringList,
	ThreadSubscriptionStateSubscribedToThreadEvents,
	ThreadSubscriptionStateIgnoringThread,
	ThreadSubscriptionStateSubscribedToList,
	ThreadSubscriptionStateSubscribedToThreadType,
	ThreadSubscriptionStateSubscribedToThread,
	ThreadSubscriptionStateNone,
}

func (e ThreadSubscriptionState) IsValid() bool {
	switch e {
	case ThreadSubscriptionStateUnavailable, ThreadSubscriptionStateDisabled, ThreadSubscriptionStateIgnoringList, ThreadSubscriptionStateSubscribedToThreadEvents, ThreadSubscriptionStateIgnoringThread, ThreadSubscriptionStateSubscribedToList, ThreadSubscriptionStateSubscribedToThreadType, ThreadSubscriptionStateSubscribedToThread, ThreadSubscriptionStateNone:
		return true
	}
	return false
}

func (e ThreadSubscriptionState) String() string {
	return string(e)
}

func (e *ThreadSubscriptionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ThreadSubscriptionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ThreadSubscriptionState", str)
	}
	return nil
}

func (e ThreadSubscriptionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Reason that the suggested topic is declined.
type TopicSuggestionDeclineReason string

const (
	// The suggested topic is not relevant to the repository.
	TopicSuggestionDeclineReasonNotRelevant TopicSuggestionDeclineReason = "NOT_RELEVANT"
	// The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
	TopicSuggestionDeclineReasonTooSpecific TopicSuggestionDeclineReason = "TOO_SPECIFIC"
	// The viewer does not like the suggested topic.
	TopicSuggestionDeclineReasonPersonalPreference TopicSuggestionDeclineReason = "PERSONAL_PREFERENCE"
	// The suggested topic is too general for the repository.
	TopicSuggestionDeclineReasonTooGeneral TopicSuggestionDeclineReason = "TOO_GENERAL"
)

var AllTopicSuggestionDeclineReason = []TopicSuggestionDeclineReason{
	TopicSuggestionDeclineReasonNotRelevant,
	TopicSuggestionDeclineReasonTooSpecific,
	TopicSuggestionDeclineReasonPersonalPreference,
	TopicSuggestionDeclineReasonTooGeneral,
}

func (e TopicSuggestionDeclineReason) IsValid() bool {
	switch e {
	case TopicSuggestionDeclineReasonNotRelevant, TopicSuggestionDeclineReasonTooSpecific, TopicSuggestionDeclineReasonPersonalPreference, TopicSuggestionDeclineReasonTooGeneral:
		return true
	}
	return false
}

func (e TopicSuggestionDeclineReason) String() string {
	return string(e)
}

func (e *TopicSuggestionDeclineReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopicSuggestionDeclineReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopicSuggestionDeclineReason", str)
	}
	return nil
}

func (e TopicSuggestionDeclineReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states of a tracked issue.
type TrackedIssueStates string

const (
	// The tracked issue is open
	TrackedIssueStatesOpen TrackedIssueStates = "OPEN"
	// The tracked issue is closed
	TrackedIssueStatesClosed TrackedIssueStates = "CLOSED"
)

var AllTrackedIssueStates = []TrackedIssueStates{
	TrackedIssueStatesOpen,
	TrackedIssueStatesClosed,
}

func (e TrackedIssueStates) IsValid() bool {
	switch e {
	case TrackedIssueStatesOpen, TrackedIssueStatesClosed:
		return true
	}
	return false
}

func (e TrackedIssueStates) String() string {
	return string(e)
}

func (e *TrackedIssueStates) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrackedIssueStates(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrackedIssueStates", str)
	}
	return nil
}

func (e TrackedIssueStates) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible durations that a user can be blocked for.
type UserBlockDuration string

const (
	// The user was blocked for 1 day
	UserBlockDurationOneDay UserBlockDuration = "ONE_DAY"
	// The user was blocked for 3 days
	UserBlockDurationThreeDays UserBlockDuration = "THREE_DAYS"
	// The user was blocked for 7 days
	UserBlockDurationOneWeek UserBlockDuration = "ONE_WEEK"
	// The user was blocked for 30 days
	UserBlockDurationOneMonth UserBlockDuration = "ONE_MONTH"
	// The user was blocked permanently
	UserBlockDurationPermanent UserBlockDuration = "PERMANENT"
)

var AllUserBlockDuration = []UserBlockDuration{
	UserBlockDurationOneDay,
	UserBlockDurationThreeDays,
	UserBlockDurationOneWeek,
	UserBlockDurationOneMonth,
	UserBlockDurationPermanent,
}

func (e UserBlockDuration) IsValid() bool {
	switch e {
	case UserBlockDurationOneDay, UserBlockDurationThreeDays, UserBlockDurationOneWeek, UserBlockDurationOneMonth, UserBlockDurationPermanent:
		return true
	}
	return false
}

func (e UserBlockDuration) String() string {
	return string(e)
}

func (e *UserBlockDuration) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserBlockDuration(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserBlockDuration", str)
	}
	return nil
}

func (e UserBlockDuration) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which user status connections can be ordered.
type UserStatusOrderField string

const (
	// Order user statuses by when they were updated.
	UserStatusOrderFieldUpdatedAt UserStatusOrderField = "UPDATED_AT"
)

var AllUserStatusOrderField = []UserStatusOrderField{
	UserStatusOrderFieldUpdatedAt,
}

func (e UserStatusOrderField) IsValid() bool {
	switch e {
	case UserStatusOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e UserStatusOrderField) String() string {
	return string(e)
}

func (e *UserStatusOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatusOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatusOrderField", str)
	}
	return nil
}

func (e UserStatusOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which verifiable domain connections can be ordered.
type VerifiableDomainOrderField string

const (
	// Order verifiable domains by the domain name.
	VerifiableDomainOrderFieldDomain VerifiableDomainOrderField = "DOMAIN"
	// Order verifiable domains by their creation date.
	VerifiableDomainOrderFieldCreatedAt VerifiableDomainOrderField = "CREATED_AT"
)

var AllVerifiableDomainOrderField = []VerifiableDomainOrderField{
	VerifiableDomainOrderFieldDomain,
	VerifiableDomainOrderFieldCreatedAt,
}

func (e VerifiableDomainOrderField) IsValid() bool {
	switch e {
	case VerifiableDomainOrderFieldDomain, VerifiableDomainOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e VerifiableDomainOrderField) String() string {
	return string(e)
}

func (e *VerifiableDomainOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VerifiableDomainOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VerifiableDomainOrderField", str)
	}
	return nil
}

func (e VerifiableDomainOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which workflow run connections can be ordered.
type WorkflowRunOrderField string

const (
	// Order workflow runs by most recently created
	WorkflowRunOrderFieldCreatedAt WorkflowRunOrderField = "CREATED_AT"
)

var AllWorkflowRunOrderField = []WorkflowRunOrderField{
	WorkflowRunOrderFieldCreatedAt,
}

func (e WorkflowRunOrderField) IsValid() bool {
	switch e {
	case WorkflowRunOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e WorkflowRunOrderField) String() string {
	return string(e)
}

func (e *WorkflowRunOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowRunOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowRunOrderField", str)
	}
	return nil
}

func (e WorkflowRunOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The possible states for a workflow.
type WorkflowState string

const (
	// The workflow is active.
	WorkflowStateActive WorkflowState = "ACTIVE"
	// The workflow was deleted from the git repository.
	WorkflowStateDeleted WorkflowState = "DELETED"
	// The workflow was disabled by default on a fork.
	WorkflowStateDisabledFork WorkflowState = "DISABLED_FORK"
	// The workflow was disabled for inactivity in the repository.
	WorkflowStateDisabledInactivity WorkflowState = "DISABLED_INACTIVITY"
	// The workflow was disabled manually.
	WorkflowStateDisabledManually WorkflowState = "DISABLED_MANUALLY"
)

var AllWorkflowState = []WorkflowState{
	WorkflowStateActive,
	WorkflowStateDeleted,
	WorkflowStateDisabledFork,
	WorkflowStateDisabledInactivity,
	WorkflowStateDisabledManually,
}

func (e WorkflowState) IsValid() bool {
	switch e {
	case WorkflowStateActive, WorkflowStateDeleted, WorkflowStateDisabledFork, WorkflowStateDisabledInactivity, WorkflowStateDisabledManually:
		return true
	}
	return false
}

func (e WorkflowState) String() string {
	return string(e)
}

func (e *WorkflowState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowState", str)
	}
	return nil
}

func (e WorkflowState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
