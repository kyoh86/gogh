// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/github/if.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v33/github"
	reflect "reflect"
)

// MockAdaptor is a mock of Adaptor interface
type MockAdaptor struct {
	ctrl     *gomock.Controller
	recorder *MockAdaptorMockRecorder
}

// MockAdaptorMockRecorder is the mock recorder for MockAdaptor
type MockAdaptorMockRecorder struct {
	mock *MockAdaptor
}

// NewMockAdaptor creates a new mock instance
func NewMockAdaptor(ctrl *gomock.Controller) *MockAdaptor {
	mock := &MockAdaptor{ctrl: ctrl}
	mock.recorder = &MockAdaptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdaptor) EXPECT() *MockAdaptorMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockAdaptor) GetUser(ctx context.Context, user string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, user)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser
func (mr *MockAdaptorMockRecorder) GetUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAdaptor)(nil).GetUser), ctx, user)
}

// ListRepositories mocks base method
func (m *MockAdaptor) ListRepositories(ctx context.Context, user string, opts *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockAdaptorMockRecorder) ListRepositories(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockAdaptor)(nil).ListRepositories), ctx, user, opts)
}

// ListRepositoriesByOrg mocks base method
func (m *MockAdaptor) ListRepositoriesByOrg(ctx context.Context, org string, opts *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesByOrg", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoriesByOrg indicates an expected call of ListRepositoriesByOrg
func (mr *MockAdaptorMockRecorder) ListRepositoriesByOrg(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesByOrg", reflect.TypeOf((*MockAdaptor)(nil).ListRepositoriesByOrg), ctx, org, opts)
}

// CreateRepository mocks base method
func (m *MockAdaptor) CreateRepository(ctx context.Context, org string, repo *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockAdaptorMockRecorder) CreateRepository(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockAdaptor)(nil).CreateRepository), ctx, org, repo)
}

// CreateForkRepository mocks base method
func (m *MockAdaptor) CreateForkRepository(ctx context.Context, owner, repo string, opts *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForkRepository", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateForkRepository indicates an expected call of CreateForkRepository
func (mr *MockAdaptorMockRecorder) CreateForkRepository(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForkRepository", reflect.TypeOf((*MockAdaptor)(nil).CreateForkRepository), ctx, owner, repo, opts)
}

// DeleteRepositories mocks base method
func (m *MockAdaptor) DeleteRepositories(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositories", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositories indicates an expected call of DeleteRepositories
func (mr *MockAdaptorMockRecorder) DeleteRepositories(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositories", reflect.TypeOf((*MockAdaptor)(nil).DeleteRepositories), ctx, owner, repo)
}
